package com.buildman.buildman.database;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.SQLException;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;

import com.buildman.buildman.model.Dashboard_Model;
import com.buildman.buildman.model.Expense_Expense_Model;
import com.buildman.buildman.model.Expense_Income_Model;
import com.buildman.buildman.model.Expense_Indent_Model;
import com.buildman.buildman.model.KnowledgeCenter_Model;
import com.buildman.buildman.model.Last_Sync_Report_Model;
import com.buildman.buildman.model.LoginHistory_Model;
import com.buildman.buildman.model.Login_Model;
import com.buildman.buildman.model.Manpower_Model;
import com.buildman.buildman.model.Material_Dashboard_Model;
import com.buildman.buildman.model.Project_Images;
import com.buildman.buildman.model.Received_Material_Model;
import com.buildman.buildman.model.SetUp_MyApp_Model;
import com.buildman.buildman.model.StatusReport_Parent_Model;
import com.buildman.buildman.model.Status_Model;
import com.buildman.buildman.model.UserSites_Model;

import java.util.ArrayList;
import java.util.List;

public class DatabaseHandler extends SQLiteOpenHelper {
	 private static final int DATABASE_VERSION = 3;
	 private static final String DATABASE_NAME = "BUILDMAN_APP_DB";

//		Setup myapp TABLE
	private static final String TABLE_SETUP_MYAPP = "SETUP_MYAPP";
	private static final String COLUMN_SETUP_MYAPP_ID = "SETUP_MYAPP_ID";
	private static final String COLUMN_EMAIL_SETUP_MYAPP = "EMAIL_SETUP_MYAPP";
	private static final String COLUMN_PASSWORD_SETUP_MYAPP = "PASSWORD_SETUP_MYAPP";
	private static final String COLUMN_ORGCODE_SETUP_MYAPP = "ORGCODE_SETUP_MYAPP";
	private static final String COLUMN_DATE_SETUP_MYAPP = "DATE_SETUP_MYAPP";
	private static final String COLUMN_ORG_ID_SETUP_MYAPP = "ORG_ID_SETUP_MYAPP";
	private static final String COLUMN_ORG_SUBSCRIPTION_STATUS_SETUP_MYAPP = "ORG_SUBSCRIPTION_STATUS_SETUP_MYAPP";
	private static final String COLUMN_PARTY_ID_SETUP_MYAPP = "PARTY_ID_SETUP_MYAPP";

//		Login TABLE
	private static final String TABLE_LOGIN = "LOGIN";
	private static final String COLUMN_LOGIN_ID = "LOGIN_ID";
	private static final String COLUMN_EMAIL_LOGIN = "EMAIL_LOGIN";
	private static final String COLUMN_PASSWORD_LOGIN = "PASSWORD_LOGIN";
	private static final String COLUMN_PARTY_ID_LOGIN = "PARTY_ID_LOGIN";
	private static final String COLUMN_ORG_ID_LOGIN = "ORG_ID_LOGIN";
	private static final String COLUMN_ORG_NAME_LOGIN = "ORG_NAME_LOGIN";
	private static final String COLUMN_LOGINSTATUS_LOGIN = "LOGINSTATUS_LOGIN";
	private static final String COLUMN_PARTY_NAME_LOGIN = "PARTY_NAME_LOGIN";
	private static final String COLUMN_PARTY_LOGIN_REMEMBER = "LOGIN_REMEMBER";

//		Login History Table
	private static final String TABLE_LOGIN_HISTORY = "LOGIN_HISTORY";
	private static final String COLUMN_LOGIN_HISTORY_ID = "LOGIN_HISTORY_ID";
	private static final String COLUMN_LOGINSTATUS_LOG_HISTORY = "LOGINSTATUS_LOG_HISTORY";
	private static final String COLUMN_FROMDATE_LOG_HISTORY = "FROMDATE_LOG_HISTORY";
	private static final String COLUMN_TODATE_LOG_HISTORY = "TODATE_LOG_HISTORY";
	private static final String COLUMN_PARTY_ID_LOG_HISTORY = "PARTY_ID_LOG_HISTORY";
	private static final String COLUMN_ORG_ID_LOG_HISTORY = "ORG_ID_LOG_HISTORY";
		
//		USER_SITES Table
	private static final String TABLE_USER_SITES = "USER_SITES";
	private static final String COLUMN_USER_SITES_ID = "USER_SITES_ID";
	private static final String COLUMN_USER_SITE_LINK_ID = "USER_SITE_LINK_ID";
	private static final String COLUMN_PROJECT_ID_USER_SITES = "PROJECT_ID_USER_SITES";
	private static final String COLUMN_PROJECT_NAME_USER_SITES = "PROJECT_NAME_USER_SITES";
	private static final String COLUMN_SITE_ID_USER_SITES = "SITE_ID_USER_SITES";
	private static final String COLUMN_SITE_NAME_USER_SITES = "SITE_NAME_USER_SITES";
	private static final String COLUMN_SITE_LOCATION_USER_SITES = "SITE_LOCATION_USER_SITES";
	private static final String COLUMN_ACCESS_STATUS_USER_SITES = "ACCESS_STATUS_USER_SITES";
	private static final String COLUMN_PARTY_ID_USER_SITES = "PARTY_ID_USER_SITES";
	private static final String COLUMN_ORG_ID_USER_SITES = "ORG_ID_USER_SITES";
	private static final String COLUMN_USER_TYPE_USER_SITES = "USER_TYPE_USER_SITES";
	public static final String COLUMN_Display_Flag = "Display_flag";//8
		
//		MATERIAL  TABLE
	private static final String TABLE_MATERIAL = "MATERIAL";
	private static final String COLUMN_MATERIAL_ID = "MATERIAL_ID";
	private static final String COLUMN_MATERIAL_NAME_MATL = "MATERIAL_NAME_MATL";
	private static final String COLUMN_UNITS_MATL = "UNITS_MATL";
	private static final String COLUMN_RATE_MATL= "RATE_MATL";
		
//		MATERIAL_STOCK_TRANSACTIONS  TABLE
	private static final String TABLE_MATERIAL_STOCK_TRANSACTIONS = "MATERIAL_STOCK_TRANSACTIONS";
	private static final String COLUMN_MATERIAL_STOCK_TRANSACTIONS_ID = "MATERIAL_STOCK_TRANSACTIONS_ID";
	private static final String COLUMN_MATERIAL_ID_MATL_STK_TRANS = "MATERIAL_ID_MATL_STK_TRANS";
	private static final String COLUMN_MATERIAL_NAME_MATL_STK_TRANS = "MATERIAL_NAME_MATL_STK_TRANS";
	private static final String COLUMN_UNITS_MATL_STK_TRANS= "UNITS_MATL_STK_TRANS";
	private static final String COLUMN_RATE_MATL_STK_TRANS = "RATE_MATL_STK_TRANS";
	private static final String COLUMN_RECEIVED_STOCK_MATL_STK_TRANS = "RECEIVED_STOCK_MATL_STK_TRANS";
	private static final String COLUMN_USED_MATL_STK_TRANS = "USED_MATL_STK_TRANS";
	private static final String COLUMN_INDENT_MATL_STK_TRANS = "INDENT_MATL_STK_TRANS";
	private static final String COLUMN_MATERIAL_REQ_BY_DATE_MATL_STK_TRANS = "MATERIAL_REQ_BY_DATE_MATL_STK_TRANS";
	private static final String COLUMN_CURRENT_STOCK_MATL_STK_TRANS = "CURRENT_STOCK_MATL_STK_TRANS";
	private static final String COLUMN_PROJECT_ID_MATL_STK_TRANS = "PROJECT_ID_MATL_STK_TRANS";
	private static final String COLUMN_SITE_ID_MATL_STK_TRANS = "SITE_ID_MATL_STK_TRANS";
	private static final String COLUMN_PARTY_ID_MATL_STK_TRANS = "PARTY_ID_MATL_STK_TRANS";
	private static final String COLUMN_ORG_ID_MATL_STK_TRANS = "ORG_ID_MATL_STK_TRANS";
	private static final String COLUMN_SYNC_FLAG_MATL_STK_TRANS = "SYNC_FLAG_MATL_STK_TRANS";
	private static final String COLUMN_NEW_OR_OLD_FLAG_MATL_STK_TRANS = "NEW_OR_OLD_FLAG_MATL_STK_TRANS";
	private static final String COLUMN_DC_INVOICE_MATL_STK_TRANS = "DC_INVOICE_MATL_STK_TRANS";
	private static final String COLUMN_LOT_NUMBER_MATL_STK_TRANS = "LOT_NUMBER_MATL_STK_TRANS";
	private static final String COLUMN_DOC_TYPE_MATL_STK_TRANS = "DOC_TYPE_MATL_STK_TRANS";
	private static final String COLUMN_TRANSACTIONS_DATE_MATL_STK_TRANS = "TRANSACTIONS_DATE_MATL_STK_TRANS";
	private static final String COLUMN_CREATED_DATE_MATL_STK_TRANS = "CREATED_DATE_MATL_STK_TRANS";
	private static final String COLUMN_REMARKS_MATL_STK_TRANS = "REMARKS_MATL_STK_TRANS";
	private static final String COLUMN_ADJUSTMENTS_MATL_STK_TRANS = "ADJUSTMENTS_MATL_STK_TRANS";
	private static final String COLUMN_ADJUST_REASON_MATL_STK_TRANS = "ADJUST_REASON_MATL_STK_TRANS";
	private static final String COLUMN_DISPLAY_FLAG_MATL_STK_TRANS = "DISPLAY_FLAG_MATL_STK_TRANS";
	private static final String COLUMN_TASK_ID_MATL_STK_TRANS = "TASK_ID_MATL_STK_TRANS";
			
		
//		MANPOWER_SUPPLY_CONTRACT_MASTER
	private static final String TABLE_MANPOWER_SUPPLY_CONTRACT_MASTER = "MANPOWER_SUPPLY_CONTRACT_MASTER";
	private static final String COLUMN_MANPOWER_SUPPLY_CONTRACT_MASTER_ID = "MANPOWER_SUPPLY_CONTRACT_MASTER_ID";
	private static final String COLUMN_CONTRACT_PROJECT_ID_MP_SUPPLY = "CONTRACT_PROJECT_ID_MP_SUPPLY";
	private static final String COLUMN_CONTRACTOR_ID_MP_SUPPLY = "CONTRACTOR_ID_MP_SUPPLY";
	private static final String COLUMN_CONTRACTOR_NAME_MP_SUPPLY = "CONTRACTOR_NAME_MP_SUPPLY";
	private static final String COLUMN_PRJ_ID_MP_SUPPLY = "PRJ_ID_MP_SUPPLY";
	private static final String COLUMN_SITE_ID_MP_SUPPLY = "SITE_ID_MP_SUPPLY";
	private static final String COLUMN_LABOUR_TYPE_ID_MP_SUPPLY = "LABOUR_TYPE_ID_MP_SUPPLY";
	private static final String COLUMN_LABOUR_TYPE_NAME_MP_SUPPLY = "LABOUR_TYPE_NAME_MP_SUPPLY";
	private static final String COLUMN_ENTERED_QTY_MP_SUPPLY = "ENTERED_QTY_MP_SUPPLY";
	private static final String COLUMN_TODAY_ENTERED_QTY_SUM_MP_SUPPLY = "TODAY_ENTERED_QTY_SUM_MP_SUPPLY";
	private static final String COLUMN_TOTAL_TILL_DATE_QTY_MP_SUPPLY = "TOTAL_TILL_DATE_QTY_MP_SUPPLY";
	private static final String COLUMN_RATE_MP_SUPPLY = "RATE_MP_SUPPLY";
	private static final String COLUMN_TOTAL_BILLED_AMT_MP_SUPPLY = "TOTAL_BILLED_AMT_MP_SUPPLY";
	private static final String COLUMN_TOTAL_PAID_AMT_MP_SUPPLY = "TOTAL_PAID_AMT_MP_SUPPLY";
	private static final String COLUMN_BALC_AMT_MP_SUPPLY = "BALC_AMT_MP_SUPPLY";
	private static final String COLUMN_SYN_FLAG_MP_SUPPLY = "SYN_FLAG_MP_SUPPLY";
	private static final String COLUMN_CREATED_DATE_MP_SUPPLY = "CREATED_DATE_MP_SUPPLY";
	private static final String COLUMN_TRANSACTION_DATE_MP_SUPPLY = "TRANSACTION_DATE_MP_SUPPLY";
	private static final String COLUMN_DISPLAY_FLAG_MP_SUPPLY = "DISPLAY_FLAG_MP_SUPPLY";
		
//		TABLE FOR MANPOWER_LABOUR_CONTRACT_WORK_MASTER
	private static final String TABLE_MANPOWER_LABOUR_CONTRACT_WORK_MASTER = "MANPOWER_LABOUR_CONTRACT_WORK_MASTER";
	private static final String COLUMN_MANPOWER_LABOUR_CONTRACT_WORK_MASTER_ID = "MANPOWER_LABOUR_CONTRACT_WORK_MASTER_ID";
	private static final String COLUMN_LAB_CONTRACT_WORK_MASTER_ID_MP_CONTRACT = "LAB_CONTRACT_WORK_MASTER_ID_MP_CONTRACT";
	private static final String COLUMN_CONTRACT_PROJECT_ID_MP_CONRACT = "CONTRACT_PROJECT_ID_MP_CONRACT";
	private static final String COLUMN_CONTRACTOR_ID_MP_CONTRACT = "CONTRACTOR_ID_MP_CONTRACT";
	private static final String COLUMN_CONTRACTOR_NAME_MP_CONTRACT = "CONTRACTOR_NAME_MP_CONTRACT";
	private static final String COLUMN_PRJ_ID_MP_CONTRACT = "PRJ_ID_MP_CONTRACT";
	private static final String COLUMN_SITE_ID_MP_CONTRACT = "SITE_ID_MP_CONTRACT";
	private static final String COLUMN_WORK_LOCATION_ID_MP_CONTRACT = "WORK_LOCATION_ID_MP_CONTRACT";
	private static final String COLUMN_WORK_LOCATION_NAME_MP_CONTRACT = "WORK_LOCATION_NAME_MP_CONTRACT";
	private static final String COLUMN_TOTAL_QTY_MP_CONTRACT = "TOTAL_QTY_MP_CONTRACT";
	private static final String COLUMN_QTY_UNITS_MP_CONTRACT = "QTY_UNITS_MP_CONTRACT";
	private static final String COLUMN_START_DATE_MP_CONTRACT = "START_DATE_MP_CONTRACT";
	private static final String COLUMN_SCOPE_OF_WORK_MP_CONTRACT = "SCOPE_OF_WORK_MP_CONTRACT";
	private static final String COLUMN_QTY_COMPLETED_MP_CONTRACT = "QTY_COMPLETED_MP_CONTRACT";
	private static final String COLUMN_LAB_CONT_WRK_RATE_MP_CONTRACT = "LAB_CONT_WRK_RATE_MP_CONTRACT";
	private static final String COLUMN_PAID_AMT_MP_CONTRACT = "PAID_AMT_MP_CONTRACT";
	private static final String COLUMN_BALC_AMT_MP_CONTRACT = "BALC_AMT_MP_CONTRACT";
	private static final String COLUMN_SYN_FLAG_MP_CONTRACT = "SYN_FLAG_MP_CONTRACT";
	private static final String COLUMN_CREATED_DATE_MP_CONTRACT = "CREATED_DATE_MP_CONTRACT";
	private static final String COLUMN_DISPLAY_FLAG_MP_CONTRACT = "DISPLAY_FLAG_MP_CONTRACT";
		
//		EXPENSE INCOME  TABLE
	private static final String TABLE_EXP_INCOME = "EXPENSE_INCOME";
	private static final String COLUMN_EXP_INCOME_ID = "EXP_INCOME_ID";
	private static final String COLUMN_ACCOUNT_NAME_EXP_INCOME = "ACCOUNT_NAME_EXP_INCOME";
	private static final String COLUMN_CURRENT_BALANCE_INCOME = "CURRENT_BALANCE_INCOME";
	private static final String COLUMN_AMOUNT_TYPE_EXP_INCOME = "AMOUNT_TYPE_EXP_INCOME";
	private static final String COLUMN_CATEGORY_EXP_INCOME = "CATEGORY_EXP_INCOME";
	private static final String COLUMN_SUB_CATEGORY_EXP_INCOME = "SUB_CATEGORY_EXP_INCOME";
	private static final String COLUMN_DATE_EXP_INCOME = "DATE_EXP_INCOME";
	private static final String COLUMN_TIME_EXP_INCOME = "TIME_EXP_INCOME";
	private static final String COLUMN_AMOUNT_EXP_INCOME = "AMOUNT_EXP_INCOME";
	private static final String COLUMN_PAYER_EXP_INCOME = "PAYER_EXP_INCOME";
	private static final String COLUMN_PAYMETHOD_EXP_INCOME = "PAYMETHOD_EXP_INCOME";
	private static final String COLUMN_REF_CHEQUE_NO_EXP_INCOME = "REF_CHEQUE_NO_EXP_INCOME";
	private static final String COLUMN_CHEQUE_STATUS_EXP_INCOME = "CHEQUE_STATUS_EXP_INCOME";
	private static final String COLUMN_DESCRIPTION_EXP_INCOME = "DESCRIPTION_EXP_INCOME";
	private static final String COLUMN_IMAGES_EXP_INCOME = "IMAGES_EXP_INCOME";
	private static final String COLUMN_TAX_EXP_INCOME = "TAX_EXP_INCOME";

//		EXPENSE EXPENSE  TABLE
	private static final String TABLE_EXP_EXPENSE = "EXPENSE_EXPENSE";
	private static final String COLUMN_EXP_EXPENSE_ID = "EXP_EXPENSE_ID";
	private static final String COLUMN_CATEGORY_EXP_EXPENSE = "CATEGORY_EXP_EXPENSE";
	private static final String COLUMN_SUB_CATEGORY_EXP_EXPENSE = "SUB_CATEGORY_EXP_EXPENSE";
	private static final String COLUMN_DATE_EXP_EXPENSE = "DATE_EXP_EXPENSE";
	private static final String COLUMN_TIME_EXP_EXPENSE = "TIME_EXP_EXPENSE";
	private static final String COLUMN_AMOUNT_EXP_EXPENSE = "AMOUNT_EXP_EXPENSE";
	private static final String COLUMN_PAYEE_EXP_EXPENSE = "PAYEE_EXP_EXPENSE";
	private static final String COLUMN_PAYMETHOD_EXP_EXPENSE = "PAYMETHOD_EXP_EXPENSE";
	private static final String COLUMN_REF_CHEQUE_NO_EXP_EXPENSE = "REF_CHEQUE_NO_EXP_EXPENSE";
	private static final String COLUMN_CHEQUE_STATUS_EXP_EXPENSE = "CHEQUE_STATUS_EXP_EXPENSE";
	private static final String COLUMN_DESCRIPTION_EXP_EXPENSE = "DESCRIPTION_EXP_EXPENSE";
	private static final String COLUMN_IMAGES_EXP_EXPENSE = "IMAGES_EXP_EXPENSE";
	private static final String COLUMN_TAX_EXP_EXPENSE = "TAX_EXP_EXPENSE";

//		EXPENSE INDENT  TABLE
	private static final String TABLE_EXP_INDENT = "EXPENSE_INDENT";
	private static final String COLUMN_EXP_INDENT_ID = "EXP_INDENT_ID";
	private static final String COLUMN_CATEGORY_EXP_INDENT = "CATEGORY_EXP_INDENT";
	private static final String COLUMN_SUB_CATEGORY_EXP_INDENT = "SUB_CATEGORY_EXP_INDENT";
	private static final String COLUMN_DATE_EXP_INDENT = "DATE_EXP_INDENT";
	private static final String COLUMN_TIME_EXP_INDENT = "TIME_EXP_INDENT";
	private static final String COLUMN_AMOUNT_EXP_INDENT = "AMOUNT_EXP_INDENT";
	private static final String COLUMN_PAYER_EXP_INDENT = "PAYER_EXP_INDENT";
	private static final String COLUMN_PAYMETHOD_EXP_INDENT = "PAYMETHOD_EXP_INDENT";
	private static final String COLUMN_REF_CHEQUE_NO_EXP_INDENT = "REF_CHEQUE_NO_EXP_INDENT";
	private static final String COLUMN_CHEQUE_STATUS_EXP_INDENT = "CHEQUE_STATUS_EXP_INDENT";
	private static final String COLUMN_DESCRIPTION_EXP_INDENT = "DESCRIPTION_EXP_INDENT";
	private static final String COLUMN_IMAGES_EXP_INDENT = "IMAGES_EXP_INDENT";
	private static final String COLUMN_TAX_EXP_INDENT = "TAX_EXP_INDENT";
		
//		DASHBOARD TABLE
	private static final String TABLE_DASHBOARD = "DASHBOARD";
	private static final String COLUMN_DASHBOARD_ID = "DASHBOARD_ID";
	private static final String COLUMN_SITE_ID_DASHBOARD = "SITE_ID_DASHBOARD";
	private static final String COLUMN_SITENAME_DASHBOARD = "SITENAME_DASHBOARD";
	private static final String COLUMN_SITE_STOCKVALUE_DASHBOARD = "SITE_STOCKVALUE_DASHBOARD";
	private static final String COLUMN_DATE_DASHBOARD = "DATE_DASHBOARD";

//		MATERIAL_DASHBOARD TABLE
	private static final String TABLE_MATERIAL_DASHBOARD = "MATERIAL_DASHBOARD";
	private static final String COLUMN_MATERIAL_DASHBOARD_ID = "MATERIAL_DASHBOARD_ID";
	private static final String COLUMN_MATERIAL_ID_MATL_DASHBOARD = "MATERIAL_ID_MATL_DASHBOARD";
	private static final String COLUMN_MATERIAL_NAME_MATL_DASHBOARD = "MATERIAL_NAME_MATL_DASHBOARD";
	private static final String COLUMN_MATERIAL_UNITS_MATL_DASHBOARD = "MATERIAL_UNITS_MATL_DASHBOARD";
	private static final String COLUMN_MATERIAL_QUANTITY_MATL_DASHBOARD = "MATERIAL_QUANTITY_MATL_DASHBOARD";
	private static final String COLUMN_MATERIAL_VALUE_MATL_DASHBOARD = "MATERIAL_VALUE_MATL_DASHBOARD";
	private static final String COLUMN_SITE_ID_MATL_DASHBOARD = "SITE_ID_MATL_DASHBOARD";
	private static final String COLUMN_SITE_NAME_MATL_DASHBOARD = "SITE_NAME_MATL_DASHBOARD";
	private static final String COLUMN_DATE_MATL_DASHBOARD = "DATE_MATL_DASHBOARD";
		
//		PROJECT_STATUS TABLE		
	private static final String TABLE_PROJECT_STATUS = "PROJECT_STATUS";
	private static final String COLUMN_PROJECT_STATUS_ID = "PROJECT_STATUS_ID";
	private static final String COLUMN_PROJECT_ID_PRJ_STATUS = "PROJECT_ID_PRJ_STATUS";
	private static final String COLUMN_SITE_ID_PRJ_STATUS = "SITE_ID_PRJ_STATUS";
	private static final String COLUMN_PRJ_EST_WORKMASTER_ID_PRJ_STATUS = "PRJ_EST_WORKMASTER_ID_PRJ_STATUS";
	private static final String COLUMN_PRJ_EST_WORK_LOCATION_NAME_PRJ_STATUS = "PRJ_EST_WORK_LOCATION_NAME_PRJ_STATUS";
	private static final String COLUMN_PERCENTAGE_COMPLETION_PRJ_STATUS = "PERCENTAGE_COMPLETION_PRJ_STATUS";
	private static final String COLUMN_PRJ_EST_WORK_TOT_QTY_PRJ_STATUS = "PRJ_EST_WORK_TOT_QTY_PRJ_STATUS";
	private static final String COLUMN_PRJ_EST_WORK_TOT_QTY_UNITS_PRJ_STATUS = "PRJ_EST_WORK_TOT_QTY_UNITS_PRJ_STATUS";
	private static final String COLUMN_PRJ_EST_WORK_COMP_QTY_PRJ_STATUS = "PRJ_EST_WORK_COMP_QTY_PRJ_STATUS";
	private static final String COLUMN_PRJ_WORK_EST_START_DATE_PRJ_STATUS = "PRJ_WORK_EST_START_DATE_PRJ_STATUS";
	private static final String COLUMN_PRJ_WORK_EST_END_DATE_PRJ_STATUS = "PRJ_WORK_EST_END_DATE_PRJ_STATUS";
	private static final String COLUMN_START_DATE_PRJ_STATUS = "START_DATE_PRJ_STATUS";
	private static final String COLUMN_END_DATE_PRJ_STATUS = "END_DATE_PRJ_STATUS";
	private static final String COLUMN_SYN_STATUS_PRJ_STATUS = "SYN_STATUS_PRJ_STATUS";
	private static final String COLUMN_CREATED_DATE_PRJ_STATUS = "CREATED_DATE_PRJ_STATUS";
	private static final String COLUMN_TRANSACTION_DATE_PRJ_STATUS = "TRANSACTION_DATE_PRJ_STATUS";
	private static final String COLUMN_DISPLAY_FLAG_PRJ_STATUS = "DISPLAY_FLAG_PRJ_STATUS";
	private static final String COLUMN_REMARKS_PRJ_STATUS = "REMARKS_PRJ_STATUS";
	private static final String COLUMN_WORK_TASK_TYPE_ID_PRJ_STATUS = "WORK_TASK_TYPE_ID_PRJ_STATUS";
	private static final String COLUMN_MAIN_TASK_ID_PRJ_STATUS = "MAIN_TASK_ID_PRJ_STATUS";
	private static final String COLUMN_MAIN_TASK_NAME_PRJ_STATUS = "MAIN_TASK_NAME_PRJ_STATUS";
	private static final String COLUMN_LINK_TO_BILL_PRJ_STATUS = "LINK_TO_BILL_PRJ_STATUS";
	private static final String COLUMN_SUM_ENTERED_QTY_PRJ_STATUS = "SUM_ENTERED_QTY_PRJ_STATUS";

//		PROJECT_ISSUES TABLE IN STATUS_TAB
	private static final String TABLE_PROJECT_ISSUES = "PROJECT_ISSUES";
	private static final String COLUMN_PROJECT_ISSUES_ID = "PROJECT_ISSUES_ID";
	private static final String COLUMN_PROJECT_ID_PRJ_ISSUES = "PROJECT_ID_PRJ_ISSUES";
	private static final String COLUMN_SITE_ID_PRJ_ISSUES = "SITE_ID_PRJ_ISSUES";
	private static final String COLUMN_PRJ_EST_WORKMASTER_ID_PRJ_ISSUES = "PRJ_EST_WORKMASTER_ID_PRJ_ISSUES";
	private static final String COLUMN_PRJ_EST_WORK_LOCATION_NAME_PRJ_ISSUES = "PRJ_EST_WORK_LOCATION_NAME_PRJ_ISSUES";
	private static final String COLUMN_ISSUES_TITLE_PRJ_ISSUES = "ISSUES_TITLE_PRJ_ISSUES";
	private static final String COLUMN_ISSUES_DETAILS_PRJ_ISSUES = "ISSUES_DETAILS_PRJ_ISSUES";
	private static final String COLUMN_SYN_FLAG_PRJ_ISSUES = "SYN_FLAG_PRJ_ISSUES";
	private static final String COLUMN_DISPLAY_FLAG_PRJ_ISSUES = "DISPLAY_FLAG_PRJ_ISSUES";
	private static final String COLUMN_ISSUES_CRAETION_DATE_PRJ_ISSUES = "ISSUES_CRAETION_DATE_PRJ_ISSUES";
	private static final String COLUMN_ISSUES_PORTAL_ISSUES_ID = "ISSUES_PORTAL_ISSUES_ID";

//		PROJECT_IMAGES TABLE IN STATUS_TAB
	private static final String TABLE_PROJECT_IMAGES = "PROJECT_IMAGES";
	private static final String COLUMN_PROJECT_IMAGES_ID = "PROJECT_IMAGES_ID";
	private static final String COLUMN_PROJECT_ID_PRJ_IMAGES = "PROJECT_ID_PRJ_IMAGES";
	private static final String COLUMN_SITE_ID_PRJ_IMAGES = "SITE_ID_PRJ_IMAGES";
	private static final String COLUMN_PRJ_EST_WORKMASTER_ID_PRJ_IMAGES = "PRJ_EST_WORKMASTER_ID_PRJ_IMAGES";
	private static final String COLUMN_PRJ_EST_WORK_LOCATION_NAME_PRJ_IMAGES = "PRJ_EST_WORK_LOCATION_NAME_PRJ_IMAGES";
	private static final String COLUMN_PATH_PRJ_IMAGES = "PATH_PRJ_IMAGES";
	private static final String COLUMN_SYN_FLAG_PRJ_IMAGES = "SYN_FLAG_PRJ_IMAGES";
	private static final String COLUMN_IMAGES_CRAETION_DATE_PRJ_IMAGES = "IMAGES_CRAETION_DATE_PRJ_IMAGES";

//      PROJECT_ISSUES_IMAGES TABLE IN STATUS_TAB
	private static final String TABLE_PROJECT_ISSUES_IMAGES = "PROJECT_ISSUES_IMAGES";
	private static final String COLUMN_PROJECT_ISSUES_IMAGES_ID = "PROJECT_ISSUES_IMAGES_ID";
	private static final String COLUMN_PROJECT_ISSUESS_ID = "PROJECT_ISSUES_ID";
	private static final String COLUMN_PROJECT_ID_PRJ_ISSUES_IMAGES = "PROJECT_ID_PRJ_ISSUES";
	private static final String COLUMN_SITE_ID_PRJ_ISSUES_IMAGES = "SITE_ID_PRJ_ISSUES";
	private static final String COLUMN_PRJ_EST_WORKMASTER_ID_PRJ_ISSUES_IMAGES = "PRJ_EST_WORKMASTER_ID_PRJ_ISSUES";
	private static final String COLUMN_PATH_PRJ_ISSUES_IMAGES = "PATH_PRJ_ISSUES_IMAGES";
	private static final String COLUMN_SYN_FLAG_PRJ_ISSUES_IMAGES = "SYN_FLAG_PRJ_ISSUES_IMAGES";
	private static final String COLUMN_DISPLAY_FLAG_PRJ_ISSUES_IMAGES = "DISPLAY_FLAG_PRJ_ISSUES_IMAGES";
	private static final String COLUMN_IMAGES_CRAETION_DATE_PRJ_ISSUES_IMAGES = "IMAGES_CRAETION_DATE_PRJ_ISSUES_IMAGES";
		
//		STATUS_REPORT TABLE 
	private static final String TABLE_STATUS_REPORT = "STATUS_REPORT";
	private static final String COLUMN_STATUS_REPORT_ID = "STATUS_REPORT_ID";
	private static final String COLUMN_SITE_ID_STATUS_REPORT = "SITE_ID_STATUS_REPORT";
	private static final String COLUMN_SITE_NAME_STATUS_REPORT = "SITE_NAME_STATUS_REPORT";
	private static final String COLUMN_TASK_ID_STATUS_REPORT = "TASK_ID_STATUS_REPORT";
	private static final String COLUMN_TASK_NAME_STATUS_REPORT = "TASK_NAME_STATUS_REPORT";
	private static final String COLUMN_TOTAL_QTY_STATUS_REPORT = "TOTAL_QTY_STATUS_REPORT";
	private static final String COLUMN_COMPLETED_QTY_STATUS_REPORT = "COMPLETED_QTY_STATUS_REPORT";
	private static final String COLUMN_PERCENTAGE_WORK_COMP_STATUS_REPORT = "PERCENTAGE_WORK_COMP_STATUS_REPORT";
	private static final String COLUMN_BALANCE_QTY_STATUS_REPORT = "BALANCE_QTY_STATUS_REPORT";
	private static final String COLUMN_BILLABLE_AMT_STATUS_REPORT = "BILLABLE_AMT_STATUS_REPORT";
	private static final String COLUMN_UNITS_STATUS_REPORT = "UNITS_STATUS_REPORT";

//		LAst_SYnchronization date
	private static final String TABLE_LAST_SYN_REPORT = "LAST_SYN_REPORT";
	private static final String COLUMN_LAST_SYN_REPORT_ID = "LAST_SYN_REPORT_ID";
	private static final String COLUMN_MODULE_ID_LAST_SYN_REPORT = "MODULE_ID_LAST_SYN_REPORT";
	private static final String COLUMN_NUMBER_OFDAYS_LAST_SYN_REPORT = "NUMBER_OFDAYS_LAST_SYN_REPORT";
		
//		KNOWLEDGE_CENTER table
	private static final String TABLE_KNOWLEDGE_CENTER = "KNOWLEDGE_CENTER";
	private static final String COLUMN_KNOWLEDGE_CENTER_ID = "KNOWLEDGE_CENTER_ID";
	private static final String COLUMN_FILE_UPLOADMASTER_ID_KC = "FILE_UPLOADMASTER_ID_KC";
	private static final String COLUMN_FILE_TITLE_KC = "FILE_TITLE_KC";
	private static final String COLUMN_FILE_TYPE_ID_KC = "FILE_TYPE_ID_KC";
	private static final String COLUMN_KEYWORDS_KC = "KEYWORDS_KC";
	private static final String COLUMN_PURPOSE_ID_KC = "PURPOSE_ID_KC";
	private static final String COLUMN_MOBILE_PATH_KC = "PATH_KC";
	private static final String COLUMN_SITE_ID_KC = "SITE_ID_KC";
	private static final String COLUMN_DESCRIPTION_KC = "DESCRIPTION_KC";
	private static final String COLUMN_PORTAL_PATH_KC = "PORTAL_PATH_KC";
	private static final String COLUMN_CREATED_DATE_KC = "CREATED_DATE_KC";
	private static final String COLUMN_UPDATED_DATE_KC = "UPDATED_DATE_KC";
	private static final String COLUMN_DOWNLOAD_FLAG_KC = "DOWNLOAD_FLAG_KC";

	Context c;
//	public DatabaseHandler(Context context) {
//		super(context, DATABASE_NAME, null, DATABASE_VERSION);
//		c=context;
//	}
public DatabaseHandler(Context context) {
	super(context, context.getExternalFilesDir(null).getAbsolutePath() + "/" + DATABASE_NAME, null, DATABASE_VERSION);
	c = context;
}

	@Override
	public void onCreate(SQLiteDatabase db) {

	    	
//	   	table for setup_myapp
		String CREATE_SETUP_MYAPP = "CREATE TABLE " + TABLE_SETUP_MYAPP + "("
				+COLUMN_SETUP_MYAPP_ID + " INTEGER PRIMARY KEY,"
				+COLUMN_EMAIL_SETUP_MYAPP +" TEXT,"
				+COLUMN_PASSWORD_SETUP_MYAPP +" TEXT,"
				+COLUMN_ORGCODE_SETUP_MYAPP +" TEXT,"
				+COLUMN_DATE_SETUP_MYAPP +" TEXT,"
				+COLUMN_ORG_ID_SETUP_MYAPP +" INTEGER,"
				+COLUMN_ORG_SUBSCRIPTION_STATUS_SETUP_MYAPP +" TEXT,"
				+COLUMN_PARTY_ID_SETUP_MYAPP +" INTEGER" + ")";
		db.execSQL(CREATE_SETUP_MYAPP);
	    	
//	    table for Login
		String CREATE_LOGIN = "CREATE TABLE " + TABLE_LOGIN + "("
				+COLUMN_LOGIN_ID + " INTEGER PRIMARY KEY,"
				+COLUMN_EMAIL_LOGIN +" TEXT,"
				+COLUMN_PASSWORD_LOGIN +" TEXT,"
				+COLUMN_PARTY_ID_LOGIN +" INTEGER,"
				+COLUMN_ORG_ID_LOGIN +" INTEGER,"
				+COLUMN_ORG_NAME_LOGIN +" TEXT,"
				+COLUMN_LOGINSTATUS_LOGIN +" TEXT,"
				+COLUMN_PARTY_NAME_LOGIN +" TEXT,"
				+COLUMN_PARTY_LOGIN_REMEMBER +" TEXT" + ")";
		db.execSQL(CREATE_LOGIN);
	    	 
//	    table for Login_History
		String CREATE_LOGIN_HISTORY = "CREATE TABLE " + TABLE_LOGIN_HISTORY + "("
				+COLUMN_LOGIN_HISTORY_ID + " INTEGER PRIMARY KEY,"
				+COLUMN_LOGINSTATUS_LOG_HISTORY +" TEXT,"
				+COLUMN_FROMDATE_LOG_HISTORY +" TEXT,"
				+COLUMN_TODATE_LOG_HISTORY +" TEXT,"
				+COLUMN_PARTY_ID_LOG_HISTORY +" INTEGER,"
				+COLUMN_ORG_ID_LOG_HISTORY +" INTEGER" + ")";
		db.execSQL(CREATE_LOGIN_HISTORY);
	    	 
//	    table for USER_SITES
		String CREATE_USER_SITES = "CREATE TABLE " + TABLE_USER_SITES + "("
				+COLUMN_USER_SITES_ID + " INTEGER PRIMARY KEY,"
				+COLUMN_USER_SITE_LINK_ID +" INTEGER,"
				+COLUMN_PROJECT_ID_USER_SITES +" INTEGER,"
				+COLUMN_PROJECT_NAME_USER_SITES +" TEXT,"
				+COLUMN_SITE_ID_USER_SITES +" INTEGER,"
				+COLUMN_SITE_NAME_USER_SITES +" TEXT,"
				+COLUMN_SITE_LOCATION_USER_SITES +" TEXT,"
				+COLUMN_ACCESS_STATUS_USER_SITES +" TEXT,"
				+COLUMN_PARTY_ID_USER_SITES +" INTEGER,"
				+COLUMN_ORG_ID_USER_SITES +" INTEGER,"
				+COLUMN_USER_TYPE_USER_SITES +" TEXT" + ")";
		db.execSQL(CREATE_USER_SITES);
	    	
//	    table for Materials
		String CREATE_MATERIAL = "CREATE TABLE " + TABLE_MATERIAL + "("
				+COLUMN_MATERIAL_ID + " INTEGER PRIMARY KEY,"
				+COLUMN_MATERIAL_NAME_MATL +" TEXT,"
				+COLUMN_UNITS_MATL +" TEXT,"
				+ COLUMN_RATE_MATL + " TEXT" + ")";
		db.execSQL(CREATE_MATERIAL);
	    	 
//	    table for MATERIAL_STOCK_TRANSACTIONS
		String CREATE_MATERIAL_STOCK_TRANSACTIONS = "CREATE TABLE " + TABLE_MATERIAL_STOCK_TRANSACTIONS + "("
				+COLUMN_MATERIAL_STOCK_TRANSACTIONS_ID + " INTEGER PRIMARY KEY,"
				+COLUMN_MATERIAL_ID_MATL_STK_TRANS +" INTEGER,"
				+COLUMN_MATERIAL_NAME_MATL_STK_TRANS +" TEXT,"
				+COLUMN_UNITS_MATL_STK_TRANS +" TEXT,"
				+COLUMN_RATE_MATL_STK_TRANS +" TEXT,"
				+COLUMN_RECEIVED_STOCK_MATL_STK_TRANS +" TEXT,"
				+COLUMN_USED_MATL_STK_TRANS +" TEXT,"
				+COLUMN_INDENT_MATL_STK_TRANS +" TEXT,"
				+COLUMN_MATERIAL_REQ_BY_DATE_MATL_STK_TRANS +" TEXT,"
				+COLUMN_CURRENT_STOCK_MATL_STK_TRANS +" TEXT,"
				+COLUMN_PROJECT_ID_MATL_STK_TRANS +" INTEGER,"
				+COLUMN_SITE_ID_MATL_STK_TRANS +" INTEGER,"
				+COLUMN_PARTY_ID_MATL_STK_TRANS +" INTEGER,"
				+COLUMN_ORG_ID_MATL_STK_TRANS +" INTEGER,"
				+COLUMN_SYNC_FLAG_MATL_STK_TRANS +" TEXT,"
				+COLUMN_NEW_OR_OLD_FLAG_MATL_STK_TRANS +" TEXT,"
				+COLUMN_DC_INVOICE_MATL_STK_TRANS +" TEXT,"
				+COLUMN_LOT_NUMBER_MATL_STK_TRANS +" TEXT,"
				+COLUMN_DOC_TYPE_MATL_STK_TRANS +" TEXT,"
				+COLUMN_TRANSACTIONS_DATE_MATL_STK_TRANS +" TEXT,"
				+COLUMN_CREATED_DATE_MATL_STK_TRANS +" TEXT,"
				+COLUMN_REMARKS_MATL_STK_TRANS +" TEXT,"
				+COLUMN_ADJUSTMENTS_MATL_STK_TRANS +" TEXT,"
				+COLUMN_ADJUST_REASON_MATL_STK_TRANS +" TEXT,"
				+COLUMN_DISPLAY_FLAG_MATL_STK_TRANS +" INTEGER,"
				+COLUMN_TASK_ID_MATL_STK_TRANS + " INTEGER" + ")";
		db.execSQL(CREATE_MATERIAL_STOCK_TRANSACTIONS);

//	    table for MANPOWER_SUPPLY_CONTRACT_MASTER
		String CREATE_MANPOWER_SUPPLY_CONTRACT_MASTER = "CREATE TABLE " + TABLE_MANPOWER_SUPPLY_CONTRACT_MASTER + "("
				+COLUMN_MANPOWER_SUPPLY_CONTRACT_MASTER_ID + " INTEGER PRIMARY KEY,"
				+COLUMN_CONTRACT_PROJECT_ID_MP_SUPPLY +" INTEGER,"
				+COLUMN_CONTRACTOR_ID_MP_SUPPLY +" INTEGER,"
				+COLUMN_CONTRACTOR_NAME_MP_SUPPLY +" TEXT,"
				+COLUMN_PRJ_ID_MP_SUPPLY +" INTEGER,"
				+COLUMN_SITE_ID_MP_SUPPLY +" INTEGER,"
				+COLUMN_LABOUR_TYPE_ID_MP_SUPPLY +" INTEGER,"
				+COLUMN_LABOUR_TYPE_NAME_MP_SUPPLY +" TEXT,"
				+COLUMN_ENTERED_QTY_MP_SUPPLY +" TEXT,"
				+COLUMN_TODAY_ENTERED_QTY_SUM_MP_SUPPLY +" TEXT,"
				+COLUMN_TOTAL_TILL_DATE_QTY_MP_SUPPLY +" TEXT,"
				+COLUMN_RATE_MP_SUPPLY +" TEXT,"
				+COLUMN_TOTAL_BILLED_AMT_MP_SUPPLY +" TEXT,"
				+COLUMN_TOTAL_PAID_AMT_MP_SUPPLY +" TEXT,"
				+COLUMN_BALC_AMT_MP_SUPPLY +" TEXT,"
				+COLUMN_SYN_FLAG_MP_SUPPLY +" TEXT,"
				+COLUMN_CREATED_DATE_MP_SUPPLY +" TEXT,"
				+COLUMN_TRANSACTION_DATE_MP_SUPPLY +" TEXT,"
				+COLUMN_DISPLAY_FLAG_MP_SUPPLY + " TEXT" + ")";
		db.execSQL(CREATE_MANPOWER_SUPPLY_CONTRACT_MASTER);

//	    table for MANPOWER_LABOUR_CONTRACT_WORK_MASTER
		String CREATE_MANPOWER_LABOUR_CONTRACT_WORK_MASTER = "CREATE TABLE " + TABLE_MANPOWER_LABOUR_CONTRACT_WORK_MASTER + "("
				+COLUMN_MANPOWER_LABOUR_CONTRACT_WORK_MASTER_ID + " INTEGER PRIMARY KEY,"
				+COLUMN_LAB_CONTRACT_WORK_MASTER_ID_MP_CONTRACT +" INTEGER,"
				+COLUMN_CONTRACT_PROJECT_ID_MP_CONRACT +" INTEGER,"
				+COLUMN_CONTRACTOR_ID_MP_CONTRACT +" INTEGER,"
				+COLUMN_CONTRACTOR_NAME_MP_CONTRACT +" TEXT,"
				+COLUMN_PRJ_ID_MP_CONTRACT +" INTEGER,"
				+COLUMN_SITE_ID_MP_CONTRACT +" INTEGER,"
				+COLUMN_WORK_LOCATION_ID_MP_CONTRACT +" INTEGER,"
				+COLUMN_WORK_LOCATION_NAME_MP_CONTRACT +" TEXT,"
				+COLUMN_TOTAL_QTY_MP_CONTRACT +" TEXT,"
				+COLUMN_QTY_UNITS_MP_CONTRACT +" TEXT,"
				+COLUMN_START_DATE_MP_CONTRACT +" TEXT,"
				+COLUMN_SCOPE_OF_WORK_MP_CONTRACT +" TEXT,"
				+COLUMN_QTY_COMPLETED_MP_CONTRACT +" TEXT,"
				+COLUMN_LAB_CONT_WRK_RATE_MP_CONTRACT +" TEXT,"
				+COLUMN_PAID_AMT_MP_CONTRACT +" TEXT,"
				+COLUMN_BALC_AMT_MP_CONTRACT +" TEXT,"
				+COLUMN_SYN_FLAG_MP_CONTRACT +" TEXT,"
				+COLUMN_CREATED_DATE_MP_CONTRACT +" TEXT,"
				+COLUMN_DISPLAY_FLAG_MP_CONTRACT + " TEXT" + ")";
		db.execSQL(CREATE_MANPOWER_LABOUR_CONTRACT_WORK_MASTER);
	    	 
//	    table for Expense_Income
		String CREATE_EXP_INCOME = "CREATE TABLE " + TABLE_EXP_INCOME + "("
				+COLUMN_EXP_INCOME_ID + " INTEGER PRIMARY KEY,"
				+COLUMN_ACCOUNT_NAME_EXP_INCOME +" TEXT,"
				+COLUMN_CURRENT_BALANCE_INCOME +" TEXT,"
				+COLUMN_AMOUNT_TYPE_EXP_INCOME +" TEXT,"
				+COLUMN_CATEGORY_EXP_INCOME +" TEXT,"
				+COLUMN_SUB_CATEGORY_EXP_INCOME +" TEXT,"
				+COLUMN_DATE_EXP_INCOME +" TEXT,"
				+COLUMN_TIME_EXP_INCOME +" TEXT,"
				+COLUMN_AMOUNT_EXP_INCOME +" TEXT,"
				+COLUMN_PAYER_EXP_INCOME +" TEXT,"
				+COLUMN_PAYMETHOD_EXP_INCOME +" TEXT,"
				+COLUMN_REF_CHEQUE_NO_EXP_INCOME +" TEXT,"
				+COLUMN_CHEQUE_STATUS_EXP_INCOME +" TEXT,"
				+COLUMN_DESCRIPTION_EXP_INCOME +" TEXT,"
				+COLUMN_IMAGES_EXP_INCOME +" TEXT,"
				+COLUMN_TAX_EXP_INCOME + " TEXT" + ")";
		db.execSQL(CREATE_EXP_INCOME);

//	    table for Expense_Expense
		String CREATE_EXP_EXPENSE = "CREATE TABLE " + TABLE_EXP_EXPENSE + "("
				+COLUMN_EXP_EXPENSE_ID + " INTEGER PRIMARY KEY,"
				+COLUMN_CATEGORY_EXP_EXPENSE +" TEXT,"
				+COLUMN_SUB_CATEGORY_EXP_EXPENSE +" TEXT,"
				+COLUMN_DATE_EXP_EXPENSE +" TEXT,"
				+COLUMN_TIME_EXP_EXPENSE +" TEXT,"
				+COLUMN_AMOUNT_EXP_EXPENSE +" TEXT,"
				+COLUMN_PAYEE_EXP_EXPENSE +" TEXT,"
				+COLUMN_PAYMETHOD_EXP_EXPENSE +" TEXT,"
				+COLUMN_REF_CHEQUE_NO_EXP_EXPENSE +" TEXT,"
				+COLUMN_CHEQUE_STATUS_EXP_EXPENSE +" TEXT,"
				+COLUMN_DESCRIPTION_EXP_EXPENSE +" TEXT,"
				+COLUMN_IMAGES_EXP_EXPENSE +" TEXT,"
				+COLUMN_TAX_EXP_EXPENSE + " TEXT" + ")";
		db.execSQL(CREATE_EXP_EXPENSE);
//	    table for Expense_Indent
		String CREATE_EXP_INDENT = "CREATE TABLE " + TABLE_EXP_INDENT + "("
				+COLUMN_EXP_INDENT_ID + " INTEGER PRIMARY KEY,"
				+COLUMN_CATEGORY_EXP_INDENT +" TEXT,"
				+COLUMN_SUB_CATEGORY_EXP_INDENT +" TEXT,"
				+COLUMN_DATE_EXP_INDENT +" TEXT,"
				+COLUMN_TIME_EXP_INDENT +" TEXT,"
				+COLUMN_AMOUNT_EXP_INDENT +" TEXT,"
				+COLUMN_PAYER_EXP_INDENT +" TEXT,"
				+COLUMN_PAYMETHOD_EXP_INDENT +" TEXT,"
				+COLUMN_REF_CHEQUE_NO_EXP_INDENT +" TEXT,"
				+COLUMN_CHEQUE_STATUS_EXP_INDENT +" TEXT,"
				+COLUMN_DESCRIPTION_EXP_INDENT +" TEXT,"
				+COLUMN_IMAGES_EXP_INDENT +" TEXT,"
				+COLUMN_TAX_EXP_INDENT + " TEXT" + ")";
		db.execSQL(CREATE_EXP_INDENT);
	    	 
//	    table for Dashboard
		String CREATE_DASHBOARD = "CREATE TABLE " + TABLE_DASHBOARD + "("
				+COLUMN_DASHBOARD_ID + " INTEGER PRIMARY KEY,"
				+COLUMN_SITE_ID_DASHBOARD +" INTEGER,"
				+COLUMN_SITENAME_DASHBOARD +" TEXT,"
				+COLUMN_SITE_STOCKVALUE_DASHBOARD +" TEXT,"
				+COLUMN_DATE_DASHBOARD + " TEXT" + ")";
		db.execSQL(CREATE_DASHBOARD);
	    	 
//	    table for MaterialDashboard
		String CREATE_MATERIAL_DASHBOARD = "CREATE TABLE " + TABLE_MATERIAL_DASHBOARD + "("
				+COLUMN_MATERIAL_DASHBOARD_ID + " INTEGER PRIMARY KEY,"
				+COLUMN_MATERIAL_ID_MATL_DASHBOARD +" INTEGER,"
				+COLUMN_MATERIAL_NAME_MATL_DASHBOARD +" TEXT,"
				+COLUMN_MATERIAL_UNITS_MATL_DASHBOARD +" TEXT,"
				+COLUMN_MATERIAL_QUANTITY_MATL_DASHBOARD +" TEXT,"
				+COLUMN_MATERIAL_VALUE_MATL_DASHBOARD +" TEXT,"
				+COLUMN_SITE_ID_MATL_DASHBOARD +" INTEGER,"
				+COLUMN_SITE_NAME_MATL_DASHBOARD +" TEXT,"
				+COLUMN_DATE_MATL_DASHBOARD + " TEXT" + ")";
		db.execSQL(CREATE_MATERIAL_DASHBOARD);
	    	 
//	    table for Project_status
		String CREATE_PROJECT_STATUS = "CREATE TABLE " + TABLE_PROJECT_STATUS + "("
				+COLUMN_PROJECT_STATUS_ID + " INTEGER PRIMARY KEY,"
				+COLUMN_PROJECT_ID_PRJ_STATUS +" INTEGER,"
				+COLUMN_SITE_ID_PRJ_STATUS +" INTEGER,"
				+COLUMN_PRJ_EST_WORKMASTER_ID_PRJ_STATUS +" INTEGER,"
				+COLUMN_PRJ_EST_WORK_LOCATION_NAME_PRJ_STATUS +" TEXT,"
				+COLUMN_PERCENTAGE_COMPLETION_PRJ_STATUS +" TEXT,"
				+COLUMN_PRJ_EST_WORK_TOT_QTY_PRJ_STATUS +" TEXT,"
				+COLUMN_PRJ_EST_WORK_TOT_QTY_UNITS_PRJ_STATUS +" TEXT,"
				+COLUMN_PRJ_EST_WORK_COMP_QTY_PRJ_STATUS +" TEXT,"
				+COLUMN_PRJ_WORK_EST_START_DATE_PRJ_STATUS +" TEXT,"
				+COLUMN_PRJ_WORK_EST_END_DATE_PRJ_STATUS +" TEXT,"
				+COLUMN_START_DATE_PRJ_STATUS +" TEXT,"
				+COLUMN_END_DATE_PRJ_STATUS +" TEXT,"
				+COLUMN_SYN_STATUS_PRJ_STATUS +" TEXT,"
				+COLUMN_CREATED_DATE_PRJ_STATUS +" TEXT,"
				+COLUMN_TRANSACTION_DATE_PRJ_STATUS +" TEXT,"
				+COLUMN_DISPLAY_FLAG_PRJ_STATUS +" TEXT,"
				+COLUMN_REMARKS_PRJ_STATUS +" TEXT,"
				+COLUMN_WORK_TASK_TYPE_ID_PRJ_STATUS +" TEXT,"
				+COLUMN_MAIN_TASK_ID_PRJ_STATUS +" TEXT,"
				+COLUMN_MAIN_TASK_NAME_PRJ_STATUS +" TEXT,"
				+COLUMN_LINK_TO_BILL_PRJ_STATUS +" TEXT,"
				+COLUMN_SUM_ENTERED_QTY_PRJ_STATUS + " TEXT" + ")";
		db.execSQL(CREATE_PROJECT_STATUS);
	    	 
//	    table for Project_Issues
		String CREATE_PROJECT_ISSUES = "CREATE TABLE " + TABLE_PROJECT_ISSUES + "("
				+COLUMN_PROJECT_ISSUES_ID + " INTEGER PRIMARY KEY,"
				+COLUMN_PROJECT_ID_PRJ_ISSUES +" INTEGER,"
				+COLUMN_SITE_ID_PRJ_ISSUES +" INTEGER,"
				+COLUMN_PRJ_EST_WORKMASTER_ID_PRJ_ISSUES +" INTEGER,"
				+COLUMN_PRJ_EST_WORK_LOCATION_NAME_PRJ_ISSUES +" TEXT,"
				+COLUMN_ISSUES_TITLE_PRJ_ISSUES +" TEXT,"
				+COLUMN_ISSUES_DETAILS_PRJ_ISSUES +" TEXT,"
				+COLUMN_SYN_FLAG_PRJ_ISSUES +" TEXT,"
				+COLUMN_DISPLAY_FLAG_PRJ_ISSUES +" TEXT,"
				+COLUMN_ISSUES_CRAETION_DATE_PRJ_ISSUES + " TEXT ,"
				+COLUMN_ISSUES_PORTAL_ISSUES_ID + " INTEGER " + ")";
		db.execSQL(CREATE_PROJECT_ISSUES);
	    	 
//	    table for Project_I
		String CREATE_PROJECT_IMAGES = "CREATE TABLE " + TABLE_PROJECT_IMAGES + "("
				+COLUMN_PROJECT_IMAGES_ID + " INTEGER PRIMARY KEY,"
				+COLUMN_PROJECT_ID_PRJ_IMAGES +" INTEGER,"
				+COLUMN_SITE_ID_PRJ_IMAGES +" INTEGER,"
				+COLUMN_PRJ_EST_WORKMASTER_ID_PRJ_IMAGES +" INTEGER,"
				+COLUMN_PRJ_EST_WORK_LOCATION_NAME_PRJ_IMAGES +" TEXT,"
				+COLUMN_PATH_PRJ_IMAGES +" TEXT,"
				+COLUMN_SYN_FLAG_PRJ_IMAGES +" TEXT,"
				+COLUMN_IMAGES_CRAETION_DATE_PRJ_IMAGES + " TEXT" + ")";
		db.execSQL(CREATE_PROJECT_IMAGES);

		String CREATE_PROJECT_ISSUES_IMAGES = "CREATE TABLE " + TABLE_PROJECT_ISSUES_IMAGES + "("
				+COLUMN_PROJECT_ISSUES_IMAGES_ID + " INTEGER PRIMARY KEY,"
				+COLUMN_PROJECT_ISSUESS_ID + " INTEGER ,"
				+COLUMN_PROJECT_ID_PRJ_ISSUES_IMAGES + " INTEGER ,"
				+COLUMN_SITE_ID_PRJ_ISSUES_IMAGES + " INTEGER ,"
				+COLUMN_PRJ_EST_WORKMASTER_ID_PRJ_ISSUES_IMAGES + " INTEGER ,"
				+COLUMN_PATH_PRJ_ISSUES_IMAGES +" TEXT,"
				+COLUMN_SYN_FLAG_PRJ_ISSUES_IMAGES +" TEXT,"
				+COLUMN_DISPLAY_FLAG_PRJ_ISSUES_IMAGES +" TEXT,"
				+COLUMN_IMAGES_CRAETION_DATE_PRJ_ISSUES_IMAGES + " TEXT" + ")";
		db.execSQL(CREATE_PROJECT_ISSUES_IMAGES);
	    	 
//	    table for Status_report
		String CREATE_STATUS_REPORT = "CREATE TABLE " + TABLE_STATUS_REPORT + "("
				+COLUMN_STATUS_REPORT_ID + " INTEGER PRIMARY KEY,"
				+COLUMN_SITE_ID_STATUS_REPORT +" INTEGER,"
				+COLUMN_SITE_NAME_STATUS_REPORT +" TEXT,"
				+COLUMN_TASK_ID_STATUS_REPORT +" INTEGER,"
				+COLUMN_TASK_NAME_STATUS_REPORT +" TEXT,"
				+COLUMN_TOTAL_QTY_STATUS_REPORT +" TEXT,"
				+COLUMN_COMPLETED_QTY_STATUS_REPORT +" TEXT,"
				+COLUMN_PERCENTAGE_WORK_COMP_STATUS_REPORT +" TEXT,"
				+COLUMN_BALANCE_QTY_STATUS_REPORT +" TEXT,"
				+COLUMN_BILLABLE_AMT_STATUS_REPORT +" TEXT,"
				+COLUMN_UNITS_STATUS_REPORT + " TEXT" + ")";
		db.execSQL(CREATE_STATUS_REPORT);
	    	 
//	    table for LAST_SYN_REPORT
		String CREATE_LAST_SYN_REPORT = "CREATE TABLE " + TABLE_LAST_SYN_REPORT + "("
				+COLUMN_LAST_SYN_REPORT_ID + " INTEGER PRIMARY KEY,"
				+COLUMN_MODULE_ID_LAST_SYN_REPORT +" INTEGER,"
				+COLUMN_NUMBER_OFDAYS_LAST_SYN_REPORT + " INTEGER" + ")";
		db.execSQL(CREATE_LAST_SYN_REPORT);
	    	 
//	    table for Knowledge_Center
		String CREATE_KNOWLEDGE_CENTER = "CREATE TABLE " + TABLE_KNOWLEDGE_CENTER + "("
				+COLUMN_KNOWLEDGE_CENTER_ID + " INTEGER PRIMARY KEY,"
				+COLUMN_FILE_UPLOADMASTER_ID_KC +" INTEGER,"
				+COLUMN_FILE_TITLE_KC +" TEXT,"
				+COLUMN_FILE_TYPE_ID_KC +" INTEGER,"
				+COLUMN_KEYWORDS_KC +" TEXT,"
				+COLUMN_PURPOSE_ID_KC +" INTEGER,"
				+COLUMN_MOBILE_PATH_KC +" TEXT,"
				+COLUMN_SITE_ID_KC +" INTEGER,"
				+COLUMN_DESCRIPTION_KC +" TEXT,"
				+COLUMN_PORTAL_PATH_KC +" TEXT,"
				+COLUMN_CREATED_DATE_KC +" TEXT,"
				+COLUMN_UPDATED_DATE_KC +" TEXT,"
				+COLUMN_DOWNLOAD_FLAG_KC + " TEXT" + ")";
		db.execSQL(CREATE_KNOWLEDGE_CENTER);
	}
	@Override
	public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
		 db.execSQL("DROP TABLE IF EXISTS " + TABLE_SETUP_MYAPP);
		 db.execSQL("DROP TABLE IF EXISTS " + TABLE_LOGIN);
		 db.execSQL("DROP TABLE IF EXISTS " + TABLE_LOGIN_HISTORY);
		 db.execSQL("DROP TABLE IF EXISTS " + TABLE_USER_SITES);
		 db.execSQL("DROP TABLE IF EXISTS " + TABLE_MATERIAL);
		 db.execSQL("DROP TABLE IF EXISTS " + TABLE_MATERIAL_STOCK_TRANSACTIONS);
		 db.execSQL("DROP TABLE IF EXISTS " + TABLE_MANPOWER_SUPPLY_CONTRACT_MASTER);
		 db.execSQL("DROP TABLE IF EXISTS " + TABLE_MANPOWER_LABOUR_CONTRACT_WORK_MASTER);
		 db.execSQL("DROP TABLE IF EXISTS " + TABLE_EXP_INCOME);
		 db.execSQL("DROP TABLE IF EXISTS " + TABLE_EXP_EXPENSE);
		 db.execSQL("DROP TABLE IF EXISTS " + TABLE_EXP_INDENT);
		 db.execSQL("DROP TABLE IF EXISTS " + TABLE_DASHBOARD);
		 db.execSQL("DROP TABLE IF EXISTS " + TABLE_MATERIAL_DASHBOARD);
		 db.execSQL("DROP TABLE IF EXISTS " + TABLE_PROJECT_STATUS);
		 db.execSQL("DROP TABLE IF EXISTS " + TABLE_PROJECT_ISSUES);
		 db.execSQL("DROP TABLE IF EXISTS " + TABLE_PROJECT_IMAGES);
		 db.execSQL("DROP TABLE IF EXISTS " + TABLE_PROJECT_ISSUES_IMAGES);
		 db.execSQL("DROP TABLE IF EXISTS " + TABLE_STATUS_REPORT);
		 db.execSQL("DROP TABLE IF EXISTS " + TABLE_LAST_SYN_REPORT);
		 db.execSQL("DROP TABLE IF EXISTS " + TABLE_KNOWLEDGE_CENTER);
		 onCreate(db);
	}
	public void getUserSitesDelete(int site_id ) {
		String QueryDELETE = "DELETE FROM " + TABLE_USER_SITES + " where " + COLUMN_SITE_ID_USER_SITES +   " = " + site_id +  ";";
		SQLiteDatabase db = this.getWritableDatabase();
	    db.execSQL(QueryDELETE);
	}
//	    CRUD METHODS FOR Setup_MyApp
//	    inserting records in Setup_MyApp table
 	public void add_SetUp_MyApp_Record(	SetUp_MyApp_Model setup_myapp_model) {
		// TODO Auto-generated method stub
		ContentValues values = new ContentValues();
		values.put(COLUMN_EMAIL_SETUP_MYAPP, setup_myapp_model.getEmail());
		values.put(COLUMN_PASSWORD_SETUP_MYAPP, setup_myapp_model.getPassword());
		values.put(COLUMN_ORGCODE_SETUP_MYAPP, setup_myapp_model.getOrg_Code());
		values.put(COLUMN_DATE_SETUP_MYAPP, setup_myapp_model.getDate());
		values.put(COLUMN_ORG_ID_SETUP_MYAPP, setup_myapp_model.getOrg_ID());
		values.put(COLUMN_ORG_SUBSCRIPTION_STATUS_SETUP_MYAPP, setup_myapp_model.getOrg_Subscription_Status());
		values.put(COLUMN_PARTY_ID_SETUP_MYAPP, setup_myapp_model.getParty_ID());
		SQLiteDatabase db = this.getWritableDatabase();
		db.insert(TABLE_SETUP_MYAPP, null, values);
		db.close();
	}
// counting no of rows in LOGIN table
	 public int getSetUp_MyAppTable_Row_Count() {  
		 String countQuery = "SELECT  * FROM " + TABLE_SETUP_MYAPP;
		 SQLiteDatabase db = this.getReadableDatabase();
		 Cursor cursor = db.rawQuery(countQuery, null);
		 System.out.println("check count"+cursor.getCount());
		 cursor.close();
		 // return count
		 return cursor.getCount();
	 }
// Getting All login_list and adding to arrylist
 	 public List<SetUp_MyApp_Model> getAll_SetUp_MyAppList() {
		 List<SetUp_MyApp_Model> setUp_MyApp_list = new ArrayList<SetUp_MyApp_Model>();
 		// Select All Query
     	String selectQuery = "SELECT  * FROM " + TABLE_SETUP_MYAPP;
     	SQLiteDatabase db = this.getWritableDatabase();
     	Cursor cursor = db.rawQuery(selectQuery, null);
     	// looping through all rows and adding to list
     	if (cursor.moveToFirst())
     	{
         	do
		 	{
        	 	SetUp_MyApp_Model setup_myapp_model = new SetUp_MyApp_Model();
			 	setup_myapp_model.setSetUp_MyApp_ID(Integer.parseInt(cursor.getString(0)));
			 	setup_myapp_model.setEmail(cursor.getString(1));
         	 	setup_myapp_model.setPassword(cursor.getString(2));
         	 	setup_myapp_model.setOrg_Code(cursor.getString(3));
         	 	setup_myapp_model.setDate(cursor.getString(4));
         	 	setup_myapp_model.setOrg_ID(Integer.parseInt(cursor.getString(5)));
         	 	setup_myapp_model.setOrg_Subscription_Status(cursor.getString(6));
         	 	setup_myapp_model.setParty_ID(Integer.parseInt(cursor.getString(7)));
             	// Adding login to list
			 	setUp_MyApp_list.add(setup_myapp_model);
         	} while (cursor.moveToNext());
     	}
     	// close inserting data from database
	  	db.close();
     	// return login list
     	return setUp_MyApp_list;
	 }
 
	//	find records which r matched with  email, password in SetUp_MyApp
	public SetUp_MyApp_Model find_Email_Password_SetUp_MyApp(String email, String password) throws SQLException {
		SQLiteDatabase db = this.getWritableDatabase();
		SetUp_MyApp_Model setUp_MyApp_model = new SetUp_MyApp_Model();
		Cursor cursor = db.query(true, TABLE_SETUP_MYAPP, new String[] {
				COLUMN_SETUP_MYAPP_ID,
				COLUMN_EMAIL_SETUP_MYAPP,
		        COLUMN_PASSWORD_SETUP_MYAPP,
		        COLUMN_ORGCODE_SETUP_MYAPP,
		        COLUMN_DATE_SETUP_MYAPP,
		        COLUMN_ORG_ID_SETUP_MYAPP,
		        COLUMN_ORG_SUBSCRIPTION_STATUS_SETUP_MYAPP,
		        COLUMN_PARTY_ID_SETUP_MYAPP,},
		        COLUMN_EMAIL_SETUP_MYAPP + "=?" + " and "  + COLUMN_PASSWORD_SETUP_MYAPP + "=?", new String[] {email, password}, null, null, null , null);
		if (cursor.moveToFirst())
		{
			do
			{
				setUp_MyApp_model.setSetUp_MyApp_ID(Integer.parseInt(cursor.getString(0)));
				setUp_MyApp_model.setEmail(cursor.getString(1));
				setUp_MyApp_model.setPassword(cursor.getString(2));
				setUp_MyApp_model.setOrg_Code(cursor.getString(3));
				setUp_MyApp_model.setDate(cursor.getString(4));
				setUp_MyApp_model.setOrg_ID(Integer.parseInt(cursor.getString(5)));
				setUp_MyApp_model.setOrg_Subscription_Status(cursor.getString(6));
				setUp_MyApp_model.setParty_ID(Integer.parseInt(cursor.getString(7)));
			} while (cursor.moveToNext());
		}
		if (cursor != null && !cursor.isClosed())
			cursor.close();
		System.out.println("counting records"+cursor.getCount());
		return setUp_MyApp_model;
		 
	}

//	find records which r matched with  setUp_MyApp_id
	public SetUp_MyApp_Model get_FirstRow_SetUp_MyApp(int setUp_MyApp_id) throws SQLException {
		SQLiteDatabase db = this.getWritableDatabase();
		SetUp_MyApp_Model setUp_MyApp_model = new SetUp_MyApp_Model();
	    Cursor cursor = db.query(true, TABLE_SETUP_MYAPP, new String[] {
	                    COLUMN_SETUP_MYAPP_ID,
	                    COLUMN_EMAIL_SETUP_MYAPP,
	                    COLUMN_PASSWORD_SETUP_MYAPP,
	                    COLUMN_ORGCODE_SETUP_MYAPP,
	                    COLUMN_DATE_SETUP_MYAPP,
	                    COLUMN_ORG_ID_SETUP_MYAPP,	                  
	                    COLUMN_ORG_SUBSCRIPTION_STATUS_SETUP_MYAPP, }, 		                                     		
	                    COLUMN_SETUP_MYAPP_ID + "=?", 
	                    new String[] {String.valueOf(setUp_MyApp_id)},
	                    null, null, null , null);
		if (cursor.moveToFirst())
		{
			do
			{
				setUp_MyApp_model.setSetUp_MyApp_ID(Integer.parseInt(cursor.getString(0)));
				setUp_MyApp_model.setEmail(cursor.getString(1));
				setUp_MyApp_model.setPassword(cursor.getString(2));
				setUp_MyApp_model.setOrg_Code(cursor.getString(3));
				setUp_MyApp_model.setDate(cursor.getString(4));
				setUp_MyApp_model.setOrg_ID(Integer.parseInt(cursor.getString(5)));
				setUp_MyApp_model.setOrg_Subscription_Status(cursor.getString(6));
			} while (cursor.moveToNext());
		}
		if (cursor != null && !cursor.isClosed())
			cursor.close();
		System.out.println("counting records"+cursor.getCount());
		return setUp_MyApp_model;
	 
	}
//	 	    CRUD METHODS FOR Login
//	 	    inserting records in Login table
   	 public void add_Login_Record(Login_Model login_model) {
			// TODO Auto-generated method stub
		 ContentValues values = new ContentValues();
		 values.put(COLUMN_EMAIL_LOGIN, login_model.getEmail());
		 values.put(COLUMN_PASSWORD_LOGIN, login_model.getPassword());
		 values.put(COLUMN_PARTY_ID_LOGIN, login_model.getParty_ID());
		 values.put(COLUMN_ORG_ID_LOGIN, login_model.getOrg_ID());
		 values.put(COLUMN_ORG_NAME_LOGIN, login_model.getOrg_Name());
		 values.put(COLUMN_LOGINSTATUS_LOGIN, login_model.getLoginStatus());
		 values.put(COLUMN_PARTY_NAME_LOGIN, login_model.getParty_Name());
		 values.put(COLUMN_PARTY_LOGIN_REMEMBER, login_model.getRemember());
		 SQLiteDatabase db = this.getWritableDatabase();
		 db.insert(TABLE_LOGIN, null, values);
		 db.close();
	 }
//	 counting no of rows in LOGIN table
	 public int getLoginTable_Row_Count() {
		 String countQuery = "SELECT  * FROM " + TABLE_LOGIN;
		 SQLiteDatabase db = this.getReadableDatabase();
		 Cursor cursor = db.rawQuery(countQuery, null);
		 System.out.println("check count"+cursor.getCount());
		 cursor.close();
		 // return count
		 return cursor.getCount();
	 }
	 // Getting All login_list and adding to arrylist
	 public List<Login_Model> getAll_LoginList() {
		 List<Login_Model> login_list = new ArrayList<Login_Model>();
	    	// Select All Query
		 String selectQuery = "SELECT  * FROM " + TABLE_LOGIN;
		 SQLiteDatabase db = this.getWritableDatabase();
		 Cursor cursor = db.rawQuery(selectQuery, null);
	        // looping through all rows and adding to list
		 if (cursor.moveToFirst())
		 {
			 do
			 {
				 Login_Model login_model = new Login_Model();
				 login_model.setLogin_Id(Integer.parseInt(cursor.getString(0)));
				 login_model.setEmail(cursor.getString(1));
				 login_model.setPassword(cursor.getString(2));
				 login_model.setParty_ID(Integer.parseInt(cursor.getString(3)));
				 login_model.setOrg_ID(Integer.parseInt(cursor.getString(4)));
				 login_model.setOrg_Name(cursor.getString(5));
				 login_model.setLoginStatus(cursor.getString(6));
				 login_model.setParty_Name(cursor.getString(7));
				 login_model.setRemember(cursor.getString(8));
	                // Adding login to list
				 login_list.add(login_model);
			 }
			 while (cursor.moveToNext());
		 }
	        // close inserting data from database
		 db.close();
	        // return login list
		 return login_list;
	 }
//			find records which r matched with  email, password
	 public Login_Model find_Email_Password_Login(String email, String password) throws SQLException {
		 SQLiteDatabase db = this.getWritableDatabase();
		 Login_Model login_model = new Login_Model();
		 Cursor cursor = db.query(true, TABLE_LOGIN, new String[] {
						 COLUMN_LOGIN_ID,
						 COLUMN_EMAIL_LOGIN,
						 COLUMN_PASSWORD_LOGIN,
						 COLUMN_PARTY_ID_LOGIN,
						 COLUMN_ORG_ID_LOGIN,
						 COLUMN_ORG_NAME_LOGIN,
						 COLUMN_LOGINSTATUS_LOGIN,
						 COLUMN_PARTY_NAME_LOGIN,
						 COLUMN_PARTY_LOGIN_REMEMBER,},
				 COLUMN_EMAIL_LOGIN + "=?" + " and "  + COLUMN_PASSWORD_LOGIN + "=?", new String[] {email, password},null, null, null , null);
		 if (cursor.moveToFirst())
		 {
			 do
			 {
				 login_model.setLogin_Id(Integer.parseInt(cursor.getString(0)));
				 login_model.setEmail(cursor.getString(1));
				 login_model.setPassword(cursor.getString(2));
				 login_model.setParty_ID(Integer.parseInt(cursor.getString(3)));
				 login_model.setOrg_ID(Integer.parseInt(cursor.getString(4)));
				 login_model.setOrg_Name(cursor.getString(5));
				 login_model.setLoginStatus(cursor.getString(6));
				 login_model.setParty_Name(cursor.getString(7));
				 login_model.setRemember(cursor.getString(8));
			 } while (cursor.moveToNext());
		 }
		 if (cursor != null && !cursor.isClosed())
			 cursor.close();
		 System.out.println("counting records"+cursor.getCount());
		 return login_model;
			 
	 }
//		count records which r matched with  email, password
	public int countRecordsMatched_Email_Password_Login(String email, String password) throws SQLException {
		SQLiteDatabase db = this.getWritableDatabase();
		Login_Model login_model = new Login_Model();
		Cursor cursor = db.query(true, TABLE_LOGIN, new String[] {
						COLUMN_LOGIN_ID,
						COLUMN_EMAIL_LOGIN,
						COLUMN_PASSWORD_LOGIN,
						COLUMN_PARTY_ID_LOGIN,
						COLUMN_ORG_ID_LOGIN,
						COLUMN_ORG_NAME_LOGIN,
						COLUMN_LOGINSTATUS_LOGIN,
						COLUMN_PARTY_NAME_LOGIN,
						COLUMN_PARTY_LOGIN_REMEMBER,},
				COLUMN_EMAIL_LOGIN + "=?" + " and "  + COLUMN_PASSWORD_LOGIN + "=?",  new String[] {email, password},null, null, null , null);
		if (cursor.moveToFirst())
		{
			do
			{
				login_model.setLogin_Id(Integer.parseInt(cursor.getString(0)));
				login_model.setEmail(cursor.getString(1));
				login_model.setPassword(cursor.getString(2));
				login_model.setParty_ID(Integer.parseInt(cursor.getString(3)));
				login_model.setOrg_ID(Integer.parseInt(cursor.getString(4)));
				login_model.setOrg_Name(cursor.getString(5));
				login_model.setLoginStatus(cursor.getString(6));
				login_model.setParty_Name(cursor.getString(7));
				login_model.setRemember(cursor.getString(8));
			}
			while (cursor.moveToNext());
		}
		if (cursor != null && !cursor.isClosed())
			cursor.close();
		System.out.println("counting records"+cursor.getCount());
		return cursor.getCount();
	}
	 
//		find records which r matched with  party_id, org_id
	public Login_Model find_PartyId_OrgId_Login(int party_id, int org_id) throws SQLException {
		SQLiteDatabase db = this.getWritableDatabase();
		Login_Model login_model = new Login_Model();
		Cursor cursor = db.query(true, TABLE_LOGIN, new String[] {
						COLUMN_LOGIN_ID,
						COLUMN_EMAIL_LOGIN,
						COLUMN_PASSWORD_LOGIN,
						COLUMN_PARTY_ID_LOGIN,
						COLUMN_ORG_ID_LOGIN,
						COLUMN_ORG_NAME_LOGIN,
						COLUMN_LOGINSTATUS_LOGIN,
						COLUMN_PARTY_NAME_LOGIN,
						COLUMN_PARTY_LOGIN_REMEMBER,},
				COLUMN_PARTY_ID_LOGIN + "=?" + " and "  + COLUMN_ORG_ID_LOGIN + "=?", new String[] {String.valueOf(party_id), String.valueOf(org_id)},null, null, null , null);
		if (cursor.moveToFirst())
		{
			do
			{
		            	
				login_model.setLogin_Id(Integer.parseInt(cursor.getString(0)));
				login_model.setEmail(cursor.getString(1));
				login_model.setPassword(cursor.getString(2));
				login_model.setParty_ID(Integer.parseInt(cursor.getString(3)));
				login_model.setOrg_ID(Integer.parseInt(cursor.getString(4)));
				login_model.setOrg_Name(cursor.getString(5));
				login_model.setLoginStatus(cursor.getString(6));
				login_model.setParty_Name(cursor.getString(7));
				login_model.setRemember(cursor.getString(8));
			}
			while (cursor.moveToNext());
		}
		if (cursor != null && !cursor.isClosed())
			cursor.close();
		System.out.println("counting records"+cursor.getCount());
		return login_model;
	}
//		find records which r matched with  login_id
	public Login_Model get_FirstRow_Login(int login_id) throws SQLException {
		SQLiteDatabase db = this.getWritableDatabase();
		Login_Model login_model = new Login_Model();
		Cursor cursor = db.query(true, TABLE_LOGIN, new String[] {
				COLUMN_LOGIN_ID,
				COLUMN_EMAIL_LOGIN,
				COLUMN_PASSWORD_LOGIN,
				COLUMN_PARTY_ID_LOGIN,
				COLUMN_ORG_ID_LOGIN,
				COLUMN_ORG_NAME_LOGIN,
				COLUMN_LOGINSTATUS_LOGIN,
				COLUMN_PARTY_NAME_LOGIN,
				COLUMN_PARTY_LOGIN_REMEMBER,},
				COLUMN_LOGIN_ID + "=?", new String[] {String.valueOf(login_id)}, null, null, null , null);
		 
		if (cursor.moveToFirst())
		{
			do
			{
				login_model.setLogin_Id(Integer.parseInt(cursor.getString(0)));
				login_model.setEmail(cursor.getString(1));
				login_model.setPassword(cursor.getString(2));
				login_model.setParty_ID(Integer.parseInt(cursor.getString(3)));
				login_model.setOrg_ID(Integer.parseInt(cursor.getString(4)));
				login_model.setOrg_Name(cursor.getString(5));
				login_model.setLoginStatus(cursor.getString(6));
				login_model.setParty_Name(cursor.getString(7));
				login_model.setRemember(cursor.getString(8));
			}
			while (cursor.moveToNext());
		}
		if (cursor != null && !cursor.isClosed())
			cursor.close();
		System.out.println("counting records"+cursor.getCount());
		return login_model;
	}
// Updating single Update_Login_Row
	public int Update_Login_Row(Login_Model login_model) {
		SQLiteDatabase db = this.getWritableDatabase();
		ContentValues values = new ContentValues();
		values.put(COLUMN_LOGIN_ID, login_model.getLogin_ID());
		values.put(COLUMN_EMAIL_LOGIN, login_model.getEmail());
		values.put(COLUMN_PASSWORD_LOGIN, login_model.getPassword());
		values.put(COLUMN_PARTY_ID_LOGIN, login_model.getParty_ID());
		values.put(COLUMN_ORG_ID_LOGIN, login_model.getOrg_ID());
		values.put(COLUMN_ORG_NAME_LOGIN, login_model.getOrg_Name());
		values.put(COLUMN_LOGINSTATUS_LOGIN, login_model.getLoginStatus());
		values.put(COLUMN_PARTY_NAME_LOGIN, login_model.getParty_Name());
		// 		updating row
		return db.update(TABLE_LOGIN, values, COLUMN_LOGIN_ID + " = ?",new String[] { String.valueOf(login_model.getLogin_ID()) });
	}
// CRUD METHODS FOR Login_History Table
// inserting records in Login_History table
	public void add_LoginHistory_Record(LoginHistory_Model loghistory) {
		// TODO Auto-generated method stub
 		ContentValues values = new ContentValues();
    	values.put(COLUMN_LOGINSTATUS_LOG_HISTORY, loghistory.getLoginStatus());
    	values.put(COLUMN_FROMDATE_LOG_HISTORY, loghistory.getFromDate());
    	values.put(COLUMN_TODATE_LOG_HISTORY, loghistory.getToDate());
    	values.put(COLUMN_PARTY_ID_LOG_HISTORY, loghistory.getParty_ID());
    	values.put(COLUMN_ORG_ID_LOG_HISTORY, loghistory.getOrg_ID());
    	SQLiteDatabase db = this.getWritableDatabase();
    	db.insert(TABLE_LOGIN_HISTORY, null, values);
    	db.close();
	}
//counting no of rows in LOGINHistory table
	public int getLoginHistoryTable_Row_Count() {
    	String countQuery = "SELECT  * FROM " + TABLE_LOGIN_HISTORY;
    	SQLiteDatabase db = this.getReadableDatabase();
    	Cursor cursor = db.rawQuery(countQuery, null);
    	System.out.println("check count"+cursor.getCount());
    	cursor.close();
    	// return count
    	return cursor.getCount();
	}
// Getting All loginHistory_list and adding to arrylist
	public List<LoginHistory_Model> getAll_LoginHistoryList() {
		List<LoginHistory_Model> loginHistory_list = new ArrayList<LoginHistory_Model>();
		// Select All Query
		String selectQuery = "SELECT  * FROM " + TABLE_LOGIN_HISTORY;
		SQLiteDatabase db = this.getWritableDatabase();
		Cursor cursor = db.rawQuery(selectQuery, null);
		// 	looping through all rows and adding to list
		if (cursor.moveToFirst())
		{
    		do
			{
    			LoginHistory_Model loginhistory_model = new LoginHistory_Model();
    			loginhistory_model.setLoginHistory_ID(Integer.parseInt(cursor.getString(0)));
    			loginhistory_model.setLoginStatus(cursor.getString(1));
    			loginhistory_model.setFromDate(cursor.getString(2));
    			loginhistory_model.setToDate(cursor.getString(3));
    			loginhistory_model.setParty_ID(Integer.parseInt(cursor.getString(4)));
    			loginhistory_model.setOrg_ID(Integer.parseInt(cursor.getString(5)));
        		// Adding loginhistory to list
    			loginHistory_list.add(loginhistory_model);
    		} while (cursor.moveToNext());
		}
		db.close();
		return loginHistory_list;
	}

	public void add_UserSites_Record(UserSites_Model usersites_model) {
		//TODO Auto-generated method stub
		ContentValues values = new ContentValues();
 		values.put(COLUMN_USER_SITE_LINK_ID, usersites_model.getUser_Site_Link_ID());
 		values.put(COLUMN_PROJECT_ID_USER_SITES, usersites_model.getProject_ID());
 		values.put(COLUMN_PROJECT_NAME_USER_SITES, usersites_model.getProject_Name());
 		values.put(COLUMN_SITE_ID_USER_SITES, usersites_model.getSite_ID());
 		values.put(COLUMN_SITE_NAME_USER_SITES, usersites_model.getSite_Name());
		values.put(COLUMN_SITE_LOCATION_USER_SITES, usersites_model.getSite_Location());
 		values.put(COLUMN_ACCESS_STATUS_USER_SITES, usersites_model.getAccess_Status());
 		values.put(COLUMN_PARTY_ID_USER_SITES, usersites_model.getParty_ID());
 		values.put(COLUMN_ORG_ID_USER_SITES, usersites_model.getOrg_ID());
		values.put(COLUMN_USER_TYPE_USER_SITES, usersites_model.getUserType());
 		SQLiteDatabase db = this.getWritableDatabase();
 		db.insert(TABLE_USER_SITES, null, values);
 		db.close();
	}
	//counting no of rows in LOGINHistory table
	public int getUserSitesTable_Row_Count( ) {
 		String countQuery = "SELECT  * FROM " + TABLE_USER_SITES;
		SQLiteDatabase db = this.getReadableDatabase();
 		Cursor cursor = db.rawQuery(countQuery, null);
 		System.out.println("check count"+cursor.getCount());
 		cursor.close();
		// return count
 		return cursor.getCount();
	}
	//Getting All UserSites_list and adding to arrylist
	public List<UserSites_Model> getAll_UserSitesList() {
		List<UserSites_Model> userSites_list = new ArrayList<UserSites_Model>();
 		SQLiteDatabase db = this.getWritableDatabase();
// 		Cursor cursor = db.rawQuery(selectQuery, null);
		Cursor cursor = db.query(true, TABLE_USER_SITES, new String[]
					{  COLUMN_USER_SITES_ID,
							COLUMN_USER_SITE_LINK_ID,
        					COLUMN_PROJECT_ID_USER_SITES,
							COLUMN_PROJECT_NAME_USER_SITES,
        					COLUMN_SITE_ID_USER_SITES,
        					COLUMN_SITE_NAME_USER_SITES,
							COLUMN_SITE_LOCATION_USER_SITES,
        					COLUMN_ACCESS_STATUS_USER_SITES,
        					COLUMN_PARTY_ID_USER_SITES,
        					COLUMN_ORG_ID_USER_SITES,
        					COLUMN_USER_TYPE_USER_SITES},
		   					null, null, null, null, COLUMN_SITE_NAME_USER_SITES, null);
 // 	looping through all rows and adding to list
 		if (cursor.moveToFirst())
 		{
     		do
	 		{
    	 		UserSites_Model usersites_model = new UserSites_Model();
		 		usersites_model.setUserSites_ID(Integer.parseInt(cursor.getString(0)));
		 		usersites_model.setUser_Site_Link_ID(Integer.parseInt(cursor.getString(1)));
		 		usersites_model.setProject_ID(Integer.parseInt(cursor.getString(2)));
		 		usersites_model.setProject_Name(cursor.getString(3));
		 		usersites_model.setSite_ID(Integer.parseInt(cursor.getString(4)));
		 		usersites_model.setSite_Name(cursor.getString(5));
		 		usersites_model.setSite_Location(cursor.getString(6));
		 		usersites_model.setAccess_Status(cursor.getString(7));
		 		usersites_model.setParty_ID(Integer.parseInt(cursor.getString(8)));
		 		usersites_model.setOrg_ID(Integer.parseInt(cursor.getString(9)));
		 		usersites_model.setUserType(cursor.getString(10));
		 		userSites_list.add(usersites_model);
     		} while (cursor.moveToNext());
 		}
		cursor.close();
 // 	return status_report list
 		return userSites_list;
	}
//	find records which r matched with  org_id
	public UserSites_Model find_Site_ID_UserSitesTable(int site_id) throws SQLException {
  		SQLiteDatabase db = this.getWritableDatabase();
  		UserSites_Model usersites_model = new UserSites_Model();
  		Cursor cursor = db.query(true, TABLE_USER_SITES, new String[] {
                  COLUMN_USER_SITES_ID,
                  COLUMN_USER_SITE_LINK_ID,
                  COLUMN_PROJECT_ID_USER_SITES,
                  COLUMN_PROJECT_NAME_USER_SITES,
                  COLUMN_SITE_ID_USER_SITES,		                 
                  COLUMN_SITE_NAME_USER_SITES,
                  COLUMN_SITE_LOCATION_USER_SITES,
                  COLUMN_ACCESS_STATUS_USER_SITES,
                  COLUMN_PARTY_ID_USER_SITES,
                  COLUMN_ORG_ID_USER_SITES,
                  COLUMN_USER_TYPE_USER_SITES,}, 		                                     		
                  COLUMN_SITE_ID_USER_SITES + "=?", 
                  new String[] {String.valueOf(site_id)},
                  null, null, null , null);
      	if (cursor.moveToFirst())
      	{
			do
			{
          		usersites_model.setUserSites_ID(Integer.parseInt(cursor.getString(0)));
           		usersites_model.setUser_Site_Link_ID(Integer.parseInt(cursor.getString(1)));
           		usersites_model.setProject_ID(Integer.parseInt(cursor.getString(2)));
           		usersites_model.setProject_Name(cursor.getString(3));
           		usersites_model.setSite_ID(Integer.parseInt(cursor.getString(4)));
           		usersites_model.setSite_Name(cursor.getString(5));
           		usersites_model.setSite_Location(cursor.getString(6));
           		usersites_model.setAccess_Status(cursor.getString(7));
           		usersites_model.setParty_ID(Integer.parseInt(cursor.getString(8)));
           		usersites_model.setOrg_ID(Integer.parseInt(cursor.getString(9)));
           		usersites_model.setUserType(cursor.getString(10));
           	
          	} while (cursor.moveToNext());
      	}
      	if (cursor != null && !cursor.isClosed())
          cursor.close();
      	System.out.println("counting records"+cursor.getCount());
      	return usersites_model;

  	}
		//find records which r matched with  org_id and site_Id to get project_id and party_Id
	public UserSites_Model find_Org_ID_SiteID_UserSitesTable(int org_id, int site_id) throws SQLException {
    	SQLiteDatabase db = this.getWritableDatabase();
    	UserSites_Model usersites_model = new UserSites_Model();
		Cursor cursor = db.query(true, TABLE_USER_SITES, new String[] {
                    COLUMN_USER_SITES_ID,
                    COLUMN_USER_SITE_LINK_ID,
                    COLUMN_PROJECT_ID_USER_SITES,
                    COLUMN_PROJECT_NAME_USER_SITES,
                    COLUMN_SITE_ID_USER_SITES,		                 
                    COLUMN_SITE_NAME_USER_SITES,
                    COLUMN_SITE_LOCATION_USER_SITES,
                    COLUMN_ACCESS_STATUS_USER_SITES,
                    COLUMN_PARTY_ID_USER_SITES,
                    COLUMN_ORG_ID_USER_SITES,
                    COLUMN_USER_TYPE_USER_SITES,}, 		                                     		
                    COLUMN_ORG_ID_USER_SITES + "=?"+ " and "  +	 				                    		
       	        	COLUMN_SITE_ID_USER_SITES + "=?", 
                    new String[] {String.valueOf(org_id),String.valueOf(site_id)},
                    null, null, null , null);
		if (cursor.moveToFirst())
		{
			do
			{
				usersites_model.setUserSites_ID(Integer.parseInt(cursor.getString(0)));
             	usersites_model.setUser_Site_Link_ID(Integer.parseInt(cursor.getString(1)));
             	usersites_model.setProject_ID(Integer.parseInt(cursor.getString(2)));
             	usersites_model.setProject_Name(cursor.getString(3));
             	usersites_model.setSite_ID(Integer.parseInt(cursor.getString(4)));
             	usersites_model.setSite_Name(cursor.getString(5));
             	usersites_model.setSite_Location(cursor.getString(6));
             	usersites_model.setAccess_Status(cursor.getString(7));
             	usersites_model.setParty_ID(Integer.parseInt(cursor.getString(8)));
             	usersites_model.setOrg_ID(Integer.parseInt(cursor.getString(9)));   	
             	usersites_model.setUserType(cursor.getString(10));
            } while (cursor.moveToNext());
        }
        if (cursor != null && !cursor.isClosed())
            cursor.close();
        System.out.println("counting records"+cursor.getCount());
        return usersites_model;
    }

//	find records which r matched with  party_ID and site_Id
	public UserSites_Model find_PartyID_SiteID_UserSitesTable(int party_ID, int site_id) throws SQLException {
  		SQLiteDatabase db = this.getWritableDatabase();
  		UserSites_Model usersites_model = new UserSites_Model();
  		Cursor cursor = db.query(true, TABLE_USER_SITES, new String[] {
                  COLUMN_USER_SITES_ID,
                  COLUMN_USER_SITE_LINK_ID,
                  COLUMN_PROJECT_ID_USER_SITES,
                  COLUMN_PROJECT_NAME_USER_SITES,
                  COLUMN_SITE_ID_USER_SITES,		                 
                  COLUMN_SITE_NAME_USER_SITES,
                  COLUMN_SITE_LOCATION_USER_SITES,
                  COLUMN_ACCESS_STATUS_USER_SITES,
                  COLUMN_PARTY_ID_USER_SITES,
                  COLUMN_ORG_ID_USER_SITES,
                  COLUMN_USER_TYPE_USER_SITES,}, 		                                     		
                  COLUMN_PARTY_ID_USER_SITES + "=?"+ " and "  +	 				                    		
     	        	COLUMN_SITE_ID_USER_SITES + "=?", 
                  new String[] {String.valueOf(party_ID),String.valueOf(site_id)},
                  null, null, null , null);

		if (cursor.moveToFirst())
//			PRJ_EST_WorkMaster_ID_Child
		{
			do
			{
          		usersites_model.setUserSites_ID(Integer.parseInt(cursor.getString(0)));
           		usersites_model.setUser_Site_Link_ID(Integer.parseInt(cursor.getString(1)));
           		usersites_model.setProject_ID(Integer.parseInt(cursor.getString(2)));
           		usersites_model.setProject_Name(cursor.getString(3));
           		usersites_model.setSite_ID(Integer.parseInt(cursor.getString(4)));
           		usersites_model.setSite_Name(cursor.getString(5));
           		usersites_model.setSite_Location(cursor.getString(6));
           		usersites_model.setAccess_Status(cursor.getString(7));
           		usersites_model.setParty_ID(Integer.parseInt(cursor.getString(8)));
           		usersites_model.setOrg_ID(Integer.parseInt(cursor.getString(9)));
           		usersites_model.setUserType(cursor.getString(10));
          	} while (cursor.moveToNext());
		}
      	if (cursor != null && !cursor.isClosed())
          cursor.close();
		System.out.println("counting records"+cursor.getCount());
      	return usersites_model;
  	}
//to get all site_Ids do find rows  with Org Id  and adding to arraylist
	public ArrayList<UserSites_Model> getAll_Site_IDs_List_byOrgID_UserSitesTable(int org_id) throws SQLException {
		SQLiteDatabase db = this.getWritableDatabase();
    	ArrayList<UserSites_Model> getAll_Site_IDs_List = new ArrayList<UserSites_Model>();
		Cursor cursor = db.query(true, TABLE_USER_SITES, new String[] {
		 	COLUMN_USER_SITES_ID,
         	COLUMN_USER_SITE_LINK_ID,
         	COLUMN_PROJECT_ID_USER_SITES,
			COLUMN_PROJECT_NAME_USER_SITES,
         	COLUMN_SITE_ID_USER_SITES,
         	COLUMN_SITE_NAME_USER_SITES,
         	COLUMN_SITE_LOCATION_USER_SITES,
         	COLUMN_ACCESS_STATUS_USER_SITES,
         	COLUMN_PARTY_ID_USER_SITES,
         	COLUMN_ORG_ID_USER_SITES,
         	COLUMN_USER_TYPE_USER_SITES,
		},COLUMN_ORG_ID_USER_SITES + "=?",new String[] {String.valueOf(org_id)},	null, null, null , null);
    	if (cursor.moveToFirst())
		{
			do
			{
				UserSites_Model usersites_model = new UserSites_Model();
				usersites_model.setUserSites_ID(Integer.parseInt(cursor.getString(0)));
				usersites_model.setUser_Site_Link_ID(Integer.parseInt(cursor.getString(1)));
				usersites_model.setProject_ID(Integer.parseInt(cursor.getString(2)));
				usersites_model.setProject_Name(cursor.getString(3));
				usersites_model.setSite_ID(Integer.parseInt(cursor.getString(4)));
				usersites_model.setSite_Name(cursor.getString(5));
				usersites_model.setSite_Location(cursor.getString(6));
				usersites_model.setAccess_Status(cursor.getString(7));
				usersites_model.setParty_ID(Integer.parseInt(cursor.getString(8)));
				usersites_model.setOrg_ID(Integer.parseInt(cursor.getString(9)));
				usersites_model.setUserType(cursor.getString(10));
				getAll_Site_IDs_List.add(usersites_model);
			} while (cursor.moveToNext());
		}
		if (cursor != null && !cursor.isClosed())
			cursor.close();
		System.out.println("db size of site Ids list"+getAll_Site_IDs_List.size());
		return getAll_Site_IDs_List;
	}
//find project_id and site_Id UserSitesTable record in Database
	public int countRows_MatchedOf_ProjectID_SiteID_UserSitesTable(int project_ID,int site_id) throws SQLException {
		SQLiteDatabase db = this.getWritableDatabase();
	 	UserSites_Model usersites_model = new UserSites_Model();
		Cursor cursor = db.query(true, TABLE_USER_SITES, new String[] {
			 COLUMN_USER_SITES_ID,
	         COLUMN_USER_SITE_LINK_ID,
	         COLUMN_PROJECT_ID_USER_SITES,
	         COLUMN_PROJECT_NAME_USER_SITES,
	         COLUMN_SITE_ID_USER_SITES,		                 
	         COLUMN_SITE_NAME_USER_SITES,
	         COLUMN_SITE_LOCATION_USER_SITES,
	         COLUMN_ACCESS_STATUS_USER_SITES,
	         COLUMN_PARTY_ID_USER_SITES,
	         COLUMN_ORG_ID_USER_SITES,
	         COLUMN_USER_TYPE_USER_SITES,},COLUMN_PROJECT_ID_USER_SITES + "=?" + " and "  + COLUMN_SITE_ID_USER_SITES + "=?", new String[] {String.valueOf(project_ID),String.valueOf(site_id)},null, null, null , null);
		if (cursor.moveToFirst())
    	{
        	do
			{
        		usersites_model.setUserSites_ID(Integer.parseInt(cursor.getString(0)));
         		usersites_model.setUser_Site_Link_ID(Integer.parseInt(cursor.getString(1)));
         		usersites_model.setProject_ID(Integer.parseInt(cursor.getString(2)));
         		usersites_model.setProject_Name(cursor.getString(3));
         		usersites_model.setSite_ID(Integer.parseInt(cursor.getString(4)));
         		usersites_model.setSite_Name(cursor.getString(5));
         		usersites_model.setSite_Location(cursor.getString(6));
         		usersites_model.setAccess_Status(cursor.getString(7));
         		usersites_model.setParty_ID(Integer.parseInt(cursor.getString(8)));
         		usersites_model.setOrg_ID(Integer.parseInt(cursor.getString(9)));
         		usersites_model.setUserType(cursor.getString(10));
        	} while (cursor.moveToNext());
    	}
    	if (cursor != null && !cursor.isClosed())
        	cursor.close();
    	System.out.println("counting records"+cursor.getCount());
    	return cursor.getCount();

	}
//find project_id and site_Id UserSitesTable record in Database
	public UserSites_Model find_ProjectID_SiteID_UserSitesTable(int project_ID,int site_id) throws SQLException {
		SQLiteDatabase db = this.getWritableDatabase();
	 	UserSites_Model usersites_model = new UserSites_Model();
		Cursor cursor = db.query(true, TABLE_USER_SITES, new String[] {
			 COLUMN_USER_SITES_ID,
	         COLUMN_USER_SITE_LINK_ID,
	         COLUMN_PROJECT_ID_USER_SITES,
	         COLUMN_PROJECT_NAME_USER_SITES,
	         COLUMN_SITE_ID_USER_SITES,		                 
	         COLUMN_SITE_NAME_USER_SITES,
	         COLUMN_SITE_LOCATION_USER_SITES,
	         COLUMN_ACCESS_STATUS_USER_SITES,
	         COLUMN_PARTY_ID_USER_SITES,
	         COLUMN_ORG_ID_USER_SITES,
	         COLUMN_USER_TYPE_USER_SITES,}, 	 
	         COLUMN_PROJECT_ID_USER_SITES + "=?" + " and "  +	 				                    		
	        		 COLUMN_SITE_ID_USER_SITES + "=?", 
              new String[] {String.valueOf(project_ID),String.valueOf(site_id)},
              null, null, null , null);


		if (cursor.moveToFirst()) {
      		do {
      			usersites_model.setUserSites_ID(Integer.parseInt(cursor.getString(0)));
       			usersites_model.setUser_Site_Link_ID(Integer.parseInt(cursor.getString(1)));
       			usersites_model.setProject_ID(Integer.parseInt(cursor.getString(2)));
       			usersites_model.setProject_Name(cursor.getString(3));
       			usersites_model.setSite_ID(Integer.parseInt(cursor.getString(4)));
       			usersites_model.setSite_Name(cursor.getString(5));
       			usersites_model.setSite_Location(cursor.getString(6));
       			usersites_model.setAccess_Status(cursor.getString(7));
       			usersites_model.setParty_ID(Integer.parseInt(cursor.getString(8)));
       			usersites_model.setOrg_ID(Integer.parseInt(cursor.getString(9)));
       			usersites_model.setUserType(cursor.getString(10));
     
      		} while (cursor.moveToNext());
  		}
  		if (cursor != null && !cursor.isClosed())
      		cursor.close();
  		return usersites_model;

	}

//find records which r matched with  org_id
	public UserSites_Model find_SiteName_UserSitesTable(String site_name) throws SQLException {
		SQLiteDatabase db = this.getWritableDatabase();
		UserSites_Model usersites_model = new UserSites_Model();
		Cursor cursor = db.query(true, TABLE_USER_SITES, new String[] {
                COLUMN_USER_SITES_ID,
                COLUMN_USER_SITE_LINK_ID,
                COLUMN_PROJECT_ID_USER_SITES,
                COLUMN_PROJECT_NAME_USER_SITES,
                COLUMN_SITE_ID_USER_SITES,		                 
                COLUMN_SITE_NAME_USER_SITES,
                COLUMN_SITE_LOCATION_USER_SITES,
                COLUMN_ACCESS_STATUS_USER_SITES,
                COLUMN_PARTY_ID_USER_SITES,
                COLUMN_ORG_ID_USER_SITES,
                COLUMN_USER_TYPE_USER_SITES,}, 		                                     		
                COLUMN_SITE_NAME_USER_SITES + "=?", 
                new String[] {site_name},
                null, null, null , null);
    	if (cursor.moveToFirst()) {
        	do {
        		usersites_model.setUserSites_ID(Integer.parseInt(cursor.getString(0)));
         		usersites_model.setUser_Site_Link_ID(Integer.parseInt(cursor.getString(1)));
         		usersites_model.setProject_ID(Integer.parseInt(cursor.getString(2)));
         		usersites_model.setProject_Name(cursor.getString(3));
         		usersites_model.setSite_ID(Integer.parseInt(cursor.getString(4)));
         		usersites_model.setSite_Name(cursor.getString(5));
         		usersites_model.setSite_Location(cursor.getString(6));
         		usersites_model.setAccess_Status(cursor.getString(7));
         		usersites_model.setParty_ID(Integer.parseInt(cursor.getString(8)));
         		usersites_model.setOrg_ID(Integer.parseInt(cursor.getString(9)));
         		usersites_model.setUserType(cursor.getString(10));
        	} while (cursor.moveToNext());
    	}
    	if (cursor != null && !cursor.isClosed())
        	cursor.close();
    	System.out.println("counting matched sitename records"+cursor.getCount());
    	return usersites_model;
	}
// Updating single Update_UserSitesTable row
	public int Update_UserSitesTable(UserSites_Model usersites_model) {
		SQLiteDatabase db = this.getWritableDatabase();
		ContentValues values = new ContentValues();
		values.put(COLUMN_USER_SITES_ID, usersites_model.getUserSites_ID());
		values.put(COLUMN_USER_SITE_LINK_ID, usersites_model.getUser_Site_Link_ID());
		values.put(COLUMN_PROJECT_ID_USER_SITES, usersites_model.getProject_ID());
		values.put(COLUMN_PROJECT_NAME_USER_SITES, usersites_model.getProject_Name());
		values.put(COLUMN_SITE_ID_USER_SITES, usersites_model.getSite_ID());
		values.put(COLUMN_SITE_NAME_USER_SITES, usersites_model.getSite_Name());
		values.put(COLUMN_SITE_LOCATION_USER_SITES, usersites_model.getSite_Location());
		values.put(COLUMN_ACCESS_STATUS_USER_SITES, usersites_model.getAccess_Status());
		values.put(COLUMN_PARTY_ID_USER_SITES, usersites_model.getParty_ID());
		values.put(COLUMN_ORG_ID_USER_SITES, usersites_model.getOrg_ID());
		values.put(COLUMN_USER_TYPE_USER_SITES, usersites_model.getUserType());
		System.out.println("check org id is"+usersites_model.getOrg_ID());
		// updating row
		return db.update(TABLE_USER_SITES, values, COLUMN_USER_SITES_ID + " = ?",
		new String[] { String.valueOf(usersites_model.getUserSites_ID()) });

	}
//	    CRUD METHODS FOR MATERIAL
//	    inserting records in MATERIAL table
	public void add_Material_Record( Received_Material_Model received_model) {
		// TODO Auto-generated method stub
		ContentValues values = new ContentValues();
		values.put(COLUMN_MATERIAL_NAME_MATL, received_model.getMaterial_Name_Matl());
		values.put(COLUMN_UNITS_MATL, received_model.getUnits_Matl());
		values.put(COLUMN_RATE_MATL, received_model.getRate_Matl());
		SQLiteDatabase db = this.getWritableDatabase();
		db.insert(TABLE_MATERIAL, null, values);
		db.close();
	}
//	    counting no of rows in MATERIAL table
	public int getMaterialTable_Row_Count() {
		String countQuery = "SELECT  * FROM " + TABLE_MATERIAL;
		SQLiteDatabase db = this.getReadableDatabase();
		Cursor cursor = db.rawQuery(countQuery, null);
		System.out.println("check count"+cursor.getCount());
		cursor.close();
		        // return count  
		return cursor.getCount();
	}
		// Getting All MATERIAL and adding to arrylist
	public List<Received_Material_Model> getAll_MaterialList() {
		List<Received_Material_Model> material_list = new ArrayList<Received_Material_Model>();
	    	// Select All Query
		String selectQuery = "SELECT  * FROM " + TABLE_MATERIAL;
		SQLiteDatabase db = this.getWritableDatabase();
		Cursor cursor = db.rawQuery(selectQuery, null);
	        // looping through all rows and adding to list
		if (cursor.moveToFirst()) {
			do {
				Received_Material_Model received_model = new Received_Material_Model();
				received_model.setMaterial_Id(Integer.parseInt(cursor.getString(0)));
				received_model.setMaterial_Name_Matl(cursor.getString(1));
				received_model.setUnits_Matl(cursor.getString(2));
				received_model.setRate_Matl(cursor.getString(3));
	                // Adding MATERIAL to list
	       		material_list.add(received_model);
			} while (cursor.moveToNext());
		}
		db.close();
		return material_list;
	}
	public Received_Material_Model find_Material_Record(String material_name) {
		String query = "Select * FROM " + TABLE_MATERIAL + " WHERE " + COLUMN_MATERIAL_NAME_MATL + " =  \"" + material_name + "\"";
		SQLiteDatabase db = this.getWritableDatabase();
		Cursor cursor = db.rawQuery(query, null);
		Received_Material_Model received_model = new Received_Material_Model();
		if (cursor.moveToFirst()) {
			cursor.moveToFirst();
			received_model.setMaterial_Id(Integer.parseInt(cursor.getString(0)));
			received_model.setMaterial_Name_Matl(cursor.getString(1));
			received_model.setUnits_Matl(cursor.getString(2));
			received_model.setRate_Matl(cursor.getString(3));
			cursor.close();
		}
		else
			received_model = null;
		db.close();
		return received_model;
	}
	 // Updating single material row
	 public int Update_MaterialRow(Received_Material_Model received_model) {
		 SQLiteDatabase db = this.getWritableDatabase();
		 ContentValues values = new ContentValues();
		 values.put(COLUMN_MATERIAL_ID, received_model.getMaterial_ID());
	     values.put(COLUMN_MATERIAL_NAME_MATL, received_model.getMaterial_Name_Matl());
	     values.put(COLUMN_UNITS_MATL, received_model.getUnits_Matl());
	     values.put(COLUMN_RATE_MATL, received_model.getRate_Matl());
	     System.out.println("ssssssssssss"+received_model.getMaterial_ID());
	    // updating row
	     return db.update(TABLE_MATERIAL, values, COLUMN_MATERIAL_ID + " = ?",
	     new String[] { String.valueOf(received_model.getMaterial_ID()) });
	   
	 }
	    
//	    CRUD METHODS FOR MATERIAL_STOCK_TRANSACTIONS
//	    inserting records in MATERIAL_STOCK_TRANSACTIONS table
	public void add_Material_Stk_Trans_Record(	Received_Material_Model received_model) {
			// TODO Auto-generated method stub
		ContentValues values = new ContentValues();
		values.put(COLUMN_MATERIAL_ID_MATL_STK_TRANS, received_model.getMaterial_ID_MST());
		values.put(COLUMN_MATERIAL_NAME_MATL_STK_TRANS, received_model.getMaterial_Name_MST());
		values.put(COLUMN_UNITS_MATL_STK_TRANS, received_model.getUnits_MST());
		values.put(COLUMN_RATE_MATL_STK_TRANS, received_model.getRate_MST());
		values.put(COLUMN_RECEIVED_STOCK_MATL_STK_TRANS, received_model.getReceived_Stock_MST());
		values.put(COLUMN_USED_MATL_STK_TRANS, received_model.getUsed_MST());
		values.put(COLUMN_INDENT_MATL_STK_TRANS, received_model.getIndent_MST());
		values.put(COLUMN_MATERIAL_REQ_BY_DATE_MATL_STK_TRANS, received_model.getMaterial_Req_By_Date_MST());
		values.put(COLUMN_CURRENT_STOCK_MATL_STK_TRANS, received_model.getCurrent_Stock_MST());
		values.put(COLUMN_PROJECT_ID_MATL_STK_TRANS, received_model.getProject_ID_MST());
		values.put(COLUMN_SITE_ID_MATL_STK_TRANS, received_model.getSite_ID_MST());
		values.put(COLUMN_PARTY_ID_MATL_STK_TRANS, received_model.getParty_ID_MST());
		System.out.println("first insertion party id is"+received_model.getParty_ID_MST());
		values.put(COLUMN_ORG_ID_MATL_STK_TRANS, received_model.getOrg_ID_MST());
		values.put(COLUMN_SYNC_FLAG_MATL_STK_TRANS, received_model.getSync_flag_MST());
		values.put(COLUMN_NEW_OR_OLD_FLAG_MATL_STK_TRANS, "Y");
		values.put(COLUMN_DC_INVOICE_MATL_STK_TRANS, received_model.getDC_Invoice_MST());
		values.put(COLUMN_LOT_NUMBER_MATL_STK_TRANS, received_model.getLOT_Number_MST());
		values.put(COLUMN_DOC_TYPE_MATL_STK_TRANS, received_model.getDoc_Type_MST());
		values.put(COLUMN_TRANSACTIONS_DATE_MATL_STK_TRANS, received_model.getTransaction_Date_MST());
		values.put(COLUMN_CREATED_DATE_MATL_STK_TRANS, received_model.getCreated_Date_MST());
		values.put(COLUMN_REMARKS_MATL_STK_TRANS, received_model.getRemarks_MST());
		values.put(COLUMN_ADJUSTMENTS_MATL_STK_TRANS, received_model.getAdjustments_MST());
		values.put(COLUMN_ADJUST_REASON_MATL_STK_TRANS, received_model.getAdjustReason_MST());
		values.put(COLUMN_DISPLAY_FLAG_MATL_STK_TRANS, received_model.getDisplay_Flag_MST());
		values.put(COLUMN_TASK_ID_MATL_STK_TRANS, received_model.getTask_ID());
		SQLiteDatabase db = this.getWritableDatabase();
		db.insert(TABLE_MATERIAL_STOCK_TRANSACTIONS, null, values);
		db.close();
	}
//	    counting no of rows in MATERIAL_STOCK_TRANSACTIONS table
	public int get_Material_Stk_TransTable_Row_Count() {
		String countQuery = "SELECT  * FROM " + TABLE_MATERIAL_STOCK_TRANSACTIONS;
		SQLiteDatabase db = this.getReadableDatabase();
		Cursor cursor = db.rawQuery(countQuery, null);
		System.out.println("check count"+cursor.getCount());
		cursor.close();
		return cursor.getCount();
	}
		// Getting All MATERIAL_STOCK_TRANSACTIONS and adding to arrylist
	public List<Received_Material_Model> getAll_Material_Stk_TransList() {
		List<Received_Material_Model> material_stk_trans_list = new ArrayList<Received_Material_Model>();
		String selectQuery = "SELECT  * FROM " + TABLE_MATERIAL_STOCK_TRANSACTIONS;
		SQLiteDatabase db = this.getWritableDatabase();
		Cursor cursor = db.rawQuery(selectQuery, null);
	        if (cursor.moveToFirst()) {
	            do {
	            	Received_Material_Model received_model = new Received_Material_Model();
	            	received_model.setMaterial_Stock_Transactions_ID(Integer.parseInt(cursor.getString(0)));
	            	received_model.setMaterial_ID_MST(Integer.parseInt(cursor.getString(1)));
	            	received_model.setMaterial_Name_MST(cursor.getString(2));
	            	received_model.setUnits_MST(cursor.getString(3));	            	
	           		received_model.setRate_MST(cursor.getString(4));
	           		received_model.setReceived_Stock_MST(cursor.getString(5));
	           		received_model.setUsed_MST(cursor.getString(6));
	           		received_model.setIndent_MST(cursor.getString(7));
	           		received_model.setMaterial_Req_By_Date_MST(cursor.getString(8));
	           		received_model.setCurrent_Stock_MST(cursor.getString(9));	           		
	           		received_model.setProject_ID_MST(Integer.parseInt(cursor.getString(10)));
	           		received_model.setSite_ID_MST(Integer.parseInt(cursor.getString(11)));
	           		received_model.setParty_ID_MST(Integer.parseInt(cursor.getString(12)));
	           		received_model.setOrg_ID_MST(Integer.parseInt(cursor.getString(13)));
	           		received_model.setSync_flag_MST(cursor.getString(14));
	           		received_model.setOldOrNew_flag_MST(cursor.getString(15));
	           		received_model.setDC_Invoice_MST(cursor.getString(16));
	           		received_model.setLOT_Number_MST(cursor.getString(17));
	           		received_model.setDoc_Type_MST(cursor.getString(18));
	           		received_model.setTransaction_Date_MST(cursor.getString(19));
	           		received_model.setCreated_Date_MST(cursor.getString(20));
	           		received_model.setRemarks_MST(cursor.getString(21));
	           		received_model.setAdjustments_MST(cursor.getString(22));
	           		received_model.setAdjustReason_MST(cursor.getString(23));
	           		received_model.setDisplay_Flag_MST(cursor.getString(24));
	           		received_model.setTask_Id(Integer.parseInt(cursor.getString(25)));
	           	
	           		
	                // Adding MATERIAL to list
	           		material_stk_trans_list.add(received_model);
	            } while (cursor.moveToNext());
	        }
		cursor.close();
		return material_stk_trans_list;
	}
//      find SiteID in Material_Stk_Trans and display_flag and arrange ORDERBY with MATERIAL_NAME and adding to arraylist
	    
	public ArrayList<Received_Material_Model> find_SiteID_Material_Stk_TransList(int site_id, String display_flag) throws SQLException {
		SQLiteDatabase db = this.getWritableDatabase();
		ArrayList<Received_Material_Model> get_matl_bySiteID = new ArrayList<Received_Material_Model>();
	    Cursor cursor = db.query(true, TABLE_MATERIAL_STOCK_TRANSACTIONS, new String[] {
	                    COLUMN_MATERIAL_STOCK_TRANSACTIONS_ID,
	                    COLUMN_MATERIAL_ID_MATL_STK_TRANS,
	                    COLUMN_MATERIAL_NAME_MATL_STK_TRANS,
	                    COLUMN_UNITS_MATL_STK_TRANS,
	                    COLUMN_RATE_MATL_STK_TRANS,
	                    COLUMN_RECEIVED_STOCK_MATL_STK_TRANS,
	                    COLUMN_USED_MATL_STK_TRANS,
	                    COLUMN_INDENT_MATL_STK_TRANS,
	                    COLUMN_MATERIAL_REQ_BY_DATE_MATL_STK_TRANS,
	                    COLUMN_CURRENT_STOCK_MATL_STK_TRANS,	                   
	                    COLUMN_PROJECT_ID_MATL_STK_TRANS,
	                    COLUMN_SITE_ID_MATL_STK_TRANS,
	                    COLUMN_PARTY_ID_MATL_STK_TRANS,
	                    COLUMN_ORG_ID_MATL_STK_TRANS,
	                    COLUMN_SYNC_FLAG_MATL_STK_TRANS,
	                    COLUMN_NEW_OR_OLD_FLAG_MATL_STK_TRANS,
	                    COLUMN_DC_INVOICE_MATL_STK_TRANS,
	                    COLUMN_LOT_NUMBER_MATL_STK_TRANS,
	                    COLUMN_DOC_TYPE_MATL_STK_TRANS,	  
	                    COLUMN_TRANSACTIONS_DATE_MATL_STK_TRANS,
	                    COLUMN_CREATED_DATE_MATL_STK_TRANS,
	                    COLUMN_REMARKS_MATL_STK_TRANS,
	                    COLUMN_ADJUSTMENTS_MATL_STK_TRANS,
	                    COLUMN_ADJUST_REASON_MATL_STK_TRANS,
	                    COLUMN_DISPLAY_FLAG_MATL_STK_TRANS,
	                    COLUMN_TASK_ID_MATL_STK_TRANS,
	                    }, 
	                  
	                    COLUMN_SITE_ID_MATL_STK_TRANS + "=?"+ " and "  +
	                    COLUMN_DISPLAY_FLAG_MATL_STK_TRANS + "=?", 
	                    new String[] {String.valueOf(site_id),display_flag},
	                    null, null, COLUMN_MATERIAL_NAME_MATL_STK_TRANS , null);

		if (cursor.moveToFirst()) {
			do {
				Received_Material_Model received_model = new Received_Material_Model();
				received_model.setMaterial_Stock_Transactions_ID(Integer.parseInt(cursor.getString(0)));
				received_model.setMaterial_ID_MST(Integer.parseInt(cursor.getString(1)));
				received_model.setMaterial_Name_MST(cursor.getString(2));
				received_model.setUnits_MST(cursor.getString(3));
				received_model.setRate_MST(cursor.getString(4));
				received_model.setReceived_Stock_MST(cursor.getString(5));
				received_model.setUsed_MST(cursor.getString(6));
				received_model.setIndent_MST(cursor.getString(7));
				received_model.setMaterial_Req_By_Date_MST(cursor.getString(8));
				received_model.setCurrent_Stock_MST(cursor.getString(9));
				received_model.setProject_ID_MST(Integer.parseInt(cursor.getString(10)));
				received_model.setSite_ID_MST(Integer.parseInt(cursor.getString(11)));
				received_model.setParty_ID_MST(Integer.parseInt(cursor.getString(12)));
				received_model.setOrg_ID_MST(Integer.parseInt(cursor.getString(13)));
				received_model.setSync_flag_MST(cursor.getString(14));
				received_model.setOldOrNew_flag_MST(cursor.getString(15));
				received_model.setDC_Invoice_MST(cursor.getString(16));
				received_model.setLOT_Number_MST(cursor.getString(17));
				received_model.setDoc_Type_MST(cursor.getString(18));
				received_model.setTransaction_Date_MST(cursor.getString(19));
				received_model.setCreated_Date_MST(cursor.getString(20));
				received_model.setRemarks_MST(cursor.getString(21));
				received_model.setAdjustments_MST(cursor.getString(22));
				received_model.setAdjustReason_MST(cursor.getString(23));
				received_model.setDisplay_Flag_MST(cursor.getString(24));
				received_model.setTask_Id(Integer.parseInt(cursor.getString(25)));
 	       	    get_matl_bySiteID.add(received_model);
			} while (cursor.moveToNext());
		}
		if (cursor != null && !cursor.isClosed())
				cursor.close();
		System.out.println("db size of list"+get_matl_bySiteID.size());
		return get_matl_bySiteID;
	 	 
	}
//	       find Material_id in Material_Stk_Trans and adding to arraylist
	public ArrayList<Received_Material_Model> find_SiteID_MaterialID_SynStatus_Material_Stk_TransList(int selected_SiteId,int material_id, String syn_Status_flag) throws SQLException {
		SQLiteDatabase db = this.getWritableDatabase();
		ArrayList<Received_Material_Model> get_by_material_id_list = new ArrayList<Received_Material_Model>();
	    Cursor cursor = db.query(true, TABLE_MATERIAL_STOCK_TRANSACTIONS, new String[] {
	                    COLUMN_MATERIAL_STOCK_TRANSACTIONS_ID,
	                    COLUMN_MATERIAL_ID_MATL_STK_TRANS,
	                    COLUMN_MATERIAL_NAME_MATL_STK_TRANS,
	                    COLUMN_UNITS_MATL_STK_TRANS,
	                    COLUMN_RATE_MATL_STK_TRANS,
	                    COLUMN_RECEIVED_STOCK_MATL_STK_TRANS,
	                    COLUMN_USED_MATL_STK_TRANS,
	                    COLUMN_INDENT_MATL_STK_TRANS,
	                    COLUMN_MATERIAL_REQ_BY_DATE_MATL_STK_TRANS,
	                    COLUMN_CURRENT_STOCK_MATL_STK_TRANS,	                   
	                    COLUMN_PROJECT_ID_MATL_STK_TRANS,
	                    COLUMN_SITE_ID_MATL_STK_TRANS,
	                    COLUMN_PARTY_ID_MATL_STK_TRANS,
	                    COLUMN_ORG_ID_MATL_STK_TRANS,
	                    COLUMN_SYNC_FLAG_MATL_STK_TRANS,
	                    COLUMN_NEW_OR_OLD_FLAG_MATL_STK_TRANS,
	                    COLUMN_DC_INVOICE_MATL_STK_TRANS,
	                    COLUMN_LOT_NUMBER_MATL_STK_TRANS,
	                    COLUMN_DOC_TYPE_MATL_STK_TRANS,	 
	                    COLUMN_TRANSACTIONS_DATE_MATL_STK_TRANS,
	                    COLUMN_CREATED_DATE_MATL_STK_TRANS,
	                    COLUMN_REMARKS_MATL_STK_TRANS,
	                    COLUMN_ADJUSTMENTS_MATL_STK_TRANS,
	                    COLUMN_ADJUST_REASON_MATL_STK_TRANS,
	                    COLUMN_DISPLAY_FLAG_MATL_STK_TRANS,
	                    COLUMN_TASK_ID_MATL_STK_TRANS,
	                   }, 	                  
	                    COLUMN_SITE_ID_MATL_STK_TRANS + "=?"+ " and "  +
	                    COLUMN_MATERIAL_ID_MATL_STK_TRANS + "=?"+ " and "  +
	                    COLUMN_SYNC_FLAG_MATL_STK_TRANS + "=?",  
	                    new String[] {String.valueOf(selected_SiteId),String.valueOf(material_id),syn_Status_flag},
	                    null, null, null , null);
	    
	 
		if (cursor.moveToFirst()) {
			do {
				Received_Material_Model received_model = new Received_Material_Model();
				received_model.setMaterial_Stock_Transactions_ID(Integer.parseInt(cursor.getString(0)));
				received_model.setMaterial_ID_MST(Integer.parseInt(cursor.getString(1)));
				received_model.setMaterial_Name_MST(cursor.getString(2));
				received_model.setUnits_MST(cursor.getString(3));
				received_model.setRate_MST(cursor.getString(4));
				received_model.setReceived_Stock_MST(cursor.getString(5));
				received_model.setUsed_MST(cursor.getString(6));
				received_model.setIndent_MST(cursor.getString(7));
				received_model.setMaterial_Req_By_Date_MST(cursor.getString(8));
				received_model.setCurrent_Stock_MST(cursor.getString(9));
				received_model.setProject_ID_MST(Integer.parseInt(cursor.getString(10)));
				received_model.setSite_ID_MST(Integer.parseInt(cursor.getString(11)));
				received_model.setParty_ID_MST(Integer.parseInt(cursor.getString(12)));
				received_model.setOrg_ID_MST(Integer.parseInt(cursor.getString(13)));
				received_model.setSync_flag_MST(cursor.getString(14));
				received_model.setOldOrNew_flag_MST(cursor.getString(15));
				received_model.setDC_Invoice_MST(cursor.getString(16));
				received_model.setLOT_Number_MST(cursor.getString(17));
				received_model.setDoc_Type_MST(cursor.getString(18));
				received_model.setTransaction_Date_MST(cursor.getString(19));
				received_model.setCreated_Date_MST(cursor.getString(20));
				received_model.setRemarks_MST(cursor.getString(21));
				received_model.setAdjustments_MST(cursor.getString(22));
				received_model.setAdjustReason_MST(cursor.getString(23));
				received_model.setDisplay_Flag_MST(cursor.getString(24));
				received_model.setTask_Id(Integer.parseInt(cursor.getString(25)));
				get_by_material_id_list.add(received_model);
			} while (cursor.moveToNext());
		}
		if (cursor != null && !cursor.isClosed())
				cursor.close();
	        System.out.println("db size of list"+get_by_material_id_list.size());
	        return get_by_material_id_list; 
	}
//	       find Material_id in Material_Stk_Trans and adding to arraylist
	public ArrayList<Received_Material_Model> find_SiteID_SynStatus_Material_Stk_TransList(int selected_SiteId, String syn_Status_flag) throws SQLException {
		SQLiteDatabase db = this.getWritableDatabase();
		ArrayList<Received_Material_Model>_list = new ArrayList<Received_Material_Model>();
	    Cursor cursor = db.query(true, TABLE_MATERIAL_STOCK_TRANSACTIONS, new String[] {
	                    COLUMN_MATERIAL_STOCK_TRANSACTIONS_ID,
	                    COLUMN_MATERIAL_ID_MATL_STK_TRANS,
	                    COLUMN_MATERIAL_NAME_MATL_STK_TRANS,
	                    COLUMN_UNITS_MATL_STK_TRANS,
	                    COLUMN_RATE_MATL_STK_TRANS,
	                    COLUMN_RECEIVED_STOCK_MATL_STK_TRANS,
	                    COLUMN_USED_MATL_STK_TRANS,
	                    COLUMN_INDENT_MATL_STK_TRANS,
	                    COLUMN_MATERIAL_REQ_BY_DATE_MATL_STK_TRANS,
	                    COLUMN_CURRENT_STOCK_MATL_STK_TRANS,	                   
	                    COLUMN_PROJECT_ID_MATL_STK_TRANS,
	                    COLUMN_SITE_ID_MATL_STK_TRANS,
	                    COLUMN_PARTY_ID_MATL_STK_TRANS,
	                    COLUMN_ORG_ID_MATL_STK_TRANS,
	                    COLUMN_SYNC_FLAG_MATL_STK_TRANS,
	                    COLUMN_NEW_OR_OLD_FLAG_MATL_STK_TRANS,
	                    COLUMN_DC_INVOICE_MATL_STK_TRANS,
	                    COLUMN_LOT_NUMBER_MATL_STK_TRANS,
	                    COLUMN_DOC_TYPE_MATL_STK_TRANS,	 
	                    COLUMN_TRANSACTIONS_DATE_MATL_STK_TRANS,
	                    COLUMN_CREATED_DATE_MATL_STK_TRANS,
	                    COLUMN_REMARKS_MATL_STK_TRANS,
	                    COLUMN_ADJUSTMENTS_MATL_STK_TRANS,
	                    COLUMN_ADJUST_REASON_MATL_STK_TRANS,
	                    COLUMN_DISPLAY_FLAG_MATL_STK_TRANS,
	                    COLUMN_TASK_ID_MATL_STK_TRANS,
	                   }, 	                  
	                    COLUMN_SITE_ID_MATL_STK_TRANS + "=?"+ " and "  +
	                   
	                    COLUMN_SYNC_FLAG_MATL_STK_TRANS + "=?",
	                  
	                    new String[] {String.valueOf(selected_SiteId),syn_Status_flag},
	                    null, null, null , null);
		if (cursor.moveToFirst()) {
			do {
				Received_Material_Model received_model = new Received_Material_Model();
				received_model.setMaterial_Stock_Transactions_ID(Integer.parseInt(cursor.getString(0)));
				received_model.setMaterial_ID_MST(Integer.parseInt(cursor.getString(1)));
				received_model.setMaterial_Name_MST(cursor.getString(2));
				received_model.setUnits_MST(cursor.getString(3));
				received_model.setRate_MST(cursor.getString(4));
				received_model.setReceived_Stock_MST(cursor.getString(5));
				received_model.setUsed_MST(cursor.getString(6));
				received_model.setIndent_MST(cursor.getString(7));
				received_model.setMaterial_Req_By_Date_MST(cursor.getString(8));
				received_model.setCurrent_Stock_MST(cursor.getString(9));
				received_model.setProject_ID_MST(Integer.parseInt(cursor.getString(10)));
				received_model.setSite_ID_MST(Integer.parseInt(cursor.getString(11)));
				received_model.setParty_ID_MST(Integer.parseInt(cursor.getString(12)));
				received_model.setOrg_ID_MST(Integer.parseInt(cursor.getString(13)));
				received_model.setSync_flag_MST(cursor.getString(14));
				received_model.setOldOrNew_flag_MST(cursor.getString(15));
				received_model.setDC_Invoice_MST(cursor.getString(16));
				received_model.setLOT_Number_MST(cursor.getString(17));
				received_model.setDoc_Type_MST(cursor.getString(18));
				received_model.setTransaction_Date_MST(cursor.getString(19));
				received_model.setCreated_Date_MST(cursor.getString(20));
				received_model.setRemarks_MST(cursor.getString(21));
				received_model.setAdjustments_MST(cursor.getString(22));
				received_model.setAdjustReason_MST(cursor.getString(23));
				received_model.setDisplay_Flag_MST(cursor.getString(24));
				received_model.setTask_Id(Integer.parseInt(cursor.getString(25)));
	           		_list.add(received_model);
			} while (cursor.moveToNext());
		}
		if (cursor != null && !cursor.isClosed())
			 cursor.close();
		System.out.println("db size of list"+_list.size());
		return _list;
	}
	    
//	    find TABLE_MATERIAL_STOCK_TRANSACTIONS record in Database
	public ArrayList<Received_Material_Model> find_SiteID_MaterialID_Material_Stk_Trans(int site_id,int material_id) throws SQLException {
		SQLiteDatabase db = this.getWritableDatabase();
		ArrayList<Received_Material_Model> stockHistory_Listby_SiteID_MaterialID = new ArrayList<Received_Material_Model>();
	    Cursor cursor = db.query(true, TABLE_MATERIAL_STOCK_TRANSACTIONS, new String[] {
	    		 COLUMN_MATERIAL_STOCK_TRANSACTIONS_ID,
                 COLUMN_MATERIAL_ID_MATL_STK_TRANS,
                 COLUMN_MATERIAL_NAME_MATL_STK_TRANS,
                 COLUMN_UNITS_MATL_STK_TRANS,
                 COLUMN_RATE_MATL_STK_TRANS,
                 COLUMN_RECEIVED_STOCK_MATL_STK_TRANS,
                 COLUMN_USED_MATL_STK_TRANS,
                 COLUMN_INDENT_MATL_STK_TRANS,
                 COLUMN_MATERIAL_REQ_BY_DATE_MATL_STK_TRANS,
                 COLUMN_CURRENT_STOCK_MATL_STK_TRANS,               
                 COLUMN_PROJECT_ID_MATL_STK_TRANS,
                 COLUMN_SITE_ID_MATL_STK_TRANS,
                 COLUMN_PARTY_ID_MATL_STK_TRANS,
                 COLUMN_ORG_ID_MATL_STK_TRANS,
                 COLUMN_SYNC_FLAG_MATL_STK_TRANS,
                 COLUMN_NEW_OR_OLD_FLAG_MATL_STK_TRANS,
                 COLUMN_DC_INVOICE_MATL_STK_TRANS,
                 COLUMN_LOT_NUMBER_MATL_STK_TRANS,
                 COLUMN_DOC_TYPE_MATL_STK_TRANS,
                 COLUMN_TRANSACTIONS_DATE_MATL_STK_TRANS,
                 COLUMN_CREATED_DATE_MATL_STK_TRANS,
                 COLUMN_REMARKS_MATL_STK_TRANS,
                 COLUMN_ADJUSTMENTS_MATL_STK_TRANS,
                 COLUMN_ADJUST_REASON_MATL_STK_TRANS,
                 COLUMN_DISPLAY_FLAG_MATL_STK_TRANS,
                 COLUMN_TASK_ID_MATL_STK_TRANS,
                 }, 
                 COLUMN_SITE_ID_MATL_STK_TRANS + "=?" + " and "  +	 				                    		
                		  COLUMN_MATERIAL_ID_MATL_STK_TRANS + "=?", 
	                    new String[] {String.valueOf(site_id),String.valueOf(material_id)},
	                    null, null, null , null);
		if (cursor.moveToFirst()) {
			do {
				Received_Material_Model received_model = new Received_Material_Model();
				received_model.setMaterial_Stock_Transactions_ID(Integer.parseInt(cursor.getString(0)));
				received_model.setMaterial_ID_MST(Integer.parseInt(cursor.getString(1)));
				received_model.setMaterial_Name_MST(cursor.getString(2));
				received_model.setUnits_MST(cursor.getString(3));
				received_model.setRate_MST(cursor.getString(4));
				received_model.setReceived_Stock_MST(cursor.getString(5));
				received_model.setUsed_MST(cursor.getString(6));
				received_model.setIndent_MST(cursor.getString(7));
				received_model.setMaterial_Req_By_Date_MST(cursor.getString(8));
				received_model.setCurrent_Stock_MST(cursor.getString(9));
				received_model.setProject_ID_MST(Integer.parseInt(cursor.getString(10)));
				received_model.setSite_ID_MST(Integer.parseInt(cursor.getString(11)));
				received_model.setParty_ID_MST(Integer.parseInt(cursor.getString(12)));
				received_model.setOrg_ID_MST(Integer.parseInt(cursor.getString(13)));
				received_model.setSync_flag_MST(cursor.getString(14));
				received_model.setOldOrNew_flag_MST(cursor.getString(15));
				received_model.setDC_Invoice_MST(cursor.getString(16));
				received_model.setLOT_Number_MST(cursor.getString(17));
				received_model.setDoc_Type_MST(cursor.getString(18));
				received_model.setTransaction_Date_MST(cursor.getString(19));
				received_model.setCreated_Date_MST(cursor.getString(20));
				received_model.setRemarks_MST(cursor.getString(21));
				received_model.setAdjustments_MST(cursor.getString(22));
				received_model.setAdjustReason_MST(cursor.getString(23));
				received_model.setDisplay_Flag_MST(cursor.getString(24));
				received_model.setTask_Id(Integer.parseInt(cursor.getString(25)));
				stockHistory_Listby_SiteID_MaterialID.add(received_model);
			} while (cursor.moveToNext());
		}
		if (cursor != null && !cursor.isClosed())
			cursor.close();
		System.out.println("counting records"+cursor.getCount());
		return stockHistory_Listby_SiteID_MaterialID;
	 
	}
	    
//      find Syn_status in Material_Stk_Trans and adding to arraylist
	public ArrayList<Received_Material_Model> find_SiteID_Synch_Status_Material_Stk_TransList(int selected_Site_ID,String syn_status) throws SQLException {
		SQLiteDatabase db = this.getWritableDatabase();
		ArrayList<Received_Material_Model> get_Syn_Status_list = new ArrayList<Received_Material_Model>();
	    Cursor cursor = db.query(true, TABLE_MATERIAL_STOCK_TRANSACTIONS, new String[] {
	                    COLUMN_MATERIAL_STOCK_TRANSACTIONS_ID,
	                    COLUMN_MATERIAL_ID_MATL_STK_TRANS,
	                    COLUMN_MATERIAL_NAME_MATL_STK_TRANS,
	                    COLUMN_UNITS_MATL_STK_TRANS,
	                    COLUMN_RATE_MATL_STK_TRANS,
	                    COLUMN_RECEIVED_STOCK_MATL_STK_TRANS,
	                    COLUMN_USED_MATL_STK_TRANS,
	                    COLUMN_INDENT_MATL_STK_TRANS,
	                    COLUMN_MATERIAL_REQ_BY_DATE_MATL_STK_TRANS,
	                    COLUMN_CURRENT_STOCK_MATL_STK_TRANS,	                   
	                    COLUMN_PROJECT_ID_MATL_STK_TRANS,
	                    COLUMN_SITE_ID_MATL_STK_TRANS,
	                    COLUMN_PARTY_ID_MATL_STK_TRANS,
	                    COLUMN_ORG_ID_MATL_STK_TRANS,
	                    COLUMN_SYNC_FLAG_MATL_STK_TRANS,
	                    COLUMN_NEW_OR_OLD_FLAG_MATL_STK_TRANS,
	                    COLUMN_DC_INVOICE_MATL_STK_TRANS,
	                    COLUMN_LOT_NUMBER_MATL_STK_TRANS,
	                    COLUMN_DOC_TYPE_MATL_STK_TRANS,	 
	                    COLUMN_TRANSACTIONS_DATE_MATL_STK_TRANS,
	                    COLUMN_CREATED_DATE_MATL_STK_TRANS,
	                    COLUMN_REMARKS_MATL_STK_TRANS,
	                    COLUMN_ADJUSTMENTS_MATL_STK_TRANS,
	                    COLUMN_ADJUST_REASON_MATL_STK_TRANS,
	                    COLUMN_DISPLAY_FLAG_MATL_STK_TRANS,
	                    COLUMN_TASK_ID_MATL_STK_TRANS,
	                    }, 
	                    COLUMN_SITE_ID_MATL_STK_TRANS + "=?"+ " and "  +
	                    		COLUMN_SYNC_FLAG_MATL_STK_TRANS + "=?", 
	                    new String[] {String.valueOf(selected_Site_ID),syn_status},
	                    null, null, null , null);
		if (cursor.moveToFirst()) {
			do {
				Received_Material_Model received_model = new Received_Material_Model();
				received_model.setMaterial_Stock_Transactions_ID(Integer.parseInt(cursor.getString(0)));
				received_model.setMaterial_ID_MST(Integer.parseInt(cursor.getString(1)));
				received_model.setMaterial_Name_MST(cursor.getString(2));
				received_model.setUnits_MST(cursor.getString(3));
				received_model.setRate_MST(cursor.getString(4));
				received_model.setReceived_Stock_MST(cursor.getString(5));
				received_model.setUsed_MST(cursor.getString(6));
				received_model.setIndent_MST(cursor.getString(7));
				received_model.setMaterial_Req_By_Date_MST(cursor.getString(8));
				received_model.setCurrent_Stock_MST(cursor.getString(9));
				received_model.setProject_ID_MST(Integer.parseInt(cursor.getString(10)));
				received_model.setSite_ID_MST(Integer.parseInt(cursor.getString(11)));
				received_model.setParty_ID_MST(Integer.parseInt(cursor.getString(12)));
				received_model.setOrg_ID_MST(Integer.parseInt(cursor.getString(13)));
				received_model.setSync_flag_MST(cursor.getString(14));
				received_model.setOldOrNew_flag_MST(cursor.getString(15));
				received_model.setDC_Invoice_MST(cursor.getString(16));
				received_model.setLOT_Number_MST(cursor.getString(17));
				received_model.setDoc_Type_MST(cursor.getString(18));
				received_model.setTransaction_Date_MST(cursor.getString(19));
				received_model.setCreated_Date_MST(cursor.getString(20));
				received_model.setRemarks_MST(cursor.getString(21));
				received_model.setAdjustments_MST(cursor.getString(22));
				received_model.setAdjustReason_MST(cursor.getString(23));
				received_model.setDisplay_Flag_MST(cursor.getString(24));
				received_model.setTask_Id(Integer.parseInt(cursor.getString(25)));
				get_Syn_Status_list.add(received_model);
			} while (cursor.moveToNext());
		}
		if (cursor != null && !cursor.isClosed())
	            cursor.close();
		System.out.println("db size of list"+get_Syn_Status_list.size());
		return get_Syn_Status_list;
	}
//	    find TABLE_MATERIAL_STOCK_TRANSACTIONS record in Database
	public Received_Material_Model find_Last_TransactionDate_Material_Stk_Trans_Table() {
		String query = "Select * FROM " + TABLE_MATERIAL_STOCK_TRANSACTIONS;
		SQLiteDatabase db = this.getWritableDatabase();
		Cursor cursor1 = db.rawQuery(query,null);
		Cursor cursor = db.rawQuery(query+ " ORDER BY "+COLUMN_TRANSACTIONS_DATE_MATL_STK_TRANS + " DESC" +" LIMIT 1 " , new String[] {});
		System.out.println("count of max transaction date"+cursor.getCount())  ;
		Received_Material_Model received_model = new Received_Material_Model();
		if (cursor.moveToFirst()) {
			cursor.moveToFirst();
			received_model.setMaterial_Stock_Transactions_ID(Integer.parseInt(cursor.getString(0)));
			received_model.setMaterial_ID_MST(Integer.parseInt(cursor.getString(1)));
			received_model.setMaterial_Name_MST(cursor.getString(2));
			received_model.setUnits_MST(cursor.getString(3));
			received_model.setRate_MST(cursor.getString(4));
			received_model.setReceived_Stock_MST(cursor.getString(5));
			received_model.setUsed_MST(cursor.getString(6));
			received_model.setIndent_MST(cursor.getString(7));
			received_model.setMaterial_Req_By_Date_MST(cursor.getString(8));
			received_model.setCurrent_Stock_MST(cursor.getString(9));
			received_model.setProject_ID_MST(Integer.parseInt(cursor.getString(10)));
			received_model.setSite_ID_MST(Integer.parseInt(cursor.getString(11)));
			received_model.setParty_ID_MST(Integer.parseInt(cursor.getString(12)));
			received_model.setOrg_ID_MST(Integer.parseInt(cursor.getString(13)));
			received_model.setSync_flag_MST(cursor.getString(14));
			received_model.setOldOrNew_flag_MST(cursor.getString(15));
			received_model.setDC_Invoice_MST(cursor.getString(16));
			received_model.setLOT_Number_MST(cursor.getString(17));
			received_model.setDoc_Type_MST(cursor.getString(18));
			received_model.setTransaction_Date_MST(cursor.getString(19));
			received_model.setCreated_Date_MST(cursor.getString(20));
			received_model.setRemarks_MST(cursor.getString(21));
			received_model.setAdjustments_MST(cursor.getString(22));
			received_model.setAdjustReason_MST(cursor.getString(23));
			received_model.setDisplay_Flag_MST(cursor.getString(24));
			received_model.setTask_Id(Integer.parseInt(cursor.getString(25)));
			cursor.close();
		}
		else
			received_model = null;
		db.close();
	    	return received_model;
	}
//	    find TABLE_MATERIAL_STOCK_TRANSACTIONS record in Database
	public Received_Material_Model find_SiteID_MaterialID_DisplayFlag_Material_Stk_Trans_Table
	    (int selected_SiteID,int material_id, String display_flag) throws SQLException {
		SQLiteDatabase db = this.getWritableDatabase();
		Received_Material_Model received_model = new Received_Material_Model();
	    Cursor cursor = db.query(true, TABLE_MATERIAL_STOCK_TRANSACTIONS, new String[] {
	    		 COLUMN_MATERIAL_STOCK_TRANSACTIONS_ID,
                 COLUMN_MATERIAL_ID_MATL_STK_TRANS,
                 COLUMN_MATERIAL_NAME_MATL_STK_TRANS,
                 COLUMN_UNITS_MATL_STK_TRANS,
                 COLUMN_RATE_MATL_STK_TRANS,
                 COLUMN_RECEIVED_STOCK_MATL_STK_TRANS,
                 COLUMN_USED_MATL_STK_TRANS,
                 COLUMN_INDENT_MATL_STK_TRANS,
                 COLUMN_MATERIAL_REQ_BY_DATE_MATL_STK_TRANS,
                 COLUMN_CURRENT_STOCK_MATL_STK_TRANS,
               
                 COLUMN_PROJECT_ID_MATL_STK_TRANS,
                 COLUMN_SITE_ID_MATL_STK_TRANS,
                 COLUMN_PARTY_ID_MATL_STK_TRANS,
                 COLUMN_ORG_ID_MATL_STK_TRANS,
                 COLUMN_SYNC_FLAG_MATL_STK_TRANS,
                 COLUMN_NEW_OR_OLD_FLAG_MATL_STK_TRANS,
                 COLUMN_DC_INVOICE_MATL_STK_TRANS,
                 COLUMN_LOT_NUMBER_MATL_STK_TRANS,
                 COLUMN_DOC_TYPE_MATL_STK_TRANS,
                 COLUMN_TRANSACTIONS_DATE_MATL_STK_TRANS,
                 COLUMN_CREATED_DATE_MATL_STK_TRANS,
                 COLUMN_REMARKS_MATL_STK_TRANS,
                 COLUMN_ADJUSTMENTS_MATL_STK_TRANS,
                 COLUMN_ADJUST_REASON_MATL_STK_TRANS,
                 COLUMN_DISPLAY_FLAG_MATL_STK_TRANS,
                 COLUMN_TASK_ID_MATL_STK_TRANS,
               }, 
                 COLUMN_SITE_ID_MATL_STK_TRANS + "=?" + " and "  +	
                 COLUMN_MATERIAL_ID_MATL_STK_TRANS + "=?" + " and "  +	
                 COLUMN_DISPLAY_FLAG_MATL_STK_TRANS + "=?", 
	                    new String[] {String.valueOf(selected_SiteID),String.valueOf(material_id), display_flag},
	                    null, null, null , null);
		if (cursor.moveToFirst()) {
			do {
				received_model.setMaterial_Stock_Transactions_ID(Integer.parseInt(cursor.getString(0)));
				received_model.setMaterial_ID_MST(Integer.parseInt(cursor.getString(1)));
				received_model.setMaterial_Name_MST(cursor.getString(2));
				received_model.setUnits_MST(cursor.getString(3));
				received_model.setRate_MST(cursor.getString(4));
				received_model.setReceived_Stock_MST(cursor.getString(5));
				received_model.setUsed_MST(cursor.getString(6));
				received_model.setIndent_MST(cursor.getString(7));
				received_model.setMaterial_Req_By_Date_MST(cursor.getString(8));
				received_model.setCurrent_Stock_MST(cursor.getString(9));
				received_model.setProject_ID_MST(Integer.parseInt(cursor.getString(10)));
				received_model.setSite_ID_MST(Integer.parseInt(cursor.getString(11)));
				received_model.setParty_ID_MST(Integer.parseInt(cursor.getString(12)));
				received_model.setOrg_ID_MST(Integer.parseInt(cursor.getString(13)));
				received_model.setSync_flag_MST(cursor.getString(14));
				received_model.setOldOrNew_flag_MST(cursor.getString(15));
				received_model.setDC_Invoice_MST(cursor.getString(16));
				received_model.setLOT_Number_MST(cursor.getString(17));
				received_model.setDoc_Type_MST(cursor.getString(18));
				received_model.setTransaction_Date_MST(cursor.getString(19));
				received_model.setCreated_Date_MST(cursor.getString(20));
				received_model.setRemarks_MST(cursor.getString(21));
				received_model.setAdjustments_MST(cursor.getString(22));
				received_model.setAdjustReason_MST(cursor.getString(23));
				received_model.setDisplay_Flag_MST(cursor.getString(24));
				received_model.setTask_Id(Integer.parseInt(cursor.getString(25)));
			} while (cursor.moveToNext());
		}
		if (cursor != null && !cursor.isClosed())
			cursor.close();
		System.out.println("counting records"+cursor.getCount());
		return received_model;
	 
	}
//	    find TABLE_MATERIAL_STOCK_TRANSACTIONS record in Database
	public Received_Material_Model find_MaterialID_SiteID_DisplayFlag_Material_Stk_Trans
	    (int material_id,int site_id, String display_flag) throws SQLException {
		SQLiteDatabase db = this.getWritableDatabase();
		Received_Material_Model received_model = new Received_Material_Model();
	    Cursor cursor = db.query(true, TABLE_MATERIAL_STOCK_TRANSACTIONS, new String[] {
	    		 COLUMN_MATERIAL_STOCK_TRANSACTIONS_ID,
                 COLUMN_MATERIAL_ID_MATL_STK_TRANS,
                 COLUMN_MATERIAL_NAME_MATL_STK_TRANS,
                 COLUMN_UNITS_MATL_STK_TRANS,
                 COLUMN_RATE_MATL_STK_TRANS,
                 COLUMN_RECEIVED_STOCK_MATL_STK_TRANS,
                 COLUMN_USED_MATL_STK_TRANS,
                 COLUMN_INDENT_MATL_STK_TRANS,
                 COLUMN_MATERIAL_REQ_BY_DATE_MATL_STK_TRANS,
                 COLUMN_CURRENT_STOCK_MATL_STK_TRANS,               
                 COLUMN_PROJECT_ID_MATL_STK_TRANS,
                 COLUMN_SITE_ID_MATL_STK_TRANS,
                 COLUMN_PARTY_ID_MATL_STK_TRANS,
                 COLUMN_ORG_ID_MATL_STK_TRANS,
                 COLUMN_SYNC_FLAG_MATL_STK_TRANS,
                 COLUMN_NEW_OR_OLD_FLAG_MATL_STK_TRANS,
                 COLUMN_DC_INVOICE_MATL_STK_TRANS,
                 COLUMN_LOT_NUMBER_MATL_STK_TRANS,
                 COLUMN_DOC_TYPE_MATL_STK_TRANS,
                 COLUMN_TRANSACTIONS_DATE_MATL_STK_TRANS,
                 COLUMN_CREATED_DATE_MATL_STK_TRANS,
                 COLUMN_REMARKS_MATL_STK_TRANS,
                 COLUMN_ADJUSTMENTS_MATL_STK_TRANS,
                 COLUMN_ADJUST_REASON_MATL_STK_TRANS,
                 COLUMN_DISPLAY_FLAG_MATL_STK_TRANS,
                 COLUMN_TASK_ID_MATL_STK_TRANS,
                 }, 
                 COLUMN_MATERIAL_ID_MATL_STK_TRANS + "=?" + " and "  +	 				                    		
                 COLUMN_SITE_ID_MATL_STK_TRANS + "=?"+ " and "  +	 				                    		
                         COLUMN_DISPLAY_FLAG_MATL_STK_TRANS + "=?", 
	                    new String[] {String.valueOf(material_id),String.valueOf(site_id), display_flag},
	                    null, null, null , null);
		if (cursor.moveToFirst()) {
			do {
				received_model.setMaterial_Stock_Transactions_ID(Integer.parseInt(cursor.getString(0)));
				received_model.setMaterial_ID_MST(Integer.parseInt(cursor.getString(1)));
				received_model.setMaterial_Name_MST(cursor.getString(2));
				received_model.setUnits_MST(cursor.getString(3));
				received_model.setRate_MST(cursor.getString(4));
				received_model.setReceived_Stock_MST(cursor.getString(5));
				received_model.setUsed_MST(cursor.getString(6));
				received_model.setIndent_MST(cursor.getString(7));
				received_model.setMaterial_Req_By_Date_MST(cursor.getString(8));
				received_model.setCurrent_Stock_MST(cursor.getString(9));
				received_model.setProject_ID_MST(Integer.parseInt(cursor.getString(10)));
				received_model.setSite_ID_MST(Integer.parseInt(cursor.getString(11)));
				received_model.setParty_ID_MST(Integer.parseInt(cursor.getString(12)));
				received_model.setOrg_ID_MST(Integer.parseInt(cursor.getString(13)));
				received_model.setSync_flag_MST(cursor.getString(14));
				received_model.setOldOrNew_flag_MST(cursor.getString(15));
				received_model.setDC_Invoice_MST(cursor.getString(16));
				received_model.setLOT_Number_MST(cursor.getString(17));
				received_model.setDoc_Type_MST(cursor.getString(18));
				received_model.setTransaction_Date_MST(cursor.getString(19));
				received_model.setCreated_Date_MST(cursor.getString(20));
				received_model.setRemarks_MST(cursor.getString(21));
				received_model.setAdjustments_MST(cursor.getString(22));
				received_model.setAdjustReason_MST(cursor.getString(23));
				received_model.setDisplay_Flag_MST(cursor.getString(24));
				received_model.setTask_Id(Integer.parseInt(cursor.getString(25)));
			} while (cursor.moveToNext());
		}
		if (cursor != null && !cursor.isClosed())
	            cursor.close();
		System.out.println("counting records"+cursor.getCount());
		return received_model;
	}
	    
//	    find TABLE_MATERIAL_STOCK_TRANSACTIONS record in Database
	public int countRows_MatchedOf_MaterialID_SiteID_Material_Stk_Trans(int material_id,int site_id) throws SQLException {
		SQLiteDatabase db = this.getWritableDatabase();
		Received_Material_Model received_model = new Received_Material_Model();
	    Cursor cursor = db.query(true, TABLE_MATERIAL_STOCK_TRANSACTIONS, new String[] {
	    		 COLUMN_MATERIAL_STOCK_TRANSACTIONS_ID,
                 COLUMN_MATERIAL_ID_MATL_STK_TRANS,
                 COLUMN_MATERIAL_NAME_MATL_STK_TRANS,
                 COLUMN_UNITS_MATL_STK_TRANS,
                 COLUMN_RATE_MATL_STK_TRANS,
                 COLUMN_RECEIVED_STOCK_MATL_STK_TRANS,
                 COLUMN_USED_MATL_STK_TRANS,
                 COLUMN_INDENT_MATL_STK_TRANS,
                 COLUMN_MATERIAL_REQ_BY_DATE_MATL_STK_TRANS,
                 COLUMN_CURRENT_STOCK_MATL_STK_TRANS,               
                 COLUMN_PROJECT_ID_MATL_STK_TRANS,
                 COLUMN_SITE_ID_MATL_STK_TRANS,
                 COLUMN_PARTY_ID_MATL_STK_TRANS,
                 COLUMN_ORG_ID_MATL_STK_TRANS,
                 COLUMN_SYNC_FLAG_MATL_STK_TRANS,
                 COLUMN_NEW_OR_OLD_FLAG_MATL_STK_TRANS,
                 COLUMN_DC_INVOICE_MATL_STK_TRANS,
                 COLUMN_LOT_NUMBER_MATL_STK_TRANS,
                 COLUMN_DOC_TYPE_MATL_STK_TRANS,
                 COLUMN_TRANSACTIONS_DATE_MATL_STK_TRANS,
                 COLUMN_CREATED_DATE_MATL_STK_TRANS,
                 COLUMN_REMARKS_MATL_STK_TRANS,
                 COLUMN_ADJUSTMENTS_MATL_STK_TRANS,
                 COLUMN_ADJUST_REASON_MATL_STK_TRANS,
                 COLUMN_DISPLAY_FLAG_MATL_STK_TRANS,
                 COLUMN_TASK_ID_MATL_STK_TRANS,
                 }, 
                 COLUMN_MATERIAL_ID_MATL_STK_TRANS + "=?" + " and "  +	 				                    		
                 COLUMN_SITE_ID_MATL_STK_TRANS + "=?", 
	                    new String[] {String.valueOf(material_id),String.valueOf(site_id)},
	                    null, null, null , null);
		if (cursor.moveToFirst()) {
			do {
				received_model.setMaterial_Stock_Transactions_ID(Integer.parseInt(cursor.getString(0)));
				received_model.setMaterial_ID_MST(Integer.parseInt(cursor.getString(1)));
				received_model.setMaterial_Name_MST(cursor.getString(2));
				received_model.setUnits_MST(cursor.getString(3));
				received_model.setRate_MST(cursor.getString(4));
				received_model.setReceived_Stock_MST(cursor.getString(5));
				received_model.setUsed_MST(cursor.getString(6));
				received_model.setIndent_MST(cursor.getString(7));
				received_model.setMaterial_Req_By_Date_MST(cursor.getString(8));
				received_model.setCurrent_Stock_MST(cursor.getString(9));
				received_model.setProject_ID_MST(Integer.parseInt(cursor.getString(10)));
				received_model.setSite_ID_MST(Integer.parseInt(cursor.getString(11)));
				received_model.setParty_ID_MST(Integer.parseInt(cursor.getString(12)));
				received_model.setOrg_ID_MST(Integer.parseInt(cursor.getString(13)));
				received_model.setSync_flag_MST(cursor.getString(14));
				received_model.setOldOrNew_flag_MST(cursor.getString(15));
				received_model.setDC_Invoice_MST(cursor.getString(16));
				received_model.setLOT_Number_MST(cursor.getString(17));
				received_model.setDoc_Type_MST(cursor.getString(18));
				received_model.setTransaction_Date_MST(cursor.getString(19));
				received_model.setCreated_Date_MST(cursor.getString(20));
				received_model.setRemarks_MST(cursor.getString(21));
				received_model.setAdjustments_MST(cursor.getString(22));
				received_model.setAdjustReason_MST(cursor.getString(23));
				received_model.setDisplay_Flag_MST(cursor.getString(24));
				received_model.setTask_Id(Integer.parseInt(cursor.getString(25)));
			} while (cursor.moveToNext());
		}
		if (cursor != null && !cursor.isClosed())
	            cursor.close();
		System.out.println("counting records"+cursor.getCount());
		return cursor.getCount();
	}
	 // Updating single MATERIAL_STOCK_TRANSACTIONS row
	public int Update_Material_Stk_TransRow(Received_Material_Model received_model) {
		SQLiteDatabase db = this.getWritableDatabase();
	    ContentValues values = new ContentValues();
	    values.put(COLUMN_MATERIAL_STOCK_TRANSACTIONS_ID, received_model.getMaterial_Stock_Transactions_ID());
	    values.put(COLUMN_MATERIAL_ID_MATL_STK_TRANS, received_model.getMaterial_ID_MST());
        values.put(COLUMN_MATERIAL_NAME_MATL_STK_TRANS, received_model.getMaterial_Name_MST());		      
        values.put(COLUMN_UNITS_MATL_STK_TRANS, received_model.getUnits_MST());  
        values.put(COLUMN_RATE_MATL_STK_TRANS, received_model.getRate_MST());		      
        values.put(COLUMN_RECEIVED_STOCK_MATL_STK_TRANS, received_model.getReceived_Stock_MST());  
        values.put(COLUMN_USED_MATL_STK_TRANS, received_model.getUsed_MST());		      
        values.put(COLUMN_INDENT_MATL_STK_TRANS, received_model.getIndent_MST());  
        values.put(COLUMN_MATERIAL_REQ_BY_DATE_MATL_STK_TRANS, received_model.getMaterial_Req_By_Date_MST());  
        values.put(COLUMN_CURRENT_STOCK_MATL_STK_TRANS, received_model.getCurrent_Stock_MST());	      
        values.put(COLUMN_PROJECT_ID_MATL_STK_TRANS, received_model.getProject_ID_MST());	
        values.put(COLUMN_SITE_ID_MATL_STK_TRANS, received_model.getSite_ID_MST());     
        values.put(COLUMN_PARTY_ID_MATL_STK_TRANS, received_model.getParty_ID_MST());  
        values.put(COLUMN_ORG_ID_MATL_STK_TRANS, received_model.getOrg_ID_MST());  
        values.put(COLUMN_SYNC_FLAG_MATL_STK_TRANS, received_model.getSync_flag_MST());  
        values.put(COLUMN_NEW_OR_OLD_FLAG_MATL_STK_TRANS, received_model.getOldOrNew_flag_MST());  
        values.put(COLUMN_DC_INVOICE_MATL_STK_TRANS, received_model.getDC_Invoice_MST());
        values.put(COLUMN_LOT_NUMBER_MATL_STK_TRANS, received_model.getLOT_Number_MST());
        values.put(COLUMN_DOC_TYPE_MATL_STK_TRANS, received_model.getDoc_Type_MST());  
        values.put(COLUMN_TRANSACTIONS_DATE_MATL_STK_TRANS, received_model.getTransaction_Date_MST());  
        values.put(COLUMN_CREATED_DATE_MATL_STK_TRANS, received_model.getCreated_Date_MST()); 
        values.put(COLUMN_REMARKS_MATL_STK_TRANS, received_model.getRemarks_MST()); 
        values.put(COLUMN_ADJUSTMENTS_MATL_STK_TRANS, received_model.getAdjustments_MST()); 
        values.put(COLUMN_ADJUST_REASON_MATL_STK_TRANS, received_model.getAdjustReason_MST()); 
        values.put(COLUMN_DISPLAY_FLAG_MATL_STK_TRANS, received_model.getDisplay_Flag_MST()); 
        values.put(COLUMN_TASK_ID_MATL_STK_TRANS, received_model.getTask_ID());
        System.out.println("syn flag aft update"+ received_model.getSync_flag_MST());
	    System.out.println("ssssssssssss"+received_model.getMaterial_Stock_Transactions_ID());

	    return db.update(TABLE_MATERIAL_STOCK_TRANSACTIONS, values, COLUMN_MATERIAL_STOCK_TRANSACTIONS_ID + " = ?",
	    new String[] { String.valueOf(received_model.getMaterial_Stock_Transactions_ID()) });
	}
 	public void add_MP_Supply_Record(Manpower_Model manpower_model) {
		// TODO Auto-generated method stub
		ContentValues values = new ContentValues();
		values.put(COLUMN_CONTRACT_PROJECT_ID_MP_SUPPLY, manpower_model.getContract_Project_Id_MP_SUP());
		values.put(COLUMN_CONTRACTOR_ID_MP_SUPPLY, manpower_model.getContractor_Id_MP_SUP());
		values.put(COLUMN_CONTRACTOR_NAME_MP_SUPPLY, manpower_model.getContractor_Name_MP_SUP());
		values.put(COLUMN_PRJ_ID_MP_SUPPLY, manpower_model.getPrj_Id_MP_SUP());
		values.put(COLUMN_SITE_ID_MP_SUPPLY, manpower_model.getSite_Id_MP_SUP());
		values.put(COLUMN_LABOUR_TYPE_ID_MP_SUPPLY, manpower_model.getLabourType_Id_MP_SUP());
		values.put(COLUMN_LABOUR_TYPE_NAME_MP_SUPPLY, manpower_model.getLabourType_Name_MP_SUP());
		values.put(COLUMN_ENTERED_QTY_MP_SUPPLY, manpower_model.getEntered_Qty_MP_SUP());
		values.put(COLUMN_TODAY_ENTERED_QTY_SUM_MP_SUPPLY, manpower_model.getTodayEntered_QtySum_MP_SUP());
		values.put(COLUMN_TOTAL_TILL_DATE_QTY_MP_SUPPLY, manpower_model.getTotalTillDate_Qty_MP_SUP());
		values.put(COLUMN_RATE_MP_SUPPLY, manpower_model.getRate_MP_SUP());
		values.put(COLUMN_TOTAL_BILLED_AMT_MP_SUPPLY, manpower_model.getTotalBilledAmt_MP_SUP());
		values.put(COLUMN_TOTAL_PAID_AMT_MP_SUPPLY, manpower_model.getTotalpaidAmt_MP_SUP());
		values.put(COLUMN_BALC_AMT_MP_SUPPLY, manpower_model.getBalance_Amt_MP_SUP());
		values.put(COLUMN_SYN_FLAG_MP_SUPPLY, manpower_model.getSyn_Flag_MP_SUP());
		values.put(COLUMN_CREATED_DATE_MP_SUPPLY, manpower_model.getCreated_Date_MP_SUP());
		values.put(COLUMN_TRANSACTION_DATE_MP_SUPPLY, manpower_model.getTransaction_Date_MP_SUP());
		values.put(COLUMN_DISPLAY_FLAG_MP_SUPPLY, manpower_model.getDisplay_Flag_MP_SUP());
		SQLiteDatabase db = this.getWritableDatabase();
		db.insert(TABLE_MANPOWER_SUPPLY_CONTRACT_MASTER, null, values);
		db.close();
	}
// 	    counting no of rows in attendance_detail table
	public int getRow_Count_MP_SUPPLY() {
		String countQuery = "SELECT  * FROM " + TABLE_MANPOWER_SUPPLY_CONTRACT_MASTER;
		SQLiteDatabase db = this.getReadableDatabase();
		Cursor cursor = db.rawQuery(countQuery, null);
		System.out.println("check count"+cursor.getCount());
		cursor.close();
		// return count
		return cursor.getCount();
	}
	public ArrayList<Manpower_Model> find_SiteID_DisplayFlag_OrderBY_ContractorID_MP_SUP_List(int site_id, String display_flag) throws SQLException {
		SQLiteDatabase db = this.getWritableDatabase();
		ArrayList<Manpower_Model> get_Supply_bySiteID = new ArrayList<Manpower_Model>();
		String orderby=COLUMN_CONTRACTOR_ID_MP_SUPPLY+","+COLUMN_LABOUR_TYPE_ID_MP_SUPPLY;
	    Cursor cursor = db.query(true, TABLE_MANPOWER_SUPPLY_CONTRACT_MASTER, new String[] {
	                    COLUMN_MANPOWER_SUPPLY_CONTRACT_MASTER_ID,
	                    COLUMN_CONTRACT_PROJECT_ID_MP_SUPPLY,
	                    COLUMN_CONTRACTOR_ID_MP_SUPPLY,
	                    COLUMN_CONTRACTOR_NAME_MP_SUPPLY,
	                    COLUMN_PRJ_ID_MP_SUPPLY,
	                    COLUMN_SITE_ID_MP_SUPPLY,
	                    COLUMN_LABOUR_TYPE_ID_MP_SUPPLY,
	                    COLUMN_LABOUR_TYPE_NAME_MP_SUPPLY,
	                    COLUMN_ENTERED_QTY_MP_SUPPLY,
	                    COLUMN_TODAY_ENTERED_QTY_SUM_MP_SUPPLY,
	                    COLUMN_TOTAL_TILL_DATE_QTY_MP_SUPPLY,
	                    COLUMN_RATE_MP_SUPPLY,	                   
	                    COLUMN_TOTAL_BILLED_AMT_MP_SUPPLY,
	                    COLUMN_TOTAL_PAID_AMT_MP_SUPPLY,
	                    COLUMN_BALC_AMT_MP_SUPPLY,	                  
	                    COLUMN_SYN_FLAG_MP_SUPPLY,
	                    COLUMN_CREATED_DATE_MP_SUPPLY,
	                    COLUMN_TRANSACTION_DATE_MP_SUPPLY,	                    
	                    COLUMN_DISPLAY_FLAG_MP_SUPPLY,},
	                    COLUMN_SITE_ID_MP_SUPPLY + "=?"+ " and "  +
	                    		COLUMN_DISPLAY_FLAG_MP_SUPPLY + "=?", 
	                    new String[] {String.valueOf(site_id),display_flag},
	                    null, null, orderby, null);
		if (cursor.moveToFirst()) {
			do {
				Manpower_Model manpower_model = new Manpower_Model();
				manpower_model.setManpower_Supply_Contract_Master_Id_MP_SUP(Integer.parseInt(cursor.getString(0)));
				manpower_model.setContract_Project_Id_MP_SUP(Integer.parseInt(cursor.getString(1)));
				manpower_model.setContractor_Id_MP_SUP(Integer.parseInt(cursor.getString(2)));
				manpower_model.setContractor_Name_MP_SUP(cursor.getString(3));
				manpower_model.setProj_Id_MP_SUP(Integer.parseInt(cursor.getString(4)));
				manpower_model.setSite_Id_MP_SUP(Integer.parseInt(cursor.getString(5)));
				manpower_model.setLabourType_Id_MP_SUP(Integer.parseInt(cursor.getString(6)));
				manpower_model.setLabourType_Name_MP_SUP(cursor.getString(7));
				manpower_model.setEntered_Qty_MP_SUP(cursor.getString(8));
				manpower_model.setTodayEntered_QtySum_MP_SUP(cursor.getString(9));
				manpower_model.setTotalTillDate_Qty_MP_SUP(cursor.getString(10));
				manpower_model.setRate_MP_SUP(cursor.getString(11));
				manpower_model.setTotalBilledAmt_MP_SUP(cursor.getString(12));
				manpower_model.setTotalPaidAmt_MP_SUP(cursor.getString(13));
				manpower_model.setBalance_Amt_MP_SUP(cursor.getString(14));
				manpower_model.setSyn_Flag_MP_SUP(cursor.getString(15));
				manpower_model.setCreated_Date_MP_SUP(cursor.getString(16));
				manpower_model.setTransaction_Date_MP_SUP(cursor.getString(17));
				manpower_model.setDisplay_Flag_MP_SUP(cursor.getString(18));
				get_Supply_bySiteID.add(manpower_model);
			} while (cursor.moveToNext());
		}
		if (cursor != null && !cursor.isClosed())
			cursor.close();
		System.out.println("db size of list"+get_Supply_bySiteID.size());
		return get_Supply_bySiteID;
	}
// 	   find contractor_id and get all matched rows in MP_SUPPLY
	public ArrayList<Manpower_Model> find_ContractorID_DisplayFlag_List_MP_SUP(int contractor_id,String display_flag) throws SQLException {
		SQLiteDatabase db = this.getWritableDatabase();
		ArrayList<Manpower_Model> contractor_summary = new ArrayList<Manpower_Model>();
	    Cursor cursor = db.query(true, TABLE_MANPOWER_SUPPLY_CONTRACT_MASTER, new String[] {
	    		COLUMN_MANPOWER_SUPPLY_CONTRACT_MASTER_ID,
	    		COLUMN_CONTRACT_PROJECT_ID_MP_SUPPLY,
                COLUMN_CONTRACTOR_ID_MP_SUPPLY,
                COLUMN_CONTRACTOR_NAME_MP_SUPPLY,
                COLUMN_PRJ_ID_MP_SUPPLY,
                COLUMN_SITE_ID_MP_SUPPLY,
                COLUMN_LABOUR_TYPE_ID_MP_SUPPLY,
                COLUMN_LABOUR_TYPE_NAME_MP_SUPPLY,
                COLUMN_ENTERED_QTY_MP_SUPPLY,
                COLUMN_TODAY_ENTERED_QTY_SUM_MP_SUPPLY,
                COLUMN_TOTAL_TILL_DATE_QTY_MP_SUPPLY,
                COLUMN_RATE_MP_SUPPLY,	                   
                COLUMN_TOTAL_BILLED_AMT_MP_SUPPLY,
                COLUMN_TOTAL_PAID_AMT_MP_SUPPLY,
                COLUMN_BALC_AMT_MP_SUPPLY,	                  
                COLUMN_SYN_FLAG_MP_SUPPLY,
                COLUMN_CREATED_DATE_MP_SUPPLY,
                COLUMN_TRANSACTION_DATE_MP_SUPPLY,	                    
                COLUMN_DISPLAY_FLAG_MP_SUPPLY,},
                COLUMN_CONTRACTOR_ID_MP_SUPPLY + "=?" + " and "  +
                COLUMN_DISPLAY_FLAG_MP_SUPPLY + "=?", 
	                    new String[] {String.valueOf(contractor_id),display_flag},
	                    null, null, null , null);
		if (cursor.moveToFirst()) {
			do {
				Manpower_Model manpower_model = new Manpower_Model();
				manpower_model.setManpower_Supply_Contract_Master_Id_MP_SUP(Integer.parseInt(cursor.getString(0)));
				manpower_model.setContract_Project_Id_MP_SUP(Integer.parseInt(cursor.getString(1)));
				manpower_model.setContractor_Id_MP_SUP(Integer.parseInt(cursor.getString(2)));
				manpower_model.setContractor_Name_MP_SUP(cursor.getString(3));
				manpower_model.setProj_Id_MP_SUP(Integer.parseInt(cursor.getString(4)));
				manpower_model.setSite_Id_MP_SUP(Integer.parseInt(cursor.getString(5)));
				manpower_model.setLabourType_Id_MP_SUP(Integer.parseInt(cursor.getString(6)));
				manpower_model.setLabourType_Name_MP_SUP(cursor.getString(7));
				manpower_model.setEntered_Qty_MP_SUP(cursor.getString(8));
				manpower_model.setTodayEntered_QtySum_MP_SUP(cursor.getString(9));
				manpower_model.setTotalTillDate_Qty_MP_SUP(cursor.getString(10));
				manpower_model.setRate_MP_SUP(cursor.getString(11));
				manpower_model.setTotalBilledAmt_MP_SUP(cursor.getString(12));
				manpower_model.setTotalPaidAmt_MP_SUP(cursor.getString(13));
				manpower_model.setBalance_Amt_MP_SUP(cursor.getString(14));
				manpower_model.setSyn_Flag_MP_SUP(cursor.getString(15));
				manpower_model.setCreated_Date_MP_SUP(cursor.getString(16));
				manpower_model.setTransaction_Date_MP_SUP(cursor.getString(17));
				manpower_model.setDisplay_Flag_MP_SUP(cursor.getString(18));
				contractor_summary.add(manpower_model);
			} while (cursor.moveToNext());
		}
		if (cursor != null && !cursor.isClosed())
	            cursor.close();
		System.out.println("db size of list"+contractor_summary.size());
		return contractor_summary;
	}
//	   find contractor_name and get all matched rows
	public ArrayList<Manpower_Model> find_SiteID_SynFlag_List_MP_SUP(int site_id,String syn_flag) throws SQLException {
		SQLiteDatabase db = this.getWritableDatabase();
		ArrayList<Manpower_Model> supply_list = new ArrayList<Manpower_Model>();
	    Cursor cursor = db.query(true, TABLE_MANPOWER_SUPPLY_CONTRACT_MASTER, new String[] {
			   COLUMN_MANPOWER_SUPPLY_CONTRACT_MASTER_ID, COLUMN_CONTRACT_PROJECT_ID_MP_SUPPLY,
               COLUMN_CONTRACTOR_ID_MP_SUPPLY,
               COLUMN_CONTRACTOR_NAME_MP_SUPPLY,
               COLUMN_PRJ_ID_MP_SUPPLY,
               COLUMN_SITE_ID_MP_SUPPLY,
               COLUMN_LABOUR_TYPE_ID_MP_SUPPLY,
               COLUMN_LABOUR_TYPE_NAME_MP_SUPPLY,
               COLUMN_ENTERED_QTY_MP_SUPPLY,
               COLUMN_TODAY_ENTERED_QTY_SUM_MP_SUPPLY,
               COLUMN_TOTAL_TILL_DATE_QTY_MP_SUPPLY,
               COLUMN_RATE_MP_SUPPLY,	                   
               COLUMN_TOTAL_BILLED_AMT_MP_SUPPLY,
               COLUMN_TOTAL_PAID_AMT_MP_SUPPLY,
               COLUMN_BALC_AMT_MP_SUPPLY,	                  
               COLUMN_SYN_FLAG_MP_SUPPLY,
               COLUMN_CREATED_DATE_MP_SUPPLY,
               COLUMN_TRANSACTION_DATE_MP_SUPPLY,	                    
               COLUMN_DISPLAY_FLAG_MP_SUPPLY,},
               COLUMN_SITE_ID_MP_SUPPLY + "=?" + " and "  +
            		   COLUMN_SYN_FLAG_MP_SUPPLY + "=?", 
	                    new String[] {String.valueOf(site_id),syn_flag},
	                    null, null, null , null);
		if (cursor.moveToFirst()) {
			do {
				Manpower_Model manpower_model = new Manpower_Model();
				manpower_model.setManpower_Supply_Contract_Master_Id_MP_SUP(Integer.parseInt(cursor.getString(0)));
				manpower_model.setContract_Project_Id_MP_SUP(Integer.parseInt(cursor.getString(1)));
				manpower_model.setContractor_Id_MP_SUP(Integer.parseInt(cursor.getString(2)));
				manpower_model.setContractor_Name_MP_SUP(cursor.getString(3));
				manpower_model.setProj_Id_MP_SUP(Integer.parseInt(cursor.getString(4)));
				manpower_model.setSite_Id_MP_SUP(Integer.parseInt(cursor.getString(5)));
				manpower_model.setLabourType_Id_MP_SUP(Integer.parseInt(cursor.getString(6)));
				manpower_model.setLabourType_Name_MP_SUP(cursor.getString(7));
				manpower_model.setEntered_Qty_MP_SUP(cursor.getString(8));
				manpower_model.setTodayEntered_QtySum_MP_SUP(cursor.getString(9));
				manpower_model.setTotalTillDate_Qty_MP_SUP(cursor.getString(10));
				manpower_model.setRate_MP_SUP(cursor.getString(11));
				manpower_model.setTotalBilledAmt_MP_SUP(cursor.getString(12));
				manpower_model.setTotalPaidAmt_MP_SUP(cursor.getString(13));
				manpower_model.setBalance_Amt_MP_SUP(cursor.getString(14));
				manpower_model.setSyn_Flag_MP_SUP(cursor.getString(15));
				manpower_model.setCreated_Date_MP_SUP(cursor.getString(16));
				manpower_model.setTransaction_Date_MP_SUP(cursor.getString(17));
				manpower_model.setDisplay_Flag_MP_SUP(cursor.getString(18));
				supply_list.add(manpower_model);
			} while (cursor.moveToNext());
		}
		if (cursor != null && !cursor.isClosed())
			cursor.close();
		System.out.println("db size of list"+supply_list.size());
		return supply_list;
	 
	}
//	   find contractor_name, labour_type_name, display_flag and get all matched rows
	public Manpower_Model find_ContractorName_LabourTypeName_DisplayFlag_MP_SUP_Table(String contractor_name,String labour_type_name,String display_flag) throws SQLException {
		SQLiteDatabase db = this.getWritableDatabase();
		Manpower_Model manpower_model = new Manpower_Model();
	    Cursor cursor = db.query(true, TABLE_MANPOWER_SUPPLY_CONTRACT_MASTER, new String[] {
	    	   COLUMN_MANPOWER_SUPPLY_CONTRACT_MASTER_ID,
	    	   COLUMN_CONTRACT_PROJECT_ID_MP_SUPPLY,
               COLUMN_CONTRACTOR_ID_MP_SUPPLY,
               COLUMN_CONTRACTOR_NAME_MP_SUPPLY,
               COLUMN_PRJ_ID_MP_SUPPLY,
               COLUMN_SITE_ID_MP_SUPPLY,
               COLUMN_LABOUR_TYPE_ID_MP_SUPPLY,
               COLUMN_LABOUR_TYPE_NAME_MP_SUPPLY,
               COLUMN_ENTERED_QTY_MP_SUPPLY,
               COLUMN_TODAY_ENTERED_QTY_SUM_MP_SUPPLY,
               COLUMN_TOTAL_TILL_DATE_QTY_MP_SUPPLY,
               COLUMN_RATE_MP_SUPPLY,	                   
               COLUMN_TOTAL_BILLED_AMT_MP_SUPPLY,
               COLUMN_TOTAL_PAID_AMT_MP_SUPPLY,
               COLUMN_BALC_AMT_MP_SUPPLY,	                  
               COLUMN_SYN_FLAG_MP_SUPPLY,
               COLUMN_CREATED_DATE_MP_SUPPLY,
               COLUMN_TRANSACTION_DATE_MP_SUPPLY,	                    
               COLUMN_DISPLAY_FLAG_MP_SUPPLY,},
               COLUMN_CONTRACTOR_NAME_MP_SUPPLY + "=?" + " and "  +
               COLUMN_LABOUR_TYPE_NAME_MP_SUPPLY + "=?"+ " and "  +
               COLUMN_DISPLAY_FLAG_MP_SUPPLY + "=?", 
	                    new String[] {contractor_name,labour_type_name,display_flag},
	                    null, null, null , null);
		if (cursor.moveToFirst()) {
			do {
				manpower_model.setManpower_Supply_Contract_Master_Id_MP_SUP(Integer.parseInt(cursor.getString(0)));
				manpower_model.setContract_Project_Id_MP_SUP(Integer.parseInt(cursor.getString(1)));
				manpower_model.setContractor_Id_MP_SUP(Integer.parseInt(cursor.getString(2)));
				manpower_model.setContractor_Name_MP_SUP(cursor.getString(3));
				manpower_model.setProj_Id_MP_SUP(Integer.parseInt(cursor.getString(4)));
				manpower_model.setSite_Id_MP_SUP(Integer.parseInt(cursor.getString(5)));
				manpower_model.setLabourType_Id_MP_SUP(Integer.parseInt(cursor.getString(6)));
				manpower_model.setLabourType_Name_MP_SUP(cursor.getString(7));
				manpower_model.setEntered_Qty_MP_SUP(cursor.getString(8));
				manpower_model.setTodayEntered_QtySum_MP_SUP(cursor.getString(9));
				manpower_model.setTotalTillDate_Qty_MP_SUP(cursor.getString(10));
				manpower_model.setRate_MP_SUP(cursor.getString(11));
				manpower_model.setTotalBilledAmt_MP_SUP(cursor.getString(12));
				manpower_model.setTotalPaidAmt_MP_SUP(cursor.getString(13));
				manpower_model.setBalance_Amt_MP_SUP(cursor.getString(14));
				manpower_model.setSyn_Flag_MP_SUP(cursor.getString(15));
				manpower_model.setCreated_Date_MP_SUP(cursor.getString(16));
				manpower_model.setTransaction_Date_MP_SUP(cursor.getString(17));
				manpower_model.setDisplay_Flag_MP_SUP(cursor.getString(18));
			} while (cursor.moveToNext());
		}
		if (cursor != null && !cursor.isClosed())
			cursor.close();
		return manpower_model;
	}
//	   find site_id,contractor_id,labour_type_id and get all matched rows
	public int CountRecords_Matched_SiteId_ContractorId_LabourTypeId_MP_SUPPLY_Table(int site_id,int contractor_id,int labour_type_id) throws SQLException {
		SQLiteDatabase db = this.getWritableDatabase();
		Manpower_Model manpower_model = new Manpower_Model();
	    Cursor cursor = db.query(true, TABLE_MANPOWER_SUPPLY_CONTRACT_MASTER, new String[] {
	    	 COLUMN_MANPOWER_SUPPLY_CONTRACT_MASTER_ID,
	    	 COLUMN_CONTRACT_PROJECT_ID_MP_SUPPLY,
             COLUMN_CONTRACTOR_ID_MP_SUPPLY,
             COLUMN_CONTRACTOR_NAME_MP_SUPPLY,
             COLUMN_PRJ_ID_MP_SUPPLY,
             COLUMN_SITE_ID_MP_SUPPLY,
             COLUMN_LABOUR_TYPE_ID_MP_SUPPLY,
             COLUMN_LABOUR_TYPE_NAME_MP_SUPPLY,
             COLUMN_ENTERED_QTY_MP_SUPPLY,
             COLUMN_TODAY_ENTERED_QTY_SUM_MP_SUPPLY,
             COLUMN_TOTAL_TILL_DATE_QTY_MP_SUPPLY,
             COLUMN_RATE_MP_SUPPLY,	                   
             COLUMN_TOTAL_BILLED_AMT_MP_SUPPLY,
             COLUMN_TOTAL_PAID_AMT_MP_SUPPLY,
             COLUMN_BALC_AMT_MP_SUPPLY,	                  
             COLUMN_SYN_FLAG_MP_SUPPLY,
             COLUMN_CREATED_DATE_MP_SUPPLY,
             COLUMN_TRANSACTION_DATE_MP_SUPPLY,	                    
             COLUMN_DISPLAY_FLAG_MP_SUPPLY,},
             COLUMN_SITE_ID_MP_SUPPLY + "=?" + " and "  +
             COLUMN_CONTRACTOR_ID_MP_SUPPLY + "=?"+ " and "  +
             COLUMN_LABOUR_TYPE_ID_MP_SUPPLY + "=?", 
	                    new String[] { String.valueOf(site_id),String.valueOf(contractor_id),String.valueOf(labour_type_id)},
	                    null, null, null , null);
		if (cursor.moveToFirst()) {
			do {
				manpower_model.setManpower_Supply_Contract_Master_Id_MP_SUP(Integer.parseInt(cursor.getString(0)));
				manpower_model.setContract_Project_Id_MP_SUP(Integer.parseInt(cursor.getString(1)));
				manpower_model.setContractor_Id_MP_SUP(Integer.parseInt(cursor.getString(2)));
				manpower_model.setContractor_Name_MP_SUP(cursor.getString(3));
				manpower_model.setProj_Id_MP_SUP(Integer.parseInt(cursor.getString(4)));
				manpower_model.setSite_Id_MP_SUP(Integer.parseInt(cursor.getString(5)));
				manpower_model.setLabourType_Id_MP_SUP(Integer.parseInt(cursor.getString(6)));
				manpower_model.setLabourType_Name_MP_SUP(cursor.getString(7));
				manpower_model.setEntered_Qty_MP_SUP(cursor.getString(8));
				manpower_model.setTodayEntered_QtySum_MP_SUP(cursor.getString(9));
				manpower_model.setTotalTillDate_Qty_MP_SUP(cursor.getString(10));
				manpower_model.setRate_MP_SUP(cursor.getString(11));
				manpower_model.setTotalBilledAmt_MP_SUP(cursor.getString(12));
				manpower_model.setTotalPaidAmt_MP_SUP(cursor.getString(13));
				manpower_model.setBalance_Amt_MP_SUP(cursor.getString(14));
				manpower_model.setSyn_Flag_MP_SUP(cursor.getString(15));
				manpower_model.setCreated_Date_MP_SUP(cursor.getString(16));
				manpower_model.setTransaction_Date_MP_SUP(cursor.getString(17));
				manpower_model.setDisplay_Flag_MP_SUP(cursor.getString(18));
			} while (cursor.moveToNext());
		}
		if (cursor != null && !cursor.isClosed())
			cursor.close();
		return cursor.getCount();
	}
//	   find site_id,contractor_id,labour_type_id and get all matched rows
	public Manpower_Model find_SiteId_ContractorId_LabourTypeId_Displayflag_MP_SUPPLY_Table(int site_id,int contractor_id,int labour_type_id,String display_flag) throws SQLException {
		SQLiteDatabase db = this.getWritableDatabase();
		Manpower_Model manpower_model = new Manpower_Model();
	    Cursor cursor = db.query(true, TABLE_MANPOWER_SUPPLY_CONTRACT_MASTER, new String[] {
	    	  COLUMN_MANPOWER_SUPPLY_CONTRACT_MASTER_ID,
	    	  COLUMN_CONTRACT_PROJECT_ID_MP_SUPPLY,
              COLUMN_CONTRACTOR_ID_MP_SUPPLY,
              COLUMN_CONTRACTOR_NAME_MP_SUPPLY,
              COLUMN_PRJ_ID_MP_SUPPLY,
              COLUMN_SITE_ID_MP_SUPPLY,
              COLUMN_LABOUR_TYPE_ID_MP_SUPPLY,
              COLUMN_LABOUR_TYPE_NAME_MP_SUPPLY,
              COLUMN_ENTERED_QTY_MP_SUPPLY,
              COLUMN_TODAY_ENTERED_QTY_SUM_MP_SUPPLY,
              COLUMN_TOTAL_TILL_DATE_QTY_MP_SUPPLY,
              COLUMN_RATE_MP_SUPPLY,	                   
              COLUMN_TOTAL_BILLED_AMT_MP_SUPPLY,
              COLUMN_TOTAL_PAID_AMT_MP_SUPPLY,
              COLUMN_BALC_AMT_MP_SUPPLY,	                  
              COLUMN_SYN_FLAG_MP_SUPPLY,
              COLUMN_CREATED_DATE_MP_SUPPLY,
              COLUMN_TRANSACTION_DATE_MP_SUPPLY,	                    
              COLUMN_DISPLAY_FLAG_MP_SUPPLY,},
              COLUMN_SITE_ID_MP_SUPPLY + "=?" + " and "  +
              COLUMN_CONTRACTOR_ID_MP_SUPPLY + "=?"+ " and "  +
              COLUMN_LABOUR_TYPE_ID_MP_SUPPLY + "=?"+ " and "  +
              COLUMN_DISPLAY_FLAG_MP_SUPPLY + "=?", 
	          new String[] {String.valueOf(site_id),String.valueOf(contractor_id),String.valueOf(labour_type_id),display_flag},
	                    null, null, null , null);
		if (cursor.moveToFirst()) {
			do {
				manpower_model.setManpower_Supply_Contract_Master_Id_MP_SUP(Integer.parseInt(cursor.getString(0)));
				manpower_model.setContract_Project_Id_MP_SUP(Integer.parseInt(cursor.getString(1)));
				manpower_model.setContractor_Id_MP_SUP(Integer.parseInt(cursor.getString(2)));
				manpower_model.setContractor_Name_MP_SUP(cursor.getString(3));
				manpower_model.setProj_Id_MP_SUP(Integer.parseInt(cursor.getString(4)));
				manpower_model.setSite_Id_MP_SUP(Integer.parseInt(cursor.getString(5)));
				manpower_model.setLabourType_Id_MP_SUP(Integer.parseInt(cursor.getString(6)));
				manpower_model.setLabourType_Name_MP_SUP(cursor.getString(7));
				manpower_model.setEntered_Qty_MP_SUP(cursor.getString(8));
				manpower_model.setTodayEntered_QtySum_MP_SUP(cursor.getString(9));
				manpower_model.setTotalTillDate_Qty_MP_SUP(cursor.getString(10));
				manpower_model.setRate_MP_SUP(cursor.getString(11));
				manpower_model.setTotalBilledAmt_MP_SUP(cursor.getString(12));
				manpower_model.setTotalPaidAmt_MP_SUP(cursor.getString(13));
				manpower_model.setBalance_Amt_MP_SUP(cursor.getString(14));
				manpower_model.setSyn_Flag_MP_SUP(cursor.getString(15));
				manpower_model.setCreated_Date_MP_SUP(cursor.getString(16));
				manpower_model.setTransaction_Date_MP_SUP(cursor.getString(17));
				manpower_model.setDisplay_Flag_MP_SUP(cursor.getString(18));
			} while (cursor.moveToNext());
		}
		if (cursor != null && !cursor.isClosed())
	            cursor.close();
		return manpower_model;
	}
//	   find site_id,contractor_id,labour_type_id and get all matched rows
	public ArrayList<Manpower_Model> find_ContractorId_LabourTypeId_SynFlag_MP_SUPPLY_Table(int contractor_id,int labour_type_id,String syn_flag) throws SQLException {
		SQLiteDatabase db = this.getWritableDatabase();
		ArrayList<Manpower_Model> supply_list = new ArrayList<Manpower_Model>();
	    Cursor cursor = db.query(true, TABLE_MANPOWER_SUPPLY_CONTRACT_MASTER, new String[] {
	    	 COLUMN_MANPOWER_SUPPLY_CONTRACT_MASTER_ID,
	    	 COLUMN_CONTRACT_PROJECT_ID_MP_SUPPLY,
             COLUMN_CONTRACTOR_ID_MP_SUPPLY,
             COLUMN_CONTRACTOR_NAME_MP_SUPPLY,
             COLUMN_PRJ_ID_MP_SUPPLY,
             COLUMN_SITE_ID_MP_SUPPLY,
             COLUMN_LABOUR_TYPE_ID_MP_SUPPLY,
             COLUMN_LABOUR_TYPE_NAME_MP_SUPPLY,
             COLUMN_ENTERED_QTY_MP_SUPPLY,
             COLUMN_TODAY_ENTERED_QTY_SUM_MP_SUPPLY,
             COLUMN_TOTAL_TILL_DATE_QTY_MP_SUPPLY,
             COLUMN_RATE_MP_SUPPLY,	                   
             COLUMN_TOTAL_BILLED_AMT_MP_SUPPLY,
             COLUMN_TOTAL_PAID_AMT_MP_SUPPLY,
             COLUMN_BALC_AMT_MP_SUPPLY,	                  
             COLUMN_SYN_FLAG_MP_SUPPLY,
             COLUMN_CREATED_DATE_MP_SUPPLY,
             COLUMN_TRANSACTION_DATE_MP_SUPPLY,	                    
             COLUMN_DISPLAY_FLAG_MP_SUPPLY,},
             COLUMN_CONTRACTOR_ID_MP_SUPPLY + "=?" + " and "  +            
             COLUMN_LABOUR_TYPE_ID_MP_SUPPLY + "=?"+ " and "  +
             COLUMN_SYN_FLAG_MP_SUPPLY + "=?", 
	          new String[] {String.valueOf(contractor_id),String.valueOf(labour_type_id),syn_flag},
	                    null, null, null , null);
		if (cursor.moveToFirst()) {
			do {
				Manpower_Model manpower_model = new Manpower_Model();
				manpower_model.setManpower_Supply_Contract_Master_Id_MP_SUP(Integer.parseInt(cursor.getString(0)));
				manpower_model.setContract_Project_Id_MP_SUP(Integer.parseInt(cursor.getString(1)));
				manpower_model.setContractor_Id_MP_SUP(Integer.parseInt(cursor.getString(2)));
				manpower_model.setContractor_Name_MP_SUP(cursor.getString(3));
				manpower_model.setProj_Id_MP_SUP(Integer.parseInt(cursor.getString(4)));
				manpower_model.setSite_Id_MP_SUP(Integer.parseInt(cursor.getString(5)));
				manpower_model.setLabourType_Id_MP_SUP(Integer.parseInt(cursor.getString(6)));
				manpower_model.setLabourType_Name_MP_SUP(cursor.getString(7));
				manpower_model.setEntered_Qty_MP_SUP(cursor.getString(8));
				manpower_model.setTodayEntered_QtySum_MP_SUP(cursor.getString(9));
				manpower_model.setTotalTillDate_Qty_MP_SUP(cursor.getString(10));
				manpower_model.setRate_MP_SUP(cursor.getString(11));
				manpower_model.setTotalBilledAmt_MP_SUP(cursor.getString(12));
				manpower_model.setTotalPaidAmt_MP_SUP(cursor.getString(13));
				manpower_model.setBalance_Amt_MP_SUP(cursor.getString(14));
				manpower_model.setSyn_Flag_MP_SUP(cursor.getString(15));
				manpower_model.setCreated_Date_MP_SUP(cursor.getString(16));
				manpower_model.setTransaction_Date_MP_SUP(cursor.getString(17));
				manpower_model.setDisplay_Flag_MP_SUP(cursor.getString(18));
			} while (cursor.moveToNext());
		}
		if (cursor != null && !cursor.isClosed())
	            cursor.close();
		return supply_list;
	}
	public int Update_MP_Supply_Row(Manpower_Model manpower_model) {
		 SQLiteDatabase db = this.getWritableDatabase();
		 ContentValues values = new ContentValues();
		 values.put(COLUMN_MANPOWER_SUPPLY_CONTRACT_MASTER_ID, manpower_model.getManpower_Supply_Contract_Master_Id_MP_SUP());
		 values.put(COLUMN_CONTRACT_PROJECT_ID_MP_SUPPLY, manpower_model.getContract_Project_Id_MP_SUP());
		 values.put(COLUMN_CONTRACTOR_ID_MP_SUPPLY, manpower_model.getContractor_Id_MP_SUP());
         values.put(COLUMN_CONTRACTOR_NAME_MP_SUPPLY, manpower_model.getContractor_Name_MP_SUP());
		 values.put(COLUMN_PRJ_ID_MP_SUPPLY, manpower_model.getPrj_Id_MP_SUP());
		 values.put(COLUMN_SITE_ID_MP_SUPPLY, manpower_model.getSite_Id_MP_SUP());
         values.put(COLUMN_LABOUR_TYPE_ID_MP_SUPPLY, manpower_model.getLabourType_Id_MP_SUP());
		 values.put(COLUMN_LABOUR_TYPE_NAME_MP_SUPPLY, manpower_model.getLabourType_Name_MP_SUP());
		 values.put(COLUMN_ENTERED_QTY_MP_SUPPLY, manpower_model.getEntered_Qty_MP_SUP());
         values.put(COLUMN_TODAY_ENTERED_QTY_SUM_MP_SUPPLY, manpower_model.getTodayEntered_QtySum_MP_SUP());
       	 values.put(COLUMN_TOTAL_TILL_DATE_QTY_MP_SUPPLY, manpower_model.getTotalTillDate_Qty_MP_SUP());
       	 values.put(COLUMN_RATE_MP_SUPPLY, manpower_model.getRate_MP_SUP());
       	 values.put(COLUMN_TOTAL_BILLED_AMT_MP_SUPPLY, manpower_model.getTotalBilledAmt_MP_SUP());
       	 values.put(COLUMN_TOTAL_PAID_AMT_MP_SUPPLY, manpower_model.getTotalpaidAmt_MP_SUP());
       	 values.put(COLUMN_BALC_AMT_MP_SUPPLY, manpower_model.getBalance_Amt_MP_SUP());
       	 values.put(COLUMN_SYN_FLAG_MP_SUPPLY, manpower_model.getSyn_Flag_MP_SUP());
       	 values.put(COLUMN_CREATED_DATE_MP_SUPPLY, manpower_model.getCreated_Date_MP_SUP());
       	 values.put(COLUMN_TRANSACTION_DATE_MP_SUPPLY, manpower_model.getTransaction_Date_MP_SUP());
       	 values.put(COLUMN_DISPLAY_FLAG_MP_SUPPLY, manpower_model.getDisplay_Flag_MP_SUP());
	    // updating row
	    return db.update(TABLE_MANPOWER_SUPPLY_CONTRACT_MASTER, values, COLUMN_MANPOWER_SUPPLY_CONTRACT_MASTER_ID + " = ?",
	    new String[] { String.valueOf(manpower_model.getManpower_Supply_Contract_Master_Id_MP_SUP()) });	
	   
	}
	public List<Project_Images> getAllImages(String projectId) {
		List<Project_Images> projectImages = new ArrayList<Project_Images>();
		SQLiteDatabase db = this.getWritableDatabase();
		Cursor cursor = db.rawQuery("SELECT * FROM " + TABLE_PROJECT_IMAGES + " WHERE " + COLUMN_PROJECT_ID_PRJ_IMAGES + "=? AND " + COLUMN_SYN_FLAG_PRJ_IMAGES + "=?", new String[]{projectId,"N"});
		if(cursor.getCount()>0){
			if (cursor.moveToFirst()) {
				do {





					String IMAGES_CRAETION_DATE_PRJ_IMAGES;
					Project_Images project_images = new Project_Images();
					project_images.setPROJECT_IMAGES_ID(Integer.parseInt(cursor.getString(0)));
					project_images.setPROJECT_ID_PRJ_IMAGES(cursor.getString(1));
					project_images.setSITE_ID_PRJ_IMAGES(cursor.getString(2));
					project_images.setPRJ_EST_WORKMASTER_ID_PRJ_IMAGES(cursor.getString(3));
					project_images.setPRJ_EST_WORK_LOCATION_NAME_PRJ_IMAGES(cursor.getString(4));
					project_images.setPATH_PRJ_IMAGES(cursor.getString(5));
					project_images.setSYN_FLAG_PRJ_IMAGES(cursor.getString(6));
					project_images.setIMAGES_CRAETION_DATE_PRJ_IMAGES(cursor.getString(7));
					projectImages.add(project_images);
				} while (cursor.moveToNext());
			}
		}
		db.close();
		return projectImages;
	}
	public int UpdateImages_Row(Project_Images project_images) {
		SQLiteDatabase db = this.getWritableDatabase();

		ContentValues values = new ContentValues();
		values.put(COLUMN_PROJECT_IMAGES_ID, project_images.getPROJECT_IMAGES_ID());
		values.put(COLUMN_SYN_FLAG_PRJ_IMAGES, "Y");
		// updating row
		return db.update(TABLE_PROJECT_IMAGES, values, COLUMN_PROJECT_IMAGES_ID + " = ?",
				new String[] { String.valueOf(project_images.getPROJECT_IMAGES_ID()) });

	}

	// 	    CRUD METHODS FOR Manpower-Contract
// 	    inserting records in Manpower-Contract table
	public void add_MP_Contract_Record(Manpower_Model manpower_model) {
		// TODO Auto-generated method stub
		ContentValues values = new ContentValues();
 		      
		values.put(COLUMN_LAB_CONTRACT_WORK_MASTER_ID_MP_CONTRACT, manpower_model.getLab_Contract_Work_MasterId_MP_CONT());
		values.put(COLUMN_CONTRACT_PROJECT_ID_MP_CONRACT, manpower_model.getContract_Project_Id_MP_CONT());
		values.put(COLUMN_CONTRACTOR_ID_MP_CONTRACT, manpower_model.getContractor_Id_MP_CONT());
		values.put(COLUMN_CONTRACTOR_NAME_MP_CONTRACT, manpower_model.getContractor_Name_MP_CONT());
		values.put(COLUMN_PRJ_ID_MP_CONTRACT, manpower_model.getProj_Id_MP_CONT());
		values.put(COLUMN_SITE_ID_MP_CONTRACT, manpower_model.getSite_Id_MP_CONT());
		values.put(COLUMN_WORK_LOCATION_ID_MP_CONTRACT, manpower_model.getWork_Loc_Id_MP_CONT());
		values.put(COLUMN_WORK_LOCATION_NAME_MP_CONTRACT, manpower_model.getWork_Loc_Name_MP_CONT());
		values.put(COLUMN_TOTAL_QTY_MP_CONTRACT, manpower_model.getTotal_Qty_MP_CONT());
		values.put(COLUMN_QTY_UNITS_MP_CONTRACT, manpower_model.getQty_Units_MP_CONT());
		values.put(COLUMN_START_DATE_MP_CONTRACT, manpower_model.getStartDate_MP_CONT());
		values.put(COLUMN_SCOPE_OF_WORK_MP_CONTRACT, manpower_model.getScope_Of_Work_MP_CONT());
		values.put(COLUMN_QTY_COMPLETED_MP_CONTRACT, manpower_model.getQty_Completed_MP_CONT());
		values.put(COLUMN_LAB_CONT_WRK_RATE_MP_CONTRACT, manpower_model.getLab_Cont_Work_Rate_MP_CONT());
		values.put(COLUMN_PAID_AMT_MP_CONTRACT, manpower_model.getPaidAmt_MP_CONT());
		values.put(COLUMN_BALC_AMT_MP_CONTRACT, manpower_model.getBalance_Amt_MP_CONT());
		values.put(COLUMN_SYN_FLAG_MP_CONTRACT, manpower_model.getSyn_Flag_MP_CONT());
		values.put(COLUMN_CREATED_DATE_MP_CONTRACT, manpower_model.getCreated_Date_MP_CONT());
		values.put(COLUMN_DISPLAY_FLAG_MP_CONTRACT, manpower_model.getDisplay_Flag_MP_CONT());
		SQLiteDatabase db = this.getWritableDatabase();
		db.insert(TABLE_MANPOWER_LABOUR_CONTRACT_WORK_MASTER, null, values);
		db.close();
	}
// 	    counting no of rows in MP_contract table
	public int getRow_Count_MP_CONTRACT() {
		String countQuery = "SELECT  * FROM " + TABLE_MANPOWER_LABOUR_CONTRACT_WORK_MASTER;
		SQLiteDatabase db = this.getReadableDatabase();
		Cursor cursor = db.rawQuery(countQuery, null);
		System.out.println("check count"+cursor.getCount());
		cursor.close();
		// return count
		return cursor.getCount();
	}
	public ArrayList<Manpower_Model> find_SiteID_DisplayFlag_OrderBY_Work_LocID_MP_CONTRACT_List(int site_id, String display_flag) throws SQLException {
		SQLiteDatabase db = this.getWritableDatabase();
		ArrayList<Manpower_Model> get_Contract_bySiteID = new ArrayList<Manpower_Model>();
		String orderby=COLUMN_CONTRACTOR_ID_MP_CONTRACT+","+COLUMN_WORK_LOCATION_ID_MP_CONTRACT;
	    Cursor cursor = db.query(true, TABLE_MANPOWER_LABOUR_CONTRACT_WORK_MASTER, new String[] {
	                    COLUMN_MANPOWER_LABOUR_CONTRACT_WORK_MASTER_ID,
	                    COLUMN_LAB_CONTRACT_WORK_MASTER_ID_MP_CONTRACT,
	                    COLUMN_CONTRACT_PROJECT_ID_MP_CONRACT,
	                    COLUMN_CONTRACTOR_ID_MP_CONTRACT,
	                    COLUMN_CONTRACTOR_NAME_MP_CONTRACT,
	                    COLUMN_PRJ_ID_MP_CONTRACT,
	                    COLUMN_SITE_ID_MP_CONTRACT,
	                    COLUMN_WORK_LOCATION_ID_MP_CONTRACT,
	                    COLUMN_WORK_LOCATION_NAME_MP_CONTRACT,
	                    COLUMN_TOTAL_QTY_MP_CONTRACT,
	                    COLUMN_QTY_UNITS_MP_CONTRACT,
	                    COLUMN_START_DATE_MP_CONTRACT,
	                    COLUMN_SCOPE_OF_WORK_MP_CONTRACT,	                   
	                    COLUMN_QTY_COMPLETED_MP_CONTRACT,
	                    COLUMN_LAB_CONT_WRK_RATE_MP_CONTRACT,
	                    COLUMN_PAID_AMT_MP_CONTRACT,	                  
	                    COLUMN_BALC_AMT_MP_CONTRACT,
	                    COLUMN_SYN_FLAG_MP_CONTRACT,
	                    COLUMN_CREATED_DATE_MP_CONTRACT,	                                 
	                    COLUMN_DISPLAY_FLAG_MP_CONTRACT,},
	                    COLUMN_SITE_ID_MP_CONTRACT + "=?"+ " and "  +
	                    		COLUMN_DISPLAY_FLAG_MP_CONTRACT + "=?", 
	                    new String[] {String.valueOf(site_id),display_flag},
	                    null, null, orderby , null);
	  
	   
		if (cursor.moveToFirst()) {
			do {
				Manpower_Model manpower_model = new Manpower_Model();
				manpower_model.setManpower_Labour_Contract_Work_Master_Id_MP_CONT(Integer.parseInt(cursor.getString(0)));
				manpower_model.setLab_Contract_Work_MasterId_MP_CONT(Integer.parseInt(cursor.getString(1)));
				manpower_model.setContract_Project_Id_MP_CONT(Integer.parseInt(cursor.getString(2)));
				manpower_model.setContractor_Id_MP_CONT(Integer.parseInt(cursor.getString(3)));
				manpower_model.setContractor_Name_MP_CONT(cursor.getString(4));
				manpower_model.setProj_Id_MP_CONT(Integer.parseInt(cursor.getString(5)));
				manpower_model.setSite_Id_MP_CONT(Integer.parseInt(cursor.getString(6)));
				manpower_model.setWork_Loc_Id_MP_CONT(Integer.parseInt(cursor.getString(7)));
				manpower_model.setWork_Loc_Name_MP_CONT(cursor.getString(8));
				manpower_model.setTotal_Qty_MP_CONT(cursor.getString(9));
				manpower_model.setQty_Units_MP_CONT(cursor.getString(10));
				manpower_model.setStartDate_MP_CONT(cursor.getString(11));
				manpower_model.setScope_Of_Work_MP_CONT(cursor.getString(12));
				manpower_model.setQty_Completed_MP_CONT(cursor.getString(13));
				manpower_model.setLab_Cont_Work_Rate_MP_CONT(cursor.getString(14));
				manpower_model.setPaidAmt_MP_CONT(cursor.getString(15));
				manpower_model.setBalance_Amt_MP_CONT(cursor.getString(16));
				manpower_model.setSyn_Flag_MP_CONT(cursor.getString(17));
				manpower_model.setCreated_Date_MP_CONT(cursor.getString(18));
				manpower_model.setDisplay_Flag_MP_CONT(cursor.getString(19));
	           		get_Contract_bySiteID.add(manpower_model);
			} while (cursor.moveToNext());
		}
		if (cursor != null && !cursor.isClosed()) {
			cursor.close();
		}
		System.out.println("db size of list"+get_Contract_bySiteID.size());
		return get_Contract_bySiteID;
	}
// 	   find Contractor_ID and get all matched rows in MP_Contract
	public ArrayList<Manpower_Model> find_ContractorID_DisplayFlag_List_MP_CONT(int contractor_ID,String display_flag) throws SQLException {
		SQLiteDatabase db = this.getWritableDatabase();
		ArrayList<Manpower_Model> contractor_Name_summary = new ArrayList<Manpower_Model>();
	    Cursor cursor = db.query(true, TABLE_MANPOWER_LABOUR_CONTRACT_WORK_MASTER, new String[] {
	    		 COLUMN_MANPOWER_LABOUR_CONTRACT_WORK_MASTER_ID,
	    		 COLUMN_LAB_CONTRACT_WORK_MASTER_ID_MP_CONTRACT,
                 COLUMN_CONTRACT_PROJECT_ID_MP_CONRACT,
                 COLUMN_CONTRACTOR_ID_MP_CONTRACT,
                 COLUMN_CONTRACTOR_NAME_MP_CONTRACT,
                 COLUMN_PRJ_ID_MP_CONTRACT,
                 COLUMN_SITE_ID_MP_CONTRACT,
                 COLUMN_WORK_LOCATION_ID_MP_CONTRACT,
                 COLUMN_WORK_LOCATION_NAME_MP_CONTRACT,
                 COLUMN_TOTAL_QTY_MP_CONTRACT,
                 COLUMN_QTY_UNITS_MP_CONTRACT,
                 COLUMN_START_DATE_MP_CONTRACT,
                 COLUMN_SCOPE_OF_WORK_MP_CONTRACT,	                   
                 COLUMN_QTY_COMPLETED_MP_CONTRACT,
                 COLUMN_LAB_CONT_WRK_RATE_MP_CONTRACT,
                 COLUMN_PAID_AMT_MP_CONTRACT,	                  
                 COLUMN_BALC_AMT_MP_CONTRACT,
                 COLUMN_SYN_FLAG_MP_CONTRACT,
                 COLUMN_CREATED_DATE_MP_CONTRACT,                 	                    
                 COLUMN_DISPLAY_FLAG_MP_CONTRACT,},
                 COLUMN_CONTRACTOR_ID_MP_CONTRACT + "=?" + " and "  + COLUMN_DISPLAY_FLAG_MP_CONTRACT + "=?",
	              new String[] {String.valueOf(contractor_ID),display_flag},
	              null, null, null , null);
		if (cursor.moveToFirst()) {
			do {
				Manpower_Model manpower_model = new Manpower_Model();
				manpower_model.setManpower_Labour_Contract_Work_Master_Id_MP_CONT(Integer.parseInt(cursor.getString(0)));
				manpower_model.setLab_Contract_Work_MasterId_MP_CONT(Integer.parseInt(cursor.getString(1)));
				manpower_model.setContract_Project_Id_MP_CONT(Integer.parseInt(cursor.getString(2)));
				manpower_model.setContractor_Id_MP_CONT(Integer.parseInt(cursor.getString(3)));
				manpower_model.setContractor_Name_MP_CONT(cursor.getString(4));
				manpower_model.setProj_Id_MP_CONT(Integer.parseInt(cursor.getString(5)));
				manpower_model.setSite_Id_MP_CONT(Integer.parseInt(cursor.getString(6)));
				manpower_model.setWork_Loc_Id_MP_CONT(Integer.parseInt(cursor.getString(7)));
				manpower_model.setWork_Loc_Name_MP_CONT(cursor.getString(8));
				manpower_model.setTotal_Qty_MP_CONT(cursor.getString(9));
				manpower_model.setQty_Units_MP_CONT(cursor.getString(10));
				manpower_model.setStartDate_MP_CONT(cursor.getString(11));
				manpower_model.setScope_Of_Work_MP_CONT(cursor.getString(12));
				manpower_model.setQty_Completed_MP_CONT(cursor.getString(13));
				manpower_model.setLab_Cont_Work_Rate_MP_CONT(cursor.getString(14));
				manpower_model.setPaidAmt_MP_CONT(cursor.getString(15));
				manpower_model.setBalance_Amt_MP_CONT(cursor.getString(16));
				manpower_model.setSyn_Flag_MP_CONT(cursor.getString(17));
				manpower_model.setCreated_Date_MP_CONT(cursor.getString(18));
				manpower_model.setDisplay_Flag_MP_CONT(cursor.getString(19));
				contractor_Name_summary.add(manpower_model);
			} while (cursor.moveToNext());
		}
		if (cursor != null && !cursor.isClosed()) {
			cursor.close();
	           
		}
		System.out.println("db size of contract_summary list"+contractor_Name_summary.size());
		return contractor_Name_summary;
	}
//	   find site_id,lab_contract_work_master_id,work_loc_id,contractor_id, and get all matched rows
	public int CountRecords_Matched_SiteId_LabContWorkMasterId_WorkLocId_ContractorId_MP_Contract_Table(int site_id,int labour_contract_work_master_id,int work_loc_id,int contractor_id) throws SQLException {
	    	SQLiteDatabase db = this.getWritableDatabase();
	    	 
	    	Manpower_Model manpower_model = new Manpower_Model();
	    Cursor cursor = db.query(true, TABLE_MANPOWER_LABOUR_CONTRACT_WORK_MASTER, new String[] {
	    		COLUMN_MANPOWER_LABOUR_CONTRACT_WORK_MASTER_ID,
	    		 COLUMN_LAB_CONTRACT_WORK_MASTER_ID_MP_CONTRACT,
                COLUMN_CONTRACT_PROJECT_ID_MP_CONRACT,
                COLUMN_CONTRACTOR_ID_MP_CONTRACT,
                COLUMN_CONTRACTOR_NAME_MP_CONTRACT,
                COLUMN_PRJ_ID_MP_CONTRACT,
                COLUMN_SITE_ID_MP_CONTRACT,
                COLUMN_WORK_LOCATION_ID_MP_CONTRACT,
                COLUMN_WORK_LOCATION_NAME_MP_CONTRACT,
                COLUMN_TOTAL_QTY_MP_CONTRACT,
                COLUMN_QTY_UNITS_MP_CONTRACT,
                COLUMN_START_DATE_MP_CONTRACT,
                COLUMN_SCOPE_OF_WORK_MP_CONTRACT,	                   
                COLUMN_QTY_COMPLETED_MP_CONTRACT,
                COLUMN_LAB_CONT_WRK_RATE_MP_CONTRACT,
                COLUMN_PAID_AMT_MP_CONTRACT,	                  
                COLUMN_BALC_AMT_MP_CONTRACT,
                COLUMN_SYN_FLAG_MP_CONTRACT,
                COLUMN_CREATED_DATE_MP_CONTRACT,                 	                    
                COLUMN_DISPLAY_FLAG_MP_CONTRACT,}, 	
            
                COLUMN_SITE_ID_MP_CONTRACT + "=?" + " and "  +
            COLUMN_LAB_CONTRACT_WORK_MASTER_ID_MP_CONTRACT + "=?"+ " and "  +
            COLUMN_WORK_LOCATION_ID_MP_CONTRACT + "=?"+ " and "  +
            COLUMN_CONTRACTOR_ID_MP_CONTRACT + "=?", 
	                    new String[] { String.valueOf(site_id),String.valueOf(labour_contract_work_master_id),String.valueOf(work_loc_id),String.valueOf(contractor_id)},
	                    null, null, null , null);
	 
	 
	        if (cursor.moveToFirst()) {
	            do {
	            	
	            	manpower_model.setManpower_Labour_Contract_Work_Master_Id_MP_CONT(Integer.parseInt(cursor.getString(0)));
	            	manpower_model.setLab_Contract_Work_MasterId_MP_CONT(Integer.parseInt(cursor.getString(1)));
	            	manpower_model.setContract_Project_Id_MP_CONT(Integer.parseInt(cursor.getString(2)));
	            	manpower_model.setContractor_Id_MP_CONT(Integer.parseInt(cursor.getString(3)));
	            	manpower_model.setContractor_Name_MP_CONT(cursor.getString(4));
	            	manpower_model.setProj_Id_MP_CONT(Integer.parseInt(cursor.getString(5)));	            	
	           		manpower_model.setSite_Id_MP_CONT(Integer.parseInt(cursor.getString(6)));
	           		manpower_model.setWork_Loc_Id_MP_CONT(Integer.parseInt(cursor.getString(7)));
	           		manpower_model.setWork_Loc_Name_MP_CONT(cursor.getString(8));
	           		manpower_model.setTotal_Qty_MP_CONT(cursor.getString(9));
	           		manpower_model.setQty_Units_MP_CONT(cursor.getString(10));
	           		manpower_model.setStartDate_MP_CONT(cursor.getString(11));
	           		manpower_model.setScope_Of_Work_MP_CONT(cursor.getString(12));	           		
	           		manpower_model.setQty_Completed_MP_CONT(cursor.getString(13));
	           		manpower_model.setLab_Cont_Work_Rate_MP_CONT(cursor.getString(14));
	           		manpower_model.setPaidAmt_MP_CONT(cursor.getString(15));	  
	           		manpower_model.setBalance_Amt_MP_CONT(cursor.getString(16));	  
	           		manpower_model.setSyn_Flag_MP_CONT(cursor.getString(17));
	           		manpower_model.setCreated_Date_MP_CONT(cursor.getString(18));           			           		
	           		manpower_model.setDisplay_Flag_MP_CONT(cursor.getString(19));	           		
	           		
	            } while (cursor.moveToNext());
	        }
	        if (cursor != null && !cursor.isClosed()) {
	            cursor.close();
	           
	        }
	       
	        return cursor.getCount();	 
	 
	    }
//	   find site_id,lab_contract_work_master_id,work_loc_id,contractor_id, and get all matched rows
	  public Manpower_Model find_SiteId_LabContWorkMasterId_WorkLocId_ContractorId_MP_Contract_Table(int site_id,int labour_contract_work_master_id,int work_loc_id,int contractor_id, String display_flag) throws SQLException {
	    	SQLiteDatabase db = this.getWritableDatabase();
	    	 
	    	Manpower_Model manpower_model = new Manpower_Model();
	    Cursor cursor = db.query(true, TABLE_MANPOWER_LABOUR_CONTRACT_WORK_MASTER, new String[] {
	    		COLUMN_MANPOWER_LABOUR_CONTRACT_WORK_MASTER_ID,
	    		 COLUMN_LAB_CONTRACT_WORK_MASTER_ID_MP_CONTRACT,
               COLUMN_CONTRACT_PROJECT_ID_MP_CONRACT,
               COLUMN_CONTRACTOR_ID_MP_CONTRACT,
               COLUMN_CONTRACTOR_NAME_MP_CONTRACT,
               COLUMN_PRJ_ID_MP_CONTRACT,
               COLUMN_SITE_ID_MP_CONTRACT,
               COLUMN_WORK_LOCATION_ID_MP_CONTRACT,
               COLUMN_WORK_LOCATION_NAME_MP_CONTRACT,
               COLUMN_TOTAL_QTY_MP_CONTRACT,
               COLUMN_QTY_UNITS_MP_CONTRACT,
               COLUMN_START_DATE_MP_CONTRACT,
               COLUMN_SCOPE_OF_WORK_MP_CONTRACT,	                   
               COLUMN_QTY_COMPLETED_MP_CONTRACT,
               COLUMN_LAB_CONT_WRK_RATE_MP_CONTRACT,
               COLUMN_PAID_AMT_MP_CONTRACT,	                  
               COLUMN_BALC_AMT_MP_CONTRACT,
               COLUMN_SYN_FLAG_MP_CONTRACT,
               COLUMN_CREATED_DATE_MP_CONTRACT,                 	                    
               COLUMN_DISPLAY_FLAG_MP_CONTRACT,}, 	
           
               COLUMN_SITE_ID_MP_CONTRACT + "=?" + " and "  +
           COLUMN_LAB_CONTRACT_WORK_MASTER_ID_MP_CONTRACT + "=?"+ " and "  +
           COLUMN_WORK_LOCATION_ID_MP_CONTRACT + "=?"+ " and "  +
           COLUMN_CONTRACTOR_ID_MP_CONTRACT + "=?"+ " and "  +
           COLUMN_DISPLAY_FLAG_MP_CONTRACT + "=?", 
	                    new String[] { String.valueOf(site_id),String.valueOf(labour_contract_work_master_id),
	    		String.valueOf(work_loc_id),String.valueOf(contractor_id),display_flag},
	                    null, null, null , null);
	 
	 
	        if (cursor.moveToFirst()) {
	            do {
	            	
	            	manpower_model.setManpower_Labour_Contract_Work_Master_Id_MP_CONT(Integer.parseInt(cursor.getString(0)));
	            	manpower_model.setLab_Contract_Work_MasterId_MP_CONT(Integer.parseInt(cursor.getString(1)));
	            	manpower_model.setContract_Project_Id_MP_CONT(Integer.parseInt(cursor.getString(2)));
	            	manpower_model.setContractor_Id_MP_CONT(Integer.parseInt(cursor.getString(3)));
	            	manpower_model.setContractor_Name_MP_CONT(cursor.getString(4));
	            	manpower_model.setProj_Id_MP_CONT(Integer.parseInt(cursor.getString(5)));	            	
	           		manpower_model.setSite_Id_MP_CONT(Integer.parseInt(cursor.getString(6)));
	           		manpower_model.setWork_Loc_Id_MP_CONT(Integer.parseInt(cursor.getString(7)));
	           		manpower_model.setWork_Loc_Name_MP_CONT(cursor.getString(8));
	           		manpower_model.setTotal_Qty_MP_CONT(cursor.getString(9));
	           		manpower_model.setQty_Units_MP_CONT(cursor.getString(10));
	           		manpower_model.setStartDate_MP_CONT(cursor.getString(11));
	           		manpower_model.setScope_Of_Work_MP_CONT(cursor.getString(12));	           		
	           		manpower_model.setQty_Completed_MP_CONT(cursor.getString(13));
	           		manpower_model.setLab_Cont_Work_Rate_MP_CONT(cursor.getString(14));
	           		manpower_model.setPaidAmt_MP_CONT(cursor.getString(15));	  
	           		manpower_model.setBalance_Amt_MP_CONT(cursor.getString(16));	  
	           		manpower_model.setSyn_Flag_MP_CONT(cursor.getString(17));
	           		manpower_model.setCreated_Date_MP_CONT(cursor.getString(18));           			           		
	           		manpower_model.setDisplay_Flag_MP_CONT(cursor.getString(19));	           		
	           		
	            } while (cursor.moveToNext());
	        }
	        if (cursor != null && !cursor.isClosed()) {
	            cursor.close();
	           
	        }
	       
	        return manpower_model;	 
	 
	    }
	// Updating single MP_Contract row
	    public int Update_MP_Contract_Row(Manpower_Model manpower_model) {
	    SQLiteDatabase db = this.getWritableDatabase();

	    ContentValues values = new ContentValues();
	   values.put(COLUMN_MANPOWER_LABOUR_CONTRACT_WORK_MASTER_ID, manpower_model.getManpower_Labour_Contract_Work_Master_Id_MP_CONT());
	   values.put(COLUMN_LAB_CONTRACT_WORK_MASTER_ID_MP_CONTRACT, manpower_model.getLab_Contract_Work_MasterId_MP_CONT());
		values.put(COLUMN_CONTRACT_PROJECT_ID_MP_CONRACT, manpower_model.getContract_Project_Id_MP_CONT());
		values.put(COLUMN_CONTRACTOR_ID_MP_CONTRACT, manpower_model.getContractor_Id_MP_CONT());
        values.put(COLUMN_CONTRACTOR_NAME_MP_CONTRACT, manpower_model.getContractor_Name_MP_CONT());
        values.put(COLUMN_PRJ_ID_MP_CONTRACT, manpower_model.getProj_Id_MP_CONT());		 		     
        values.put(COLUMN_SITE_ID_MP_CONTRACT, manpower_model.getSite_Id_MP_CONT());
        values.put(COLUMN_WORK_LOCATION_ID_MP_CONTRACT, manpower_model.getWork_Loc_Id_MP_CONT());		 		      
        values.put(COLUMN_WORK_LOCATION_NAME_MP_CONTRACT, manpower_model.getWork_Loc_Name_MP_CONT());
        values.put(COLUMN_TOTAL_QTY_MP_CONTRACT, manpower_model.getTotal_Qty_MP_CONT());
        values.put(COLUMN_QTY_UNITS_MP_CONTRACT, manpower_model.getQty_Units_MP_CONT());
        values.put(COLUMN_START_DATE_MP_CONTRACT, manpower_model.getStartDate_MP_CONT());
        values.put(COLUMN_SCOPE_OF_WORK_MP_CONTRACT, manpower_model.getScope_Of_Work_MP_CONT());
        values.put(COLUMN_QTY_COMPLETED_MP_CONTRACT, manpower_model.getQty_Completed_MP_CONT());
        values.put(COLUMN_LAB_CONT_WRK_RATE_MP_CONTRACT, manpower_model.getLab_Cont_Work_Rate_MP_CONT());
        values.put(COLUMN_PAID_AMT_MP_CONTRACT, manpower_model.getPaidAmt_MP_CONT());
        values.put(COLUMN_BALC_AMT_MP_CONTRACT, manpower_model.getBalance_Amt_MP_CONT());
        values.put(COLUMN_SYN_FLAG_MP_CONTRACT, manpower_model.getSyn_Flag_MP_CONT());
        values.put(COLUMN_CREATED_DATE_MP_CONTRACT, manpower_model.getCreated_Date_MP_CONT()); 		       
        values.put(COLUMN_DISPLAY_FLAG_MP_CONTRACT, manpower_model.getDisplay_Flag_MP_CONT());
     
	    // updating row
	    return db.update(TABLE_MANPOWER_LABOUR_CONTRACT_WORK_MASTER, values, COLUMN_MANPOWER_LABOUR_CONTRACT_WORK_MASTER_ID + " = ?",
	    new String[] { String.valueOf(manpower_model.getManpower_Labour_Contract_Work_Master_Id_MP_CONT()) });	
	   
	    }

//	 	    CRUD METHODS FOR EXPENSE_INCOME_TABLE
//	 	    inserting records in EXPENSE_INCOME_TABLE
	 	    public void add_Exp_Income_Record(
	 	    		Expense_Income_Model expense_model) {
	 			// TODO Auto-generated method stub
	 			 ContentValues values = new ContentValues();
	 			 
		 			values.put(COLUMN_ACCOUNT_NAME_EXP_INCOME, expense_model.getAccount());
		 			values.put(COLUMN_CURRENT_BALANCE_INCOME, expense_model.getCurrentBalance());
		 		    values.put(COLUMN_AMOUNT_TYPE_EXP_INCOME, expense_model.getAmount_Type());
	 		        values.put(COLUMN_CATEGORY_EXP_INCOME, expense_model.getCategory());
	 		        values.put(COLUMN_SUB_CATEGORY_EXP_INCOME, expense_model.getSub_Category());
	 		        values.put(COLUMN_DATE_EXP_INCOME, expense_model.getDate());		 		     
	 		        values.put(COLUMN_TIME_EXP_INCOME, expense_model.getTime());
	 		        values.put(COLUMN_AMOUNT_EXP_INCOME, expense_model.getAmount());		 		      
	 		        values.put(COLUMN_PAYER_EXP_INCOME, expense_model.getPayer());
	 		        values.put(COLUMN_PAYMETHOD_EXP_INCOME, expense_model.getPay_Method());
	 		        values.put(COLUMN_REF_CHEQUE_NO_EXP_INCOME, expense_model.getCheck_No());
	 		        values.put(COLUMN_CHEQUE_STATUS_EXP_INCOME, expense_model.getCheck_Status());
	 		        values.put(COLUMN_DESCRIPTION_EXP_INCOME, expense_model.getDescription());
	 		        values.put(COLUMN_IMAGES_EXP_INCOME, expense_model.getImage());
	 		        values.put(COLUMN_TAX_EXP_INCOME, expense_model.getTax());
	 		      
	 		      System.out.println("category item is"+expense_model.getCategory());
	 		        
	 		        SQLiteDatabase db = this.getWritableDatabase();
	 		        
	 		        db.insert(TABLE_EXP_INCOME, null, values);
	 		      
	 		        db.close();
	 		}
//	 	    counting no of rows in income_expense table
	 		 public int getExp_IncomeTable_Row_Count() {  
	 		        String countQuery = "SELECT  * FROM " + TABLE_EXP_INCOME;  
	 		      
	 		        SQLiteDatabase db = this.getReadableDatabase();  
	 		        Cursor cursor = db.rawQuery(countQuery, null);  
	 		     
	 		        System.out.println("check count"+cursor.getCount());

	 		        cursor.close();  
	 		      
	 		        // return count  
	 		        return cursor.getCount();  
	 		    }  
	 		// Getting All income_expense and adding to arrylist
	 	    public List<Expense_Income_Model> getAll_Exp_Income_List() {
	 	    	List<Expense_Income_Model> exp_Income_list = new ArrayList<Expense_Income_Model>();
	 	    	// Select All Query
	 	        String selectQuery = "SELECT  * FROM " + TABLE_EXP_INCOME;
	 	     
	 	        SQLiteDatabase db = this.getWritableDatabase();
	 	        Cursor cursor = db.rawQuery(selectQuery, null);
	 	     
	 	        // looping through all rows and adding to list
	 	        if (cursor.moveToFirst()) {
	 	            do {
	 	            	Expense_Income_Model expense_model = new Expense_Income_Model();
	 	            	expense_model.setExp_Income_Id(Integer.parseInt(cursor.getString(0)));
	 	            	expense_model.setAccount(cursor.getString(1));
	 	            	expense_model.setCurrentBalance(cursor.getString(2));
	 	            	expense_model.setAmount_Type(cursor.getString(3));	 	            	
	 	            	expense_model.setCategory(cursor.getString(4));
	 	            	expense_model.setSub_Category(cursor.getString(5));
	 	            	expense_model.setDate(cursor.getString(6));		 	            	
	 	       	        expense_model.setTime(cursor.getString(7));
	 	       	        expense_model.setAmount(cursor.getString(8));		 	       	       
	 	       	        expense_model.setPayer(cursor.getString(9));
	 	       	        expense_model.setPay_Method(cursor.getString(10));
	 	       	        expense_model.setCheck_No(cursor.getString(11));
	 	       	        expense_model.setCheck_Status(cursor.getString(12));
	 	       	        expense_model.setDescription(cursor.getString(13));
	 	       	        expense_model.setImage(cursor.getString(14));
	 	       	        expense_model.setTax(cursor.getString(15));
	 	                // Adding MATERIAL to list
	 	       	    exp_Income_list.add(expense_model);
	 	            } while (cursor.moveToNext());
	 	        }
	 	       // close inserting data from database
	 	 	  db.close();
	 	        // return exp_Income list
	 	        return exp_Income_list;
	 	    }
//			find records which r matched with  site_id
		 	   public Expense_Income_Model find_Exp_Inc_ID_IncomeExp(int Exp_Inc_ID) throws SQLException {
		 	   		    SQLiteDatabase db = this.getWritableDatabase();
		 	   		    	 
		 	   		    Expense_Income_Model expense_model = new Expense_Income_Model(); 	   		    	
		 	   		    Cursor cursor = db.query(true, TABLE_EXP_INCOME, new String[] {
		 	   		    				COLUMN_EXP_INCOME_ID,
		 	   		    				COLUMN_ACCOUNT_NAME_EXP_INCOME,
		 	   		    				COLUMN_CURRENT_BALANCE_INCOME,
		 	   		    				COLUMN_AMOUNT_TYPE_EXP_INCOME,
		 	   		    				COLUMN_CATEGORY_EXP_INCOME,	 
		 	   		    				COLUMN_SUB_CATEGORY_EXP_INCOME,
		 	   		    				COLUMN_DATE_EXP_INCOME,
		 	   		    				COLUMN_TIME_EXP_INCOME,
		 	   		    				COLUMN_AMOUNT_EXP_INCOME,
		 	   		    				COLUMN_PAYER_EXP_INCOME,
		 	   		    				COLUMN_PAYMETHOD_EXP_INCOME,
		 	   		    				COLUMN_REF_CHEQUE_NO_EXP_INCOME,
		 	   		    				COLUMN_CHEQUE_STATUS_EXP_INCOME,
		 	   		    				COLUMN_DESCRIPTION_EXP_INCOME,
		 	   		    				COLUMN_IMAGES_EXP_INCOME,
		 	   		    				COLUMN_TAX_EXP_INCOME,
		 	   		                   }, 	 	   		                	 				                    		
		 	   		                   COLUMN_EXP_INCOME_ID + "=?", 
		 	   		                    new String[] {String.valueOf(Exp_Inc_ID)},
		 	   		                    null, null, null , null);
		 	   		 
		 	   		 
		 	   		        if (cursor.moveToFirst()) {
		 	   		            do {
		 	   		            	
		 	   		            expense_model.setExp_Income_Id(Integer.parseInt(cursor.getString(0)));
			 	            	expense_model.setAccount(cursor.getString(1));
			 	            	expense_model.setCurrentBalance(cursor.getString(2));
			 	            	expense_model.setAmount_Type(cursor.getString(3));	 	            	
			 	            	expense_model.setCategory(cursor.getString(4));
			 	            	expense_model.setSub_Category(cursor.getString(5));
			 	            	expense_model.setDate(cursor.getString(6));		 	            	
			 	       	        expense_model.setTime(cursor.getString(7));
			 	       	        expense_model.setAmount(cursor.getString(8));		 	       	       
			 	       	        expense_model.setPayer(cursor.getString(9));
			 	       	        expense_model.setPay_Method(cursor.getString(10));
			 	       	        expense_model.setCheck_No(cursor.getString(11));
			 	       	        expense_model.setCheck_Status(cursor.getString(12));
			 	       	        expense_model.setDescription(cursor.getString(13));
			 	       	        expense_model.setImage(cursor.getString(14));
			 	       	        expense_model.setTax(cursor.getString(15));
			 	            
		 	   		           
		 	   		            } while (cursor.moveToNext());
		 	   		        }
		 	   		        if (cursor != null && !cursor.isClosed()) {
		 	   		            cursor.close();
		 	   		       
		 	   		        }
		 	   		        System.out.println("counting records"+cursor.getCount());
		 	   		        return expense_model;	 
		 	   		 
		 	   		    }

		 // Updating  exp_income row
	public int Update_Exp_Income_Row(Expense_Income_Model expense_model) {
		    SQLiteDatabase db = this.getWritableDatabase();

		    ContentValues values = new ContentValues();
			    values.put(COLUMN_EXP_INCOME_ID, expense_model.getExp_Income_Id());
			    values.put(COLUMN_ACCOUNT_NAME_EXP_INCOME, expense_model.getAccount());
	 			values.put(COLUMN_CURRENT_BALANCE_INCOME, expense_model.getCurrentBalance());
	 		    values.put(COLUMN_AMOUNT_TYPE_EXP_INCOME, expense_model.getAmount_Type());
			    values.put(COLUMN_CATEGORY_EXP_INCOME, expense_model.getCategory());
		        values.put(COLUMN_SUB_CATEGORY_EXP_INCOME, expense_model.getSub_Category());
		        values.put(COLUMN_DATE_EXP_INCOME, expense_model.getDate());		 		     
		        values.put(COLUMN_TIME_EXP_INCOME, expense_model.getTime());
		        values.put(COLUMN_AMOUNT_EXP_INCOME, expense_model.getAmount());		 		      
		        values.put(COLUMN_PAYER_EXP_INCOME, expense_model.getPayer());
		        values.put(COLUMN_PAYMETHOD_EXP_INCOME, expense_model.getPay_Method());
		        values.put(COLUMN_REF_CHEQUE_NO_EXP_INCOME, expense_model.getCheck_No());
		        values.put(COLUMN_CHEQUE_STATUS_EXP_INCOME, expense_model.getCheck_Status());
		        values.put(COLUMN_DESCRIPTION_EXP_INCOME, expense_model.getDescription());
		        values.put(COLUMN_IMAGES_EXP_INCOME, expense_model.getImage());
		        values.put(COLUMN_TAX_EXP_INCOME, expense_model.getTax());
		    System.out.println("ssssssssssss"+expense_model.getExp_Income_Id());
		    // updating row
		    return db.update(TABLE_EXP_INCOME, values, COLUMN_EXP_INCOME_ID + " = ?",
		    new String[] { String.valueOf(expense_model.getExp_Income_Id()) });	
		   
		    } 
//CRUD METHODS FOR EXPENSE_EXPENSE_TABLE
//inserting records in EXPENSE_EXPENSE table
	public void add_Exp_Expense_Record(Expense_Expense_Model expense_expense_model) {
	 			// TODO Auto-generated method stub
	 			 ContentValues values = new ContentValues();
	 			 
	 		      
	 		        values.put(COLUMN_CATEGORY_EXP_EXPENSE, expense_expense_model.getCategory_Exp_Expense());
	 		        values.put(COLUMN_SUB_CATEGORY_EXP_EXPENSE, expense_expense_model.getSub_Category_Exp_Expense());
	 		        values.put(COLUMN_DATE_EXP_EXPENSE, expense_expense_model.getDate_Exp_Expense());		 		     
	 		        values.put(COLUMN_TIME_EXP_EXPENSE, expense_expense_model.getTime_Exp_Expense());
	 		        values.put(COLUMN_AMOUNT_EXP_EXPENSE, expense_expense_model.getAmount_Exp_Expense());		 		      
	 		        values.put(COLUMN_PAYEE_EXP_EXPENSE, expense_expense_model.getPayee_Exp_Expense());
	 		        values.put(COLUMN_PAYMETHOD_EXP_EXPENSE, expense_expense_model.getPay_Method_Exp_Expense());
	 		        values.put(COLUMN_REF_CHEQUE_NO_EXP_EXPENSE, expense_expense_model.getCheck_No_Exp_Expense());
	 		       values.put(COLUMN_CHEQUE_STATUS_EXP_EXPENSE, expense_expense_model.getCheck_Status_Exp_Expense());
	 		        values.put(COLUMN_DESCRIPTION_EXP_EXPENSE, expense_expense_model.getDescription_Exp_Expense());
	 		        values.put(COLUMN_IMAGES_EXP_EXPENSE, expense_expense_model.getImage_Exp_Expense());
	 		        values.put(COLUMN_TAX_EXP_EXPENSE, expense_expense_model.getTax_Exp_Expense());
	 		      
	 		      System.out.println("category item is"+expense_expense_model.getCategory_Exp_Expense());
	 		        
	 		        SQLiteDatabase db = this.getWritableDatabase();
	 		        
	 		        db.insert(TABLE_EXP_EXPENSE, null, values);
	 		      
	 		        db.close();
	 		}
//counting no of rows in expense_expense table
	public int getExp_ExpenseTable_Row_Count() {
	 		        String countQuery = "SELECT  * FROM " + TABLE_EXP_EXPENSE;  
	 		      
	 		        SQLiteDatabase db = this.getReadableDatabase();  
	 		        Cursor cursor = db.rawQuery(countQuery, null);  
	 		     
	 		        System.out.println("check count"+cursor.getCount());

	 		        cursor.close();  
	 		     
	 		        // return count  
	 		        return cursor.getCount();  
	 		    }  
// Getting All expense_expense and adding to arrylist
	public List<Expense_Expense_Model> getAll_Exp_Expense_List() {
	 	    	List<Expense_Expense_Model> exp_Expense_list = new ArrayList<Expense_Expense_Model>();
	 	    	// Select All Query
	 	        String selectQuery = "SELECT  * FROM " + TABLE_EXP_EXPENSE;
	 	     
	 	        SQLiteDatabase db = this.getWritableDatabase();
	 	        Cursor cursor = db.rawQuery(selectQuery, null);
	 	     
	 	        // looping through all rows and adding to list
	 	        if (cursor.moveToFirst()) {
	 	            do {
	 	            	Expense_Expense_Model exp_expense_model = new Expense_Expense_Model();
	 	            	exp_expense_model.setExp_Expense_Id(Integer.parseInt(cursor.getString(0)));
	 	            	exp_expense_model.setCategory_Exp_Expense(cursor.getString(1));
	 	            	exp_expense_model.setSub_Category_Exp_Expense(cursor.getString(2));
	 	            	exp_expense_model.setDate_Exp_Expense(cursor.getString(3));		 	            	
	 	       	        exp_expense_model.setTime_Exp_Expense(cursor.getString(4));
	 	       	        exp_expense_model.setAmount_Exp_Expense(cursor.getString(5));		 	       	       
	 	       	        exp_expense_model.setPayee_Exp_Expense(cursor.getString(6));
	 	       	        exp_expense_model.setPay_Method_Exp_Expense(cursor.getString(7));
	 	       	        exp_expense_model.setCheck_No_Exp_Expense(cursor.getString(8));
	 	       	        exp_expense_model.setCheck_Status_Exp_Expense(cursor.getString(9));
	 	       	        exp_expense_model.setDescription_Exp_Expense(cursor.getString(10));
	 	       	        exp_expense_model.setImage_Exp_Expense(cursor.getString(11));
	 	       	        exp_expense_model.setTax_Exp_Expense(cursor.getString(12));
	 	                // Adding expense to list
	 	       	    exp_Expense_list.add(exp_expense_model);
	 	            } while (cursor.moveToNext());
	 	        }
	 	       cursor.close();
	 	     
	 	       
	 	        // return exp_Income list
	 	        return exp_Expense_list;
	 	    }
// Updting  expense expense row
    public int Update_Exp_Expense_Row(Expense_Expense_Model exp_expense_model) {
		    SQLiteDatabase db = this.getWritableDatabase();

		    ContentValues values = new ContentValues();
		    values.put(COLUMN_EXP_EXPENSE_ID, exp_expense_model.getExp_Expense_Id());
		    values.put(COLUMN_CATEGORY_EXP_INCOME, exp_expense_model.getCategory_Exp_Expense());
		        values.put(COLUMN_SUB_CATEGORY_EXP_INCOME, exp_expense_model.getSub_Category_Exp_Expense());
		        values.put(COLUMN_DATE_EXP_INCOME, exp_expense_model.getDate_Exp_Expense());		 		     
		        values.put(COLUMN_TIME_EXP_INCOME, exp_expense_model.getTime_Exp_Expense());
		        values.put(COLUMN_AMOUNT_EXP_INCOME, exp_expense_model.getAmount_Exp_Expense());		 		      
		        values.put(COLUMN_PAYER_EXP_INCOME, exp_expense_model.getPayee_Exp_Expense());
		        values.put(COLUMN_PAYMETHOD_EXP_INCOME, exp_expense_model.getPay_Method_Exp_Expense());
		        values.put(COLUMN_REF_CHEQUE_NO_EXP_INCOME, exp_expense_model.getCheck_No_Exp_Expense());
		        values.put(COLUMN_CHEQUE_STATUS_EXP_INCOME, exp_expense_model.getCheck_Status_Exp_Expense());
		        values.put(COLUMN_DESCRIPTION_EXP_INCOME, exp_expense_model.getDescription_Exp_Expense());
		        values.put(COLUMN_IMAGES_EXP_INCOME, exp_expense_model.getImage_Exp_Expense());
		        values.put(COLUMN_TAX_EXP_INCOME, exp_expense_model.getTax_Exp_Expense());
		    System.out.println("ssssssssssss"+exp_expense_model.getExp_Expense_Id());
		    // updating row
		    return db.update(TABLE_EXP_EXPENSE, values, COLUMN_EXP_EXPENSE_ID+ " = ?",
		    new String[] { String.valueOf(exp_expense_model.getExp_Expense_Id()) });	
		   
		    } 
//CRUD METHODS FOR EXPENSE_INDent_TABLE
//inserting records in EXPENSE_INDent_TABLE
	public void add_Exp_Indent_Record(Expense_Indent_Model expense_indent_model) {
	 			// TODO Auto-generated method stub
	 			 ContentValues values = new ContentValues();
	 			 
	 		      
	 		        values.put(COLUMN_CATEGORY_EXP_INDENT, expense_indent_model.getCategory_Exp_Indent());
	 		        values.put(COLUMN_SUB_CATEGORY_EXP_INDENT, expense_indent_model.getSub_Category_Exp_Indent());
	 		        values.put(COLUMN_DATE_EXP_INDENT, expense_indent_model.getDate_Exp_Indent());		 		     
	 		        values.put(COLUMN_TIME_EXP_INDENT, expense_indent_model.getTime_Exp_Indent());
	 		        values.put(COLUMN_AMOUNT_EXP_INDENT, expense_indent_model.getAmount_Exp_Indent());		 		      
	 		        values.put(COLUMN_PAYER_EXP_INDENT, expense_indent_model.getPayer_Exp_Indent());
	 		        values.put(COLUMN_PAYMETHOD_EXP_INDENT, expense_indent_model.getPay_Method_Exp_Indent());
	 		        values.put(COLUMN_REF_CHEQUE_NO_EXP_INDENT, expense_indent_model.getCheck_No_Exp_Indent());
	 		       values.put(COLUMN_CHEQUE_STATUS_EXP_INDENT, expense_indent_model.getCheck_Status_Exp_Indent());
	 		        values.put(COLUMN_DESCRIPTION_EXP_INDENT, expense_indent_model.getDescription_Exp_Indent());
	 		        values.put(COLUMN_IMAGES_EXP_INDENT, expense_indent_model.getImage_Exp_Indent());
	 		        values.put(COLUMN_TAX_EXP_INDENT, expense_indent_model.getTax_Exp_Indent());
	 		      
	 		      System.out.println("category item is"+expense_indent_model.getCategory_Exp_Indent());
	 		        
	 		        SQLiteDatabase db = this.getWritableDatabase();
	 		        
	 		        db.insert(TABLE_EXP_INDENT, null, values);
	 		      
	 		        db.close();
	 		}
//counting no of rows in EXPENSE_INDENT table
	public int get_Exp_Indent_Table_Row_Count() {
	 		        String countQuery = "SELECT  * FROM " + TABLE_EXP_INDENT;  
	 		      
	 		        SQLiteDatabase db = this.getReadableDatabase();  
	 		        Cursor cursor = db.rawQuery(countQuery, null);  
	 		     
	 		        System.out.println("check count"+cursor.getCount());

	 		        cursor.close();  
	 		      
	 		        // return count  
	 		        return cursor.getCount();  
	 		    }  
// Getting All expense_indent and adding to arrylist
	public List<Expense_Indent_Model> getAll_Exp_Indent_List() {
	 	    	List<Expense_Indent_Model> exp_Indent_list = new ArrayList<Expense_Indent_Model>();
	 	    	// Select All Query
	 	        String selectQuery = "SELECT  * FROM " + TABLE_EXP_INDENT;
	 	     
	 	        SQLiteDatabase db = this.getWritableDatabase();
	 	        Cursor cursor = db.rawQuery(selectQuery, null);
	 	     
	 	        // looping through all rows and adding to list
	 	        if (cursor.moveToFirst()) {
	 	            do {
	 	            	Expense_Indent_Model expense_indent = new Expense_Indent_Model();
	 	            	expense_indent.setExp_Indent_Id(Integer.parseInt(cursor.getString(0)));
	 	            	expense_indent.setCategory_Exp_Indent(cursor.getString(1));
	 	            	expense_indent.setSub_Category_Exp_Indent(cursor.getString(2));
	 	            	expense_indent.setDate_Exp_Indent(cursor.getString(3));		 	            	
	 	       	       expense_indent.setTime_Exp_Indent(cursor.getString(4));
	 	       	       expense_indent.setAmount_Exp_Indent(cursor.getString(5));		 	       	       
	 	       	       expense_indent.setPayer_Exp_Indent(cursor.getString(6));
	 	       	       expense_indent.setPay_Method_Exp_Indent(cursor.getString(7));
	 	       	       expense_indent.setCheck_No_Exp_Indent(cursor.getString(8));
	 	       	       expense_indent.setCheck_Status_Exp_Indent(cursor.getString(9));
	 	       	        expense_indent.setDescription_Exp_Indent(cursor.getString(10));
	 	       	        expense_indent.setImage_Exp_Indent(cursor.getString(11));
	 	       	       expense_indent.setTax_Exp_Indent(cursor.getString(12));
	 	                // Adding MATERIAL to list
	 	       	   exp_Indent_list.add(expense_indent);
	 	            } while (cursor.moveToNext());
	 	        }
	 	       cursor.close();
	 	    
	 	        // return exp_Indent list
	 	        return exp_Indent_list;
	 	    }
// Updating  expense_indent row
	public int Update_Exp_Indent_Row(Expense_Indent_Model exp_indent_model) {
		    SQLiteDatabase db = this.getWritableDatabase();

		    ContentValues values = new ContentValues();
		    values.put(COLUMN_EXP_INCOME_ID, exp_indent_model.getExp_Indent_Id());
		    values.put(COLUMN_CATEGORY_EXP_INDENT, exp_indent_model.getCategory_Exp_Indent());
		        values.put(COLUMN_SUB_CATEGORY_EXP_INDENT, exp_indent_model.getSub_Category_Exp_Indent());
		        values.put(COLUMN_DATE_EXP_INDENT, exp_indent_model.getDate_Exp_Indent());		 		     
		        values.put(COLUMN_TIME_EXP_INDENT, exp_indent_model.getTime_Exp_Indent());
		        values.put(COLUMN_AMOUNT_EXP_INDENT, exp_indent_model.getAmount_Exp_Indent());		 		      
		        values.put(COLUMN_PAYER_EXP_INDENT, exp_indent_model.getPayer_Exp_Indent());
		        values.put(COLUMN_PAYMETHOD_EXP_INDENT, exp_indent_model.getPay_Method_Exp_Indent());
		        values.put(COLUMN_REF_CHEQUE_NO_EXP_INDENT, exp_indent_model.getCheck_No_Exp_Indent());
		       values.put(COLUMN_CHEQUE_STATUS_EXP_INDENT, exp_indent_model.getCheck_Status_Exp_Indent());
		        values.put(COLUMN_DESCRIPTION_EXP_INDENT, exp_indent_model.getDescription_Exp_Indent());
		        values.put(COLUMN_IMAGES_EXP_INDENT, exp_indent_model.getImage_Exp_Indent());
		        values.put(COLUMN_TAX_EXP_INDENT, exp_indent_model.getTax_Exp_Indent());
		    System.out.println("ssssssssssss"+exp_indent_model.getExp_Indent_Id());
		    // updating row
		    return db.update(TABLE_EXP_INDENT, values, COLUMN_EXP_INDENT_ID + " = ?",
		    new String[] { String.valueOf(exp_indent_model.getExp_Indent_Id()) });	
		   
		    }
//CRUD METHODS FOR DASHBOARD_TABLE
//inserting records in DASHBOARD_TABLE
	public void add_Dashboard_Record(Dashboard_Model dashboard_model) {
	 			// TODO Auto-generated method stub
	 			 ContentValues values = new ContentValues();
	 			 
	 			   values.put(COLUMN_SITE_ID_DASHBOARD, dashboard_model.getSite_ID());
	 		        values.put(COLUMN_SITENAME_DASHBOARD, dashboard_model.getSiteName());
	 		        values.put(COLUMN_SITE_STOCKVALUE_DASHBOARD, dashboard_model.getSiteStockValue());
	 		     
	 		       values.put(COLUMN_DATE_DASHBOARD, dashboard_model.getDate());	 		      
	 		     
	 		        SQLiteDatabase db = this.getWritableDatabase();
	 		        
	 		        db.insert(TABLE_DASHBOARD, null, values);
	 		      
	 		        db.close();
	 		}
//counting no of rows in DASHBOARD_TABLE
	public int getDashboardTable_Row_Count() {
	 		        String countQuery = "SELECT  * FROM " + TABLE_DASHBOARD;  
	 		      
	 		        SQLiteDatabase db = this.getReadableDatabase();  
	 		        Cursor cursor = db.rawQuery(countQuery, null);  
	 		     
	 		        System.out.println("check count"+cursor.getCount());

	 		        cursor.close();  
	 		     
	 		        // return count  
	 		        return cursor.getCount();  
	 		    }  
// Getting All DASHBOARD items and adding to arrylist
	public List<Dashboard_Model> getAll_Dashboard_List() {
	 	    	List<Dashboard_Model> dashboard_list = new ArrayList<Dashboard_Model>();
	 	    	// Select All Query
	 	        String selectQuery = "SELECT  * FROM " + TABLE_DASHBOARD;
	 	     
	 	        SQLiteDatabase db = this.getWritableDatabase();
	 	        Cursor cursor = db.rawQuery(selectQuery, null);
	 	     
	 	        // looping through all rows and adding to list
	 	        if (cursor.moveToFirst()) {
	 	            do {
	 	            	Dashboard_Model dashboard_model = new Dashboard_Model();
	 	            	dashboard_model.setDashboard_ID(Integer.parseInt(cursor.getString(0)));
	 	            	dashboard_model.setSite_ID(Integer.parseInt(cursor.getString(1)));
	 	            	dashboard_model.setSiteName(cursor.getString(2));
	 	            	dashboard_model.setSiteStockValue(cursor.getString(3));
	 	            	dashboard_model.setDate(cursor.getString(4));
	 	            		 	            	
	 	                // Adding dashboard to list
	 	            	dashboard_list.add(dashboard_model);
	 	            } while (cursor.moveToNext());
	 	        }
	 	       cursor.close();
	 	     
	 	        // return dashboard list
	 	        return dashboard_list;
	 	    }
//find site_id records which r matched with  site_name
	public List<Dashboard_Model> find_Site_Id_BySiteName_List_DashboardTable(String site_name) throws SQLException {
	 			SQLiteDatabase db = this.getWritableDatabase();
	 			 
	 			List<Dashboard_Model> site_Ids_list_dashboard= new ArrayList<Dashboard_Model>();
	 		Cursor cursor = db.query(true, TABLE_DASHBOARD, new String[] {
	 				 COLUMN_DASHBOARD_ID,
	 		         COLUMN_SITE_ID_DASHBOARD,
	 		         COLUMN_SITENAME_DASHBOARD,
	 		         COLUMN_SITE_STOCKVALUE_DASHBOARD,	 		      
	 		        COLUMN_DATE_DASHBOARD,
	 		       }, 		                                     		
	 		        COLUMN_SITENAME_DASHBOARD + "=?", 
	 		         new String[] {site_name},
	 		         null, null, null , null);


	 		    if (cursor.moveToFirst()) {
	 		        do {
	 		        	Dashboard_Model dashboard_model = new Dashboard_Model();
	 		        	
	 	            	dashboard_model.setDashboard_ID(Integer.parseInt(cursor.getString(0)));
	 	            	dashboard_model.setSite_ID(Integer.parseInt(cursor.getString(1)));
	 	            	dashboard_model.setSiteName(cursor.getString(2));
	 	            	dashboard_model.setSiteStockValue(cursor.getString(3));  
	 	            	dashboard_model.setDate(cursor.getString(4));  
	 	            	
	 	            	site_Ids_list_dashboard.add(dashboard_model);
	 		        } while (cursor.moveToNext());
	 		    }
	 		    if (cursor != null && !cursor.isClosed()) {
	 		        cursor.close();
	 		       
	 		    }
	 		    System.out.println("db size of site Ids list"+site_Ids_list_dashboard.size());
	 		    return site_Ids_list_dashboard;	 

	 		} 
//counting no of matched rows in Material_Dashboard table
    public int countRows_MatchedOf_SiteID_DashboardTable(int site_id) throws SQLException {
	 		      
	 		        SQLiteDatabase db = this.getReadableDatabase();  
	 		       Cursor cursor = db.query(true, TABLE_DASHBOARD, new String[] {
	 		    		  COLUMN_DASHBOARD_ID,
	 	 		         COLUMN_SITE_ID_DASHBOARD,
	 	 		         COLUMN_SITENAME_DASHBOARD,
	 	 		         COLUMN_SITE_STOCKVALUE_DASHBOARD,
	 	 		        COLUMN_DATE_DASHBOARD,
	 	 		      }, 		                                     		
	 	 		      COLUMN_SITE_ID_DASHBOARD + "=?", 
		                    new String[] {String.valueOf(site_id)},
		                    null, null, null , null);
	 		     
	 		        System.out.println("check count"+cursor.getCount());

	 		        cursor.close();  
	 		     
	 		        // return count  
	 		        return cursor.getCount();  
	 		    }     	 
//	find records which r matched with  site_id
	public Dashboard_Model find_SiteId_Dashboard(int site_ID) throws SQLException {
	 	   		    	SQLiteDatabase db = this.getWritableDatabase();
	 	   		    	 
	 	   		    Dashboard_Model dashboard_model = new Dashboard_Model();
	 	   		    	
	 	   		    Cursor cursor = db.query(true, TABLE_DASHBOARD, new String[] {
	 	   		    				COLUMN_DASHBOARD_ID,
	 	   		    			COLUMN_SITE_ID_DASHBOARD,
	 	   		    				COLUMN_SITENAME_DASHBOARD,
	 	   		    			COLUMN_SITE_STOCKVALUE_DASHBOARD,
	 	   		    			COLUMN_DATE_DASHBOARD,	 	   		    		
	 	   		                   }, 	 	   		                	 				                    		
	 	   		                	COLUMN_SITE_ID_DASHBOARD + "=?", 
	 	   		                    new String[] {String.valueOf(site_ID)},
	 	   		                    null, null, null , null);
	 	   		 
	 	   		 
	 	   		        if (cursor.moveToFirst()) {
	 	   		            do {
	 	   		            	
	 	   		            dashboard_model.setDashboard_ID(Integer.parseInt(cursor.getString(0)));
		 	            	dashboard_model.setSite_ID(Integer.parseInt(cursor.getString(1)));
		 	            	dashboard_model.setSiteName(cursor.getString(2));
		 	            	dashboard_model.setSiteStockValue(cursor.getString(3));
		 	            	dashboard_model.setDate(cursor.getString(4));  
		 	            
	 	   		           
	 	   		            } while (cursor.moveToNext());
	 	   		        }
	 	   		        if (cursor != null && !cursor.isClosed()) {
	 	   		            cursor.close();
	 	   		       
	 	   		        }
	 	   		        System.out.println("counting records"+cursor.getCount());
	 	   		        return dashboard_model;	 
	 	   		 
	 	   		    }
// Updating DASHBOARD row
	public int Update_Dashboard_Row(Dashboard_Model dashboard_model) {
		    SQLiteDatabase db = this.getWritableDatabase();

		    ContentValues values = new ContentValues();
		    values.put(COLUMN_DASHBOARD_ID, dashboard_model.getDashboard_ID());
		    values.put(COLUMN_SITE_ID_DASHBOARD, dashboard_model.getSite_ID());
		    values.put(COLUMN_SITENAME_DASHBOARD, dashboard_model.getSiteName());
		    values.put(COLUMN_SITE_STOCKVALUE_DASHBOARD, dashboard_model.getSiteStockValue());
		    values.put(COLUMN_DATE_DASHBOARD, dashboard_model.getDate());	    
		       
		    System.out.println("dashboard id is"+dashboard_model.getDashboard_ID());
		    // updating row
		    return db.update(TABLE_DASHBOARD, values, COLUMN_DASHBOARD_ID+ " = ?",
		    new String[] { String.valueOf(dashboard_model.getDashboard_ID()) });	
		   
		    } 
//CRUD METHODS FOR Material DASHBOARD_TABLE
//inserting records in Material DASHBOARD_TABLE
	public void add_MaterialDashboard_Record(Material_Dashboard_Model material_dashboard_model) {
	 			// TODO Auto-generated method stub
	 			 ContentValues values = new ContentValues();
	 			 
	 			   values.put(COLUMN_MATERIAL_ID_MATL_DASHBOARD, material_dashboard_model.getMaterial_ID());
	 		       values.put(COLUMN_MATERIAL_NAME_MATL_DASHBOARD, material_dashboard_model.getMaterial_Name());
	 		      values.put(COLUMN_MATERIAL_UNITS_MATL_DASHBOARD, material_dashboard_model.getMaterial_Units());
	 		       values.put(COLUMN_MATERIAL_QUANTITY_MATL_DASHBOARD, material_dashboard_model.getMaterial_Quantity());
	 		      values.put(COLUMN_MATERIAL_VALUE_MATL_DASHBOARD, material_dashboard_model.getMaterial_Value());
	 		     values.put(COLUMN_SITE_ID_MATL_DASHBOARD, material_dashboard_model.getSite_ID());
	 		    values.put(COLUMN_SITE_NAME_MATL_DASHBOARD, material_dashboard_model.getSite_Name());	
	 		   values.put(COLUMN_DATE_MATL_DASHBOARD, material_dashboard_model.getDate());	
	 		      
	 		        SQLiteDatabase db = this.getWritableDatabase();
	 		        
	 		        db.insert(TABLE_MATERIAL_DASHBOARD, null, values);
	 		      
	 		        db.close();
	 		        
	 		}
//counting no of rows in MATERIAL_DASHBOARD_TABLE
	public int getMaterialDashboardTable_Row_Count() {
	 		        String countQuery = "SELECT  * FROM " + TABLE_MATERIAL_DASHBOARD;  
	 		      
	 		        SQLiteDatabase db = this.getReadableDatabase();  
	 		        Cursor cursor = db.rawQuery(countQuery, null);  
	 		     
	 		        System.out.println("check count"+cursor.getCount());

	 		        cursor.close();  
	 		     
	 		        // return count  
	 		        return cursor.getCount();  
	 		    }  
// Getting All MATERIAL_DASHBOARD items and adding to arrylist
	public List<Material_Dashboard_Model> getAll_MaterialDashboard_List() {
	 	    	List<Material_Dashboard_Model> material_dashboard_list = new ArrayList<Material_Dashboard_Model>();
	 	    	// Select All Query
	 	        String selectQuery = "SELECT  * FROM " + TABLE_MATERIAL_DASHBOARD;
	 	     
	 	        SQLiteDatabase db = this.getWritableDatabase();
	 	        Cursor cursor = db.rawQuery(selectQuery, null);
	 	     
	 	        // looping through all rows and adding to list
	 	        if (cursor.moveToFirst()) {
	 	            do {
	 	            	Material_Dashboard_Model materialdashboard_model = new Material_Dashboard_Model();
	 	            	materialdashboard_model.setMaterialDashboard_ID(Integer.parseInt(cursor.getString(0)));
	 	            	materialdashboard_model.setMaterial_ID(Integer.parseInt(cursor.getString(1)));
	 	            	materialdashboard_model.setMaterial_Name(cursor.getString(2));
	 	            	materialdashboard_model.setMaterial_Units(cursor.getString(3));
	 	            	materialdashboard_model.setMaterial_Quantity(cursor.getString(4));
	 	            	materialdashboard_model.setMaterial_Value(cursor.getString(5));
	 	            	materialdashboard_model.setSite_ID(Integer.parseInt(cursor.getString(6)));
	 	            	materialdashboard_model.setSite_Name(cursor.getString(7));
	 	            	materialdashboard_model.setDate(cursor.getString(8));
	 	            	
	 	                // Adding material_dashboard to list
	 	            	material_dashboard_list.add(materialdashboard_model);
	 	            } while (cursor.moveToNext());
	 	        }
	 	       cursor.close();
	 	     
	 	        // return material_dashboard list
	 	        return material_dashboard_list;
	 	    }
//find material_ids records which r matched with  site_name
	public List<Material_Dashboard_Model> find_SiteName_List_MaterialDashboardTable(String site_name) throws SQLException {
	 			SQLiteDatabase db = this.getWritableDatabase();
	 			 
	 			List<Material_Dashboard_Model> site_Ids_list_dashboard= new ArrayList<Material_Dashboard_Model>();
	 		Cursor cursor = db.query(true, TABLE_MATERIAL_DASHBOARD, new String[] {
	 				 COLUMN_MATERIAL_DASHBOARD_ID,
	 		         COLUMN_MATERIAL_ID_MATL_DASHBOARD,
	 		         COLUMN_MATERIAL_NAME_MATL_DASHBOARD,
	 		         COLUMN_MATERIAL_UNITS_MATL_DASHBOARD,
	 		         COLUMN_MATERIAL_QUANTITY_MATL_DASHBOARD,
	 		         COLUMN_MATERIAL_VALUE_MATL_DASHBOARD,
	 		         COLUMN_SITE_ID_MATL_DASHBOARD,
	 		         COLUMN_SITE_NAME_MATL_DASHBOARD,
	 		        COLUMN_DATE_MATL_DASHBOARD,}, 		                                     		
	 		        COLUMN_SITE_NAME_MATL_DASHBOARD + "=?", 
	 		         new String[] {site_name},
	 		         null, null, null , null);
	 		

	 		    if (cursor.moveToFirst()) {
	 		        do {
	 		        	 Material_Dashboard_Model materialdashboard_model = new Material_Dashboard_Model();
	 		        	
	 		        	materialdashboard_model.setMaterialDashboard_ID(Integer.parseInt(cursor.getString(0)));
	 	            	materialdashboard_model.setMaterial_ID(Integer.parseInt(cursor.getString(1)));
	 	            	materialdashboard_model.setMaterial_Name(cursor.getString(2));
	 	            	materialdashboard_model.setMaterial_Units(cursor.getString(3));
	 	            	materialdashboard_model.setMaterial_Quantity(cursor.getString(4));
	 	            	materialdashboard_model.setMaterial_Value(cursor.getString(5));
	 	            	materialdashboard_model.setSite_ID(Integer.parseInt(cursor.getString(6)));
	 	            	materialdashboard_model.setSite_Name(cursor.getString(7));
	 	            	materialdashboard_model.setDate(cursor.getString(8));
	 	            	 // Adding material_dashboard to list
	 	            	site_Ids_list_dashboard.add(materialdashboard_model);
	 		        } while (cursor.moveToNext());
	 		    }
	 		    if (cursor != null && !cursor.isClosed()) {
	 		        cursor.close();
	 		      
	 		    }
	 		    System.out.println("db size of site Ids list"+site_Ids_list_dashboard.size());
	 		    return site_Ids_list_dashboard;	 

	 		} 
//find records which r matched with  material_id and site_ID
	public Material_Dashboard_Model find_MaterialID_SiteID_Material_DashboardTable(int material_ID, int site_ID) throws SQLException {
	 	   		    	SQLiteDatabase db = this.getWritableDatabase();
	 	   		    	 
	 	   		    Material_Dashboard_Model materialdashboard_model = new Material_Dashboard_Model();
	 	   		    	
	 	   		    Cursor cursor = db.query(true, TABLE_MATERIAL_DASHBOARD, new String[] {
	 	   		    			COLUMN_MATERIAL_DASHBOARD_ID,
	 	   		    			COLUMN_MATERIAL_ID_MATL_DASHBOARD,
	 	   		    			COLUMN_MATERIAL_NAME_MATL_DASHBOARD,
	 	   		    			COLUMN_MATERIAL_UNITS_MATL_DASHBOARD,
	 	   		    			COLUMN_MATERIAL_QUANTITY_MATL_DASHBOARD,
	 	   		    			COLUMN_MATERIAL_VALUE_MATL_DASHBOARD,
	 	   		    			COLUMN_SITE_ID_MATL_DASHBOARD,
	 	   		    			COLUMN_SITE_NAME_MATL_DASHBOARD,
	 	   		    			COLUMN_DATE_MATL_DASHBOARD,
	 	   		                   }, 
	 	   		                	 				                    		
	 	   		               COLUMN_MATERIAL_ID_MATL_DASHBOARD + "=?" + " and "  +
			                    		
							COLUMN_SITE_ID_MATL_DASHBOARD + "=?",  
	 	   		                    new String[] {String.valueOf(material_ID),String.valueOf(site_ID)},
	 	   		                    null, null, null , null);
	 	   		 
	 	   		 
	 	   		        if (cursor.moveToFirst()) {
	 	   		            do {
	 	   		            	
	 	   		          
		 	            	materialdashboard_model.setMaterialDashboard_ID(Integer.parseInt(cursor.getString(0)));
		 	            	materialdashboard_model.setMaterial_ID(Integer.parseInt(cursor.getString(1)));
		 	            	materialdashboard_model.setMaterial_Name(cursor.getString(2));
		 	            	materialdashboard_model.setMaterial_Units(cursor.getString(3));
		 	            	materialdashboard_model.setMaterial_Quantity(cursor.getString(4));
		 	            	materialdashboard_model.setMaterial_Value(cursor.getString(5));
		 	            	materialdashboard_model.setSite_ID(Integer.parseInt(cursor.getString(6)));
		 	            	materialdashboard_model.setSite_Name(cursor.getString(7));
		 	            	materialdashboard_model.setDate(cursor.getString(8));
	 	   	 	       	        
	 	   		           
	 	   		            } while (cursor.moveToNext());
	 	   		        }
	 	   		        if (cursor != null && !cursor.isClosed()) {
	 	   		            cursor.close();
	 	   		       
	 	   		        }
	 	   		        System.out.println("counting records"+cursor.getCount());
	 	   		        return materialdashboard_model;	 
	 	   		 
	 	   		    }
//counting no of matched rows in Material_Dashboard table
	public int countRows_MatchedOf_MaterialID_SiteID_Material_DashboardTable(int material_id,int site_id) throws SQLException {
	 		      
	 		        SQLiteDatabase db = this.getReadableDatabase();  
	 		       Cursor cursor = db.query(true, TABLE_MATERIAL_DASHBOARD, new String[] {
	   		    			COLUMN_MATERIAL_DASHBOARD_ID,
	   		    			COLUMN_MATERIAL_ID_MATL_DASHBOARD,
	   		    			COLUMN_MATERIAL_NAME_MATL_DASHBOARD,
	   		    			COLUMN_MATERIAL_UNITS_MATL_DASHBOARD,
	   		    			COLUMN_MATERIAL_QUANTITY_MATL_DASHBOARD,
	   		    			COLUMN_MATERIAL_VALUE_MATL_DASHBOARD,
	   		    			COLUMN_SITE_ID_MATL_DASHBOARD,
	   		    			COLUMN_SITE_NAME_MATL_DASHBOARD,
	   		    			COLUMN_DATE_MATL_DASHBOARD,}, 
	   		    			COLUMN_MATERIAL_ID_MATL_DASHBOARD + "=?" + " and "  +
		                    		
							COLUMN_SITE_ID_MATL_DASHBOARD + "=?", 
		                    new String[] {String.valueOf(material_id), String.valueOf(site_id)},
		                    null, null, null , null);
	 		     
	 		        System.out.println("check count"+cursor.getCount());

	 		        cursor.close(); 
	 		       

	 		        // return count  
	 		        return cursor.getCount();  
	 		    }     	 
// Updating MATERIAL_DASHBOARD row
    public int Update_MaterialDashboard_Row(Material_Dashboard_Model material_dashboard_model) {
		    SQLiteDatabase db = this.getWritableDatabase();

		    ContentValues values = new ContentValues();
		    values.put(COLUMN_MATERIAL_DASHBOARD_ID, material_dashboard_model.getMaterialDashboard_ID());
		    values.put(COLUMN_MATERIAL_ID_MATL_DASHBOARD, material_dashboard_model.getMaterial_ID());
		       values.put(COLUMN_MATERIAL_NAME_MATL_DASHBOARD, material_dashboard_model.getMaterial_Name());
		      values.put(COLUMN_MATERIAL_UNITS_MATL_DASHBOARD, material_dashboard_model.getMaterial_Units());
		       values.put(COLUMN_MATERIAL_QUANTITY_MATL_DASHBOARD, material_dashboard_model.getMaterial_Quantity());
		      values.put(COLUMN_MATERIAL_VALUE_MATL_DASHBOARD, material_dashboard_model.getMaterial_Value());
		      values.put(COLUMN_SITE_ID_MATL_DASHBOARD, material_dashboard_model.getSite_ID());
	 		    values.put(COLUMN_SITE_NAME_MATL_DASHBOARD, material_dashboard_model.getSite_Name());	
	 		   values.put(COLUMN_DATE_MATL_DASHBOARD, material_dashboard_model.getDate());	
	 		    
		    System.out.println("material dashboard id is"+material_dashboard_model.getMaterialDashboard_ID());
		    // updating row
		    return db.update(TABLE_MATERIAL_DASHBOARD, values, COLUMN_MATERIAL_DASHBOARD_ID+ " = ?",
		    new String[] { String.valueOf(material_dashboard_model.getMaterialDashboard_ID()) });	
		   
		    } 
//	CRUD METHODS FOR PROJECT_STATUS_TABLE
//	inserting records in MATERIAL_STOCK_TRANSACTIONS table
	public void add_Project_Status_Record(Status_Model status_model) {
				// TODO Auto-generated method stub
				 ContentValues values = new ContentValues();		 
			      
			        values.put(COLUMN_PROJECT_ID_PRJ_STATUS, status_model.getProject_ID());			       	      
			        values.put(COLUMN_SITE_ID_PRJ_STATUS, status_model.getSite_ID());  
			        values.put(COLUMN_PRJ_EST_WORKMASTER_ID_PRJ_STATUS, status_model.getPRJ_EST_WorkMaster_ID());		      
			        values.put(COLUMN_PRJ_EST_WORK_LOCATION_NAME_PRJ_STATUS, status_model.getPRJ_EST_WorkLocation_Name());  
			        values.put(COLUMN_PERCENTAGE_COMPLETION_PRJ_STATUS, status_model.getPercentage_Completion());		      
			        values.put(COLUMN_PRJ_EST_WORK_TOT_QTY_PRJ_STATUS, status_model.getPRJ_EST_Work_TOT_QTY());  
			        values.put(COLUMN_PRJ_EST_WORK_TOT_QTY_UNITS_PRJ_STATUS, status_model.getPRJ_EST_Work_TOT_QTY_Units());			      
			        values.put(COLUMN_PRJ_EST_WORK_COMP_QTY_PRJ_STATUS, status_model.getPRJ_EST_Work_COM_QTY());	
			        values.put(COLUMN_PRJ_WORK_EST_START_DATE_PRJ_STATUS, status_model.getPRJ_WorK_EST_Start_Date());	
			        values.put(COLUMN_PRJ_WORK_EST_END_DATE_PRJ_STATUS, status_model.getPRJ_Work_EST_End_Date());	
			        values.put(COLUMN_START_DATE_PRJ_STATUS, status_model.getStart_Date());	
			        values.put(COLUMN_END_DATE_PRJ_STATUS, status_model.getEnd_Date());  
			        values.put(COLUMN_SYN_STATUS_PRJ_STATUS, status_model.getSyn_Status());  			      
			        values.put(COLUMN_CREATED_DATE_PRJ_STATUS, status_model.getCreated_Date());  
			        values.put(COLUMN_TRANSACTION_DATE_PRJ_STATUS, status_model.getTransaction_Date()); 			      
			        values.put(COLUMN_DISPLAY_FLAG_PRJ_STATUS, status_model.getDisplay_Flag());  
			        values.put(COLUMN_REMARKS_PRJ_STATUS, status_model.getRemarks());
			        values.put(COLUMN_WORK_TASK_TYPE_ID_PRJ_STATUS, status_model.getWork_TaskType_ID()); 
			        values.put(COLUMN_MAIN_TASK_ID_PRJ_STATUS, status_model.getMain_Task_ID()); 
			        values.put(COLUMN_MAIN_TASK_NAME_PRJ_STATUS, status_model.getMain_Task_Name()); 
			        values.put(COLUMN_LINK_TO_BILL_PRJ_STATUS, status_model.getLink_ToBill()); 
			        values.put(COLUMN_SUM_ENTERED_QTY_PRJ_STATUS, status_model.getSum_Entered_Qty()); 
			    
			        SQLiteDatabase db = this.getWritableDatabase();
			        
			        db.insert(TABLE_PROJECT_STATUS, null, values);
			      System.out.println("inserting");
			        db.close();
			}
//	counting no of rows in PROJECT_STATUS table
	public int get_ProjectStatusTable_Row_Count() {
			        String countQuery = "SELECT  * FROM " + TABLE_PROJECT_STATUS;  
			      
			        SQLiteDatabase db = this.getReadableDatabase();  
			        Cursor cursor = db.rawQuery(countQuery, null);  
			     
			        System.out.println("check count"+cursor.getCount());

			        cursor.close();  
			       
			        // return count  
			        return cursor.getCount();  
			    }  
// Getting All PROJECT_STATUS and adding to arrylist
	public List<Status_Model> getAll_Project_StatusList() {
		    	List<Status_Model> project_Status_list = new ArrayList<Status_Model>();
		    	// Select All Query
		        String selectQuery = "SELECT  * FROM " + TABLE_PROJECT_STATUS;
		     
		        SQLiteDatabase db = this.getWritableDatabase();
		        Cursor cursor = db.rawQuery(selectQuery, null);
		     
		        // looping through all rows and adding to list
		        if (cursor.moveToFirst()) {
		            do {
		            	Status_Model status_model = new Status_Model();
		            	status_model.setProject_Status_ID(Integer.parseInt(cursor.getString(0)));
		            	status_model.setProject_ID(Integer.parseInt(cursor.getString(1)));
		            	status_model.setSite_ID(Integer.parseInt(cursor.getString(2)));
		            	status_model.setPRJ_EST_WorkMaster_ID(Integer.parseInt(cursor.getString(3)));	            	
		           		status_model.setPRJ_EST_WorkLocation_Name(cursor.getString(4));
		           		status_model.setPercentage_Completion(cursor.getString(5));
		           		status_model.setPRJ_EST_Work_TOT_QTY(cursor.getString(6));
		           		status_model.setPRJ_EST_Work_TOT_QTY_Units(cursor.getString(7));
		           		status_model.setPRJ_EST_Work_COM_QTY(cursor.getString(8));
		           		status_model.setPRJ_Work_EST_Start_Date(cursor.getString(9));
		           		status_model.setPRJ_Work_EST_End_Date(cursor.getString(10));
		           		
		           		status_model.setStart_Date(cursor.getString(11));	           		
		           		status_model.setEnd_Date(cursor.getString(12));
		           		status_model.setSyn_Status(cursor.getString(13));
		           		status_model.setCreated_Date(cursor.getString(14));		           		
		           		status_model.setTransaction_Date(cursor.getString(15));		           		
		           		status_model.setDisplay_Flag(cursor.getString(16));
		           		status_model.setRemarks(cursor.getString(17));
		           		status_model.setWork_TaskType_ID(Integer.parseInt(cursor.getString(18)));
		           		status_model.setMain_Task_ID(Integer.parseInt(cursor.getString(19)));
		           		status_model.setMain_Task_Name(cursor.getString(20));
		           		status_model.setLink_ToBill(cursor.getString(21));
		           		status_model.setSum_Entered_Qty(cursor.getString(22));
		           		
		                // Adding status to list
		           		project_Status_list.add(status_model);
		            } while (cursor.moveToNext());
		        }
		       cursor.close();
		     
		        // return project_Status_list list
		        return project_Status_list;
		    }
//find SiteID , display_flag and get unique or Distinct values of Main_TaskID in PROJECT_STATUS
//and arrange ORDERBY with COLUMN_MAIN_TASK_ID_PRJ_STATUS and adding to arraylist
	public ArrayList<Status_Model> find_SiteID_DisplayFlag_Distinct_MainTaskID_ProjectStatusList(int site_id, String display_flag) throws SQLException {
		    	SQLiteDatabase db = this.getWritableDatabase();
		        ArrayList<Status_Model> get_Tasks_bySiteID = new ArrayList<Status_Model>();
		    Cursor cursor = db.query(true, TABLE_PROJECT_STATUS, new String[] {
		    		 COLUMN_PROJECT_STATUS_ID,
	                 COLUMN_PROJECT_ID_PRJ_STATUS,
	                 COLUMN_SITE_ID_PRJ_STATUS,
	                 COLUMN_PRJ_EST_WORKMASTER_ID_PRJ_STATUS,
	                 COLUMN_PRJ_EST_WORK_LOCATION_NAME_PRJ_STATUS,
	                 COLUMN_PERCENTAGE_COMPLETION_PRJ_STATUS,
	                 COLUMN_PRJ_EST_WORK_TOT_QTY_PRJ_STATUS,
	                 COLUMN_PRJ_EST_WORK_TOT_QTY_UNITS_PRJ_STATUS,
	                 COLUMN_PRJ_EST_WORK_COMP_QTY_PRJ_STATUS,
	                 COLUMN_PRJ_WORK_EST_START_DATE_PRJ_STATUS,	               
	                 COLUMN_PRJ_WORK_EST_END_DATE_PRJ_STATUS,
	                 COLUMN_START_DATE_PRJ_STATUS,
	                 COLUMN_END_DATE_PRJ_STATUS,
	                 COLUMN_SYN_STATUS_PRJ_STATUS,
	                 COLUMN_CREATED_DATE_PRJ_STATUS,
	                 COLUMN_TRANSACTION_DATE_PRJ_STATUS,	                 
	                 COLUMN_DISPLAY_FLAG_PRJ_STATUS,
	                 COLUMN_REMARKS_PRJ_STATUS,
	                 COLUMN_WORK_TASK_TYPE_ID_PRJ_STATUS,
	                 COLUMN_MAIN_TASK_ID_PRJ_STATUS,
	                 COLUMN_MAIN_TASK_NAME_PRJ_STATUS,
	                 COLUMN_LINK_TO_BILL_PRJ_STATUS,
	                 COLUMN_SUM_ENTERED_QTY_PRJ_STATUS,}, 
		                  
	                 COLUMN_SITE_ID_PRJ_STATUS + "=?"+ " and "  +
	                		 COLUMN_DISPLAY_FLAG_PRJ_STATUS + "=?", 
		                    new String[] {String.valueOf(site_id),display_flag},
		                    COLUMN_MAIN_TASK_ID_PRJ_STATUS, null, COLUMN_MAIN_TASK_ID_PRJ_STATUS , null);
		  
		   
		        if (cursor.moveToFirst()) {
		            do {
		            	Status_Model status_model = new Status_Model();
		            	status_model.setProject_Status_ID(Integer.parseInt(cursor.getString(0)));
		            	status_model.setProject_ID(Integer.parseInt(cursor.getString(1)));
		            	status_model.setSite_ID(Integer.parseInt(cursor.getString(2)));
		            	status_model.setPRJ_EST_WorkMaster_ID(Integer.parseInt(cursor.getString(3)));	            	
		           		status_model.setPRJ_EST_WorkLocation_Name(cursor.getString(4));
		           		status_model.setPercentage_Completion(cursor.getString(5));
		           		status_model.setPRJ_EST_Work_TOT_QTY(cursor.getString(6));
		           		status_model.setPRJ_EST_Work_TOT_QTY_Units(cursor.getString(7));
		           		status_model.setPRJ_EST_Work_COM_QTY(cursor.getString(8));
		           		status_model.setPRJ_Work_EST_Start_Date(cursor.getString(9));
		           		status_model.setPRJ_Work_EST_End_Date(cursor.getString(10));
		           		
		           		status_model.setStart_Date(cursor.getString(11));	           		
		           		status_model.setEnd_Date(cursor.getString(12));
		           		status_model.setSyn_Status(cursor.getString(13));
		           		status_model.setCreated_Date(cursor.getString(14));		           		
		           		status_model.setTransaction_Date(cursor.getString(15));		           		
		           		status_model.setDisplay_Flag(cursor.getString(16));
		           		status_model.setRemarks(cursor.getString(17));
		           		status_model.setWork_TaskType_ID(Integer.parseInt(cursor.getString(18)));
		           		status_model.setMain_Task_ID(Integer.parseInt(cursor.getString(19)));
		           		status_model.setMain_Task_Name(cursor.getString(20));
		           		status_model.setLink_ToBill(cursor.getString(21));
		           		status_model.setSum_Entered_Qty(cursor.getString(22));
		           		
	 	       	    get_Tasks_bySiteID.add(status_model);
		            } while (cursor.moveToNext());
		        }
		        if (cursor != null && !cursor.isClosed()) {
		            cursor.close();
		           
		        }
		        System.out.println("db size of list"+get_Tasks_bySiteID.size());
		        return get_Tasks_bySiteID;
		 	 
		    }
//find SiteID and display_flag and main_task_id in PROJECT_STATUS and arrange ORDERBY with COLUMN_PRJ_EST_WORKMASTER_ID_PRJ_STATUS and adding to arraylist
	public ArrayList<Status_Model> find_SiteID_DisplayFlag_MainTaskID_ProjectStatusList(int site_id, String display_flag, int mMain_Task_ID) throws SQLException {
			    	SQLiteDatabase db = this.getWritableDatabase();
			    	 
			        ArrayList<Status_Model> get_Tasks_bySiteID = new ArrayList<Status_Model>();
			    Cursor cursor = db.query(true, TABLE_PROJECT_STATUS, new String[] {
			    		 COLUMN_PROJECT_STATUS_ID,
		                 COLUMN_PROJECT_ID_PRJ_STATUS,
		                 COLUMN_SITE_ID_PRJ_STATUS,
		                 COLUMN_PRJ_EST_WORKMASTER_ID_PRJ_STATUS,
		                 COLUMN_PRJ_EST_WORK_LOCATION_NAME_PRJ_STATUS,
		                 COLUMN_PERCENTAGE_COMPLETION_PRJ_STATUS,
		                 COLUMN_PRJ_EST_WORK_TOT_QTY_PRJ_STATUS,
		                 COLUMN_PRJ_EST_WORK_TOT_QTY_UNITS_PRJ_STATUS,
		                 COLUMN_PRJ_EST_WORK_COMP_QTY_PRJ_STATUS,
		                 COLUMN_PRJ_WORK_EST_START_DATE_PRJ_STATUS,	               
		                 COLUMN_PRJ_WORK_EST_END_DATE_PRJ_STATUS,
		                 COLUMN_START_DATE_PRJ_STATUS,
		                 COLUMN_END_DATE_PRJ_STATUS,
		                 COLUMN_SYN_STATUS_PRJ_STATUS,
		                 COLUMN_CREATED_DATE_PRJ_STATUS,
		                 COLUMN_TRANSACTION_DATE_PRJ_STATUS,	                 
		                 COLUMN_DISPLAY_FLAG_PRJ_STATUS,
		                 COLUMN_REMARKS_PRJ_STATUS,
		                 COLUMN_WORK_TASK_TYPE_ID_PRJ_STATUS,
		                 COLUMN_MAIN_TASK_ID_PRJ_STATUS,
		                 COLUMN_MAIN_TASK_NAME_PRJ_STATUS,
		                 COLUMN_LINK_TO_BILL_PRJ_STATUS,
		                 COLUMN_SUM_ENTERED_QTY_PRJ_STATUS,}, 
			                  
		                 COLUMN_SITE_ID_PRJ_STATUS + "=?"+ " and "  +COLUMN_DISPLAY_FLAG_PRJ_STATUS + "=?" + " and "  +COLUMN_MAIN_TASK_ID_PRJ_STATUS + "=?", new String[] {String.valueOf(site_id),display_flag,String.valueOf(mMain_Task_ID)},
			                    null, null, COLUMN_PRJ_EST_WORKMASTER_ID_PRJ_STATUS , null);
			  
			   
			        if (cursor.moveToFirst()) {
			            do {
			            	Status_Model status_model = new Status_Model();
			            	status_model.setProject_Status_ID(Integer.parseInt(cursor.getString(0)));
			            	status_model.setProject_ID(Integer.parseInt(cursor.getString(1)));
			            	status_model.setSite_ID(Integer.parseInt(cursor.getString(2)));
			            	status_model.setPRJ_EST_WorkMaster_ID(Integer.parseInt(cursor.getString(3)));	            	
			           		status_model.setPRJ_EST_WorkLocation_Name(cursor.getString(4));
			           		status_model.setPercentage_Completion(cursor.getString(5));
			           		status_model.setPRJ_EST_Work_TOT_QTY(cursor.getString(6));
			           		status_model.setPRJ_EST_Work_TOT_QTY_Units(cursor.getString(7));
			           		status_model.setPRJ_EST_Work_COM_QTY(cursor.getString(8));
			           		status_model.setPRJ_Work_EST_Start_Date(cursor.getString(9));
			           		status_model.setPRJ_Work_EST_End_Date(cursor.getString(10));
			           		
			           		status_model.setStart_Date(cursor.getString(11));	           		
			           		status_model.setEnd_Date(cursor.getString(12));
			           		status_model.setSyn_Status(cursor.getString(13));
			           		status_model.setCreated_Date(cursor.getString(14));		           		
			           		status_model.setTransaction_Date(cursor.getString(15));		           		
			           		status_model.setDisplay_Flag(cursor.getString(16));
			           		status_model.setRemarks(cursor.getString(17));
			           		status_model.setWork_TaskType_ID(Integer.parseInt(cursor.getString(18)));
			           		status_model.setMain_Task_ID(Integer.parseInt(cursor.getString(19)));
			           		status_model.setMain_Task_Name(cursor.getString(20));
			           		status_model.setLink_ToBill(cursor.getString(21));
			           		status_model.setSum_Entered_Qty(cursor.getString(22));
			           		
		 	       	    get_Tasks_bySiteID.add(status_model);
			            } while (cursor.moveToNext());
			        }
			        if (cursor != null && !cursor.isClosed()) {
			            cursor.close();
			           
			        }
			        System.out.println("db size of list"+get_Tasks_bySiteID.size());
			        return get_Tasks_bySiteID;
			 	 
			    }
	public ArrayList<Status_Model> find_SiteID_DisplayFlag_MainTaskID_ProjectStatusList(int site_id, String display_flag) throws SQLException {
		SQLiteDatabase db = this.getWritableDatabase();

		ArrayList<Status_Model> get_Tasks_bySiteID = new ArrayList<Status_Model>();
		Cursor cursor = db.query(true, TABLE_PROJECT_STATUS, new String[] {
						COLUMN_PROJECT_STATUS_ID,
						COLUMN_PROJECT_ID_PRJ_STATUS,
						COLUMN_SITE_ID_PRJ_STATUS,
						COLUMN_PRJ_EST_WORKMASTER_ID_PRJ_STATUS,
						COLUMN_PRJ_EST_WORK_LOCATION_NAME_PRJ_STATUS,
						COLUMN_PERCENTAGE_COMPLETION_PRJ_STATUS,
						COLUMN_PRJ_EST_WORK_TOT_QTY_PRJ_STATUS,
						COLUMN_PRJ_EST_WORK_TOT_QTY_UNITS_PRJ_STATUS,
						COLUMN_PRJ_EST_WORK_COMP_QTY_PRJ_STATUS,
						COLUMN_PRJ_WORK_EST_START_DATE_PRJ_STATUS,
						COLUMN_PRJ_WORK_EST_END_DATE_PRJ_STATUS,
						COLUMN_START_DATE_PRJ_STATUS,
						COLUMN_END_DATE_PRJ_STATUS,
						COLUMN_SYN_STATUS_PRJ_STATUS,
						COLUMN_CREATED_DATE_PRJ_STATUS,
						COLUMN_TRANSACTION_DATE_PRJ_STATUS,
						COLUMN_DISPLAY_FLAG_PRJ_STATUS,
						COLUMN_REMARKS_PRJ_STATUS,
						COLUMN_WORK_TASK_TYPE_ID_PRJ_STATUS,
						COLUMN_MAIN_TASK_ID_PRJ_STATUS,
						COLUMN_MAIN_TASK_NAME_PRJ_STATUS,
						COLUMN_LINK_TO_BILL_PRJ_STATUS,
						COLUMN_SUM_ENTERED_QTY_PRJ_STATUS,},

				COLUMN_SITE_ID_PRJ_STATUS + "=?"+ " and "  +COLUMN_DISPLAY_FLAG_PRJ_STATUS + "=?", new String[] {String.valueOf(site_id),display_flag},
				null, null, COLUMN_PRJ_EST_WORKMASTER_ID_PRJ_STATUS , null);


		if (cursor.moveToFirst()) {
			do {
				Status_Model status_model = new Status_Model();
				status_model.setProject_Status_ID(Integer.parseInt(cursor.getString(0)));
				status_model.setProject_ID(Integer.parseInt(cursor.getString(1)));
				status_model.setSite_ID(Integer.parseInt(cursor.getString(2)));
				status_model.setPRJ_EST_WorkMaster_ID(Integer.parseInt(cursor.getString(3)));
				status_model.setPRJ_EST_WorkLocation_Name(cursor.getString(4));
				status_model.setPercentage_Completion(cursor.getString(5));
				status_model.setPRJ_EST_Work_TOT_QTY(cursor.getString(6));
				status_model.setPRJ_EST_Work_TOT_QTY_Units(cursor.getString(7));
				status_model.setPRJ_EST_Work_COM_QTY(cursor.getString(8));
				status_model.setPRJ_Work_EST_Start_Date(cursor.getString(9));
				status_model.setPRJ_Work_EST_End_Date(cursor.getString(10));

				status_model.setStart_Date(cursor.getString(11));
				status_model.setEnd_Date(cursor.getString(12));
				status_model.setSyn_Status(cursor.getString(13));
				status_model.setCreated_Date(cursor.getString(14));
				status_model.setTransaction_Date(cursor.getString(15));
				status_model.setDisplay_Flag(cursor.getString(16));
				status_model.setRemarks(cursor.getString(17));
				status_model.setWork_TaskType_ID(Integer.parseInt(cursor.getString(18)));
				status_model.setMain_Task_ID(Integer.parseInt(cursor.getString(19)));
				status_model.setMain_Task_Name(cursor.getString(20));
				status_model.setLink_ToBill(cursor.getString(21));
				status_model.setSum_Entered_Qty(cursor.getString(22));

				get_Tasks_bySiteID.add(status_model);
			} while (cursor.moveToNext());
		}
		if (cursor != null && !cursor.isClosed()) {
			cursor.close();

		}
		System.out.println("db size of list"+get_Tasks_bySiteID.size());
		return get_Tasks_bySiteID;

	}

//find TABLE_Project_Status record in Database
	public Status_Model find_WorkMasterId_SiteID_DisplayFlag_ProjectStatus(int work_master_id, int site_id, String display_flag) throws SQLException {
		    	SQLiteDatabase db = this.getWritableDatabase();
		    	 
		    	Status_Model status_model = new Status_Model();
		    	
		    Cursor cursor = db.query(true, TABLE_PROJECT_STATUS, new String[] {
		    		 COLUMN_PROJECT_STATUS_ID,
	                 COLUMN_PROJECT_ID_PRJ_STATUS,
	                 COLUMN_SITE_ID_PRJ_STATUS,
	                 COLUMN_PRJ_EST_WORKMASTER_ID_PRJ_STATUS,
	                 COLUMN_PRJ_EST_WORK_LOCATION_NAME_PRJ_STATUS,
	                 COLUMN_PERCENTAGE_COMPLETION_PRJ_STATUS,
	                 COLUMN_PRJ_EST_WORK_TOT_QTY_PRJ_STATUS,
	                 COLUMN_PRJ_EST_WORK_TOT_QTY_UNITS_PRJ_STATUS,
	                 COLUMN_PRJ_EST_WORK_COMP_QTY_PRJ_STATUS,
	                 COLUMN_PRJ_WORK_EST_START_DATE_PRJ_STATUS,	               
	                 COLUMN_PRJ_WORK_EST_END_DATE_PRJ_STATUS,
	                 COLUMN_START_DATE_PRJ_STATUS,
	                 COLUMN_END_DATE_PRJ_STATUS,
	                 COLUMN_SYN_STATUS_PRJ_STATUS,
	                 COLUMN_CREATED_DATE_PRJ_STATUS,
	                 COLUMN_TRANSACTION_DATE_PRJ_STATUS,	                 
	                 COLUMN_DISPLAY_FLAG_PRJ_STATUS,
	                 COLUMN_REMARKS_PRJ_STATUS, 
	                 COLUMN_WORK_TASK_TYPE_ID_PRJ_STATUS,
	                 COLUMN_MAIN_TASK_ID_PRJ_STATUS,
	                 COLUMN_MAIN_TASK_NAME_PRJ_STATUS,
	                 COLUMN_LINK_TO_BILL_PRJ_STATUS,
	                 COLUMN_SUM_ENTERED_QTY_PRJ_STATUS,}, 
	                 COLUMN_PRJ_EST_WORKMASTER_ID_PRJ_STATUS + "=?" + " and "  +	 				                    		
	                		 COLUMN_SITE_ID_PRJ_STATUS + "=?"+ " and "  +	 				                    		
	                		 COLUMN_DISPLAY_FLAG_PRJ_STATUS + "=?", 
		                    new String[] {String.valueOf(work_master_id),String.valueOf(site_id), display_flag},
		                    null, null, null , null);
		 
		 
		        if (cursor.moveToFirst()) {
		            do {
		            	
		            	
		            	status_model.setProject_Status_ID(Integer.parseInt(cursor.getString(0)));
		            	status_model.setProject_ID(Integer.parseInt(cursor.getString(1)));
		            	status_model.setSite_ID(Integer.parseInt(cursor.getString(2)));
		            	status_model.setPRJ_EST_WorkMaster_ID(Integer.parseInt(cursor.getString(3)));	            	
		           		status_model.setPRJ_EST_WorkLocation_Name(cursor.getString(4));
		           		status_model.setPercentage_Completion(cursor.getString(5));
		           		status_model.setPRJ_EST_Work_TOT_QTY(cursor.getString(6));
		           		status_model.setPRJ_EST_Work_TOT_QTY_Units(cursor.getString(7));
		           		status_model.setPRJ_EST_Work_COM_QTY(cursor.getString(8));
		           		status_model.setPRJ_Work_EST_Start_Date(cursor.getString(9));
		           		status_model.setPRJ_Work_EST_End_Date(cursor.getString(10));
		           		
		           		status_model.setStart_Date(cursor.getString(11));	           		
		           		status_model.setEnd_Date(cursor.getString(12));
		           		status_model.setSyn_Status(cursor.getString(13));
		           		status_model.setCreated_Date(cursor.getString(14));		           		
		           		status_model.setTransaction_Date(cursor.getString(15));		           		
		           		status_model.setDisplay_Flag(cursor.getString(16));
		           		status_model.setRemarks(cursor.getString(17));
		           		status_model.setWork_TaskType_ID(Integer.parseInt(cursor.getString(18)));
		           		status_model.setMain_Task_ID(Integer.parseInt(cursor.getString(19)));
		           		status_model.setMain_Task_Name(cursor.getString(20));
		           		status_model.setLink_ToBill(cursor.getString(21));
		           		status_model.setSum_Entered_Qty(cursor.getString(22));	 	       	        
		           
		            } while (cursor.moveToNext());
		        }
		        if (cursor != null && !cursor.isClosed()) {
		            cursor.close();
		           
		        }
		        System.out.println("counting records"+cursor.getCount());
		        return status_model;	 
		 
		    }
//find work_master_id and display_flag inproject_status_table record in Database
	public Status_Model find_SiteID_WorkMaster_ID_DisplayFlag_ProjectStatus_Table(int selected_site_id ,int work_master_id, String display_flag) throws SQLException {
		    	SQLiteDatabase db = this.getWritableDatabase();
		    	 
		    	Status_Model status_model = new Status_Model();
		    	
		    Cursor cursor = db.query(true, TABLE_PROJECT_STATUS, new String[] {
		    		COLUMN_PROJECT_STATUS_ID,
	                 COLUMN_PROJECT_ID_PRJ_STATUS,
	                 COLUMN_SITE_ID_PRJ_STATUS,
	                 COLUMN_PRJ_EST_WORKMASTER_ID_PRJ_STATUS,
	                 COLUMN_PRJ_EST_WORK_LOCATION_NAME_PRJ_STATUS,
	                 COLUMN_PERCENTAGE_COMPLETION_PRJ_STATUS,
	                 COLUMN_PRJ_EST_WORK_TOT_QTY_PRJ_STATUS,
	                 COLUMN_PRJ_EST_WORK_TOT_QTY_UNITS_PRJ_STATUS,
	                 COLUMN_PRJ_EST_WORK_COMP_QTY_PRJ_STATUS,
	                 COLUMN_PRJ_WORK_EST_START_DATE_PRJ_STATUS,	               
	                 COLUMN_PRJ_WORK_EST_END_DATE_PRJ_STATUS,
	                 COLUMN_START_DATE_PRJ_STATUS,
	                 COLUMN_END_DATE_PRJ_STATUS,
	                 COLUMN_SYN_STATUS_PRJ_STATUS,
	                 COLUMN_CREATED_DATE_PRJ_STATUS,
	                 COLUMN_TRANSACTION_DATE_PRJ_STATUS,	                 
	                 COLUMN_DISPLAY_FLAG_PRJ_STATUS,
	                 COLUMN_REMARKS_PRJ_STATUS,
	                 COLUMN_WORK_TASK_TYPE_ID_PRJ_STATUS,
	                 COLUMN_MAIN_TASK_ID_PRJ_STATUS,
	                 COLUMN_MAIN_TASK_NAME_PRJ_STATUS,
	                 COLUMN_LINK_TO_BILL_PRJ_STATUS,
	                 COLUMN_SUM_ENTERED_QTY_PRJ_STATUS,}, 
	                 COLUMN_SITE_ID_PRJ_STATUS + "=?" + " and "  +
	                 COLUMN_PRJ_EST_WORKMASTER_ID_PRJ_STATUS + "=?" + " and "  +	 				                    		
	                		 COLUMN_DISPLAY_FLAG_PRJ_STATUS + "=?", 
		                    new String[] {String.valueOf(selected_site_id),
		    		String.valueOf(work_master_id), display_flag},
		                    null, null, null , null);
		 
		 
		        if (cursor.moveToFirst()) {
		            do {
		            	
		            	
		            	status_model.setProject_Status_ID(Integer.parseInt(cursor.getString(0)));
		            	status_model.setProject_ID(Integer.parseInt(cursor.getString(1)));
		            	status_model.setSite_ID(Integer.parseInt(cursor.getString(2)));
		            	status_model.setPRJ_EST_WorkMaster_ID(Integer.parseInt(cursor.getString(3)));	            	
		           		status_model.setPRJ_EST_WorkLocation_Name(cursor.getString(4));
		           		status_model.setPercentage_Completion(cursor.getString(5));
		           		status_model.setPRJ_EST_Work_TOT_QTY(cursor.getString(6));
		           		status_model.setPRJ_EST_Work_TOT_QTY_Units(cursor.getString(7));
		           		status_model.setPRJ_EST_Work_COM_QTY(cursor.getString(8));
		           		status_model.setPRJ_Work_EST_Start_Date(cursor.getString(9));
		           		status_model.setPRJ_Work_EST_End_Date(cursor.getString(10));
		           		
		           		status_model.setStart_Date(cursor.getString(11));	           		
		           		status_model.setEnd_Date(cursor.getString(12));
		           		status_model.setSyn_Status(cursor.getString(13));
		           		status_model.setCreated_Date(cursor.getString(14));		           		
		           		status_model.setTransaction_Date(cursor.getString(15));		           		
		           		status_model.setDisplay_Flag(cursor.getString(16));
		           		status_model.setRemarks(cursor.getString(17));
		           		status_model.setWork_TaskType_ID(Integer.parseInt(cursor.getString(18)));
		           		status_model.setMain_Task_ID(Integer.parseInt(cursor.getString(19)));
		           		status_model.setMain_Task_Name(cursor.getString(20));
		           		status_model.setLink_ToBill(cursor.getString(21));
		           		status_model.setSum_Entered_Qty(cursor.getString(22));	 	 	       	        
		           
		            } while (cursor.moveToNext());
		        }
		        if (cursor != null && !cursor.isClosed()) {
		            cursor.close();
		           
		        }
		        System.out.println("counting records"+cursor.getCount());
		        return status_model;	 
		 
		    }
//find work_master_id and display_flag inproject_status_table record in Database
	public Status_Model find_SiteID_MainTask_ID_DisplayFlag_LinkToBill_ProjectStatus_Table(int selected_site_id ,int main_Task_id,	String display_flag, String link_To_Bill) throws SQLException {
        SQLiteDatabase db = this.getWritableDatabase();

        Status_Model status_model = new Status_Model();

        Cursor cursor = db.query(true, TABLE_PROJECT_STATUS, new String[]{
                        COLUMN_PROJECT_STATUS_ID,
                        COLUMN_PROJECT_ID_PRJ_STATUS,
                        COLUMN_SITE_ID_PRJ_STATUS,
                        COLUMN_PRJ_EST_WORKMASTER_ID_PRJ_STATUS,
                        COLUMN_PRJ_EST_WORK_LOCATION_NAME_PRJ_STATUS,
                        COLUMN_PERCENTAGE_COMPLETION_PRJ_STATUS,
                        COLUMN_PRJ_EST_WORK_TOT_QTY_PRJ_STATUS,
                        COLUMN_PRJ_EST_WORK_TOT_QTY_UNITS_PRJ_STATUS,
                        COLUMN_PRJ_EST_WORK_COMP_QTY_PRJ_STATUS,
                        COLUMN_PRJ_WORK_EST_START_DATE_PRJ_STATUS,
                        COLUMN_PRJ_WORK_EST_END_DATE_PRJ_STATUS,
                        COLUMN_START_DATE_PRJ_STATUS,
                        COLUMN_END_DATE_PRJ_STATUS,
                        COLUMN_SYN_STATUS_PRJ_STATUS,
                        COLUMN_CREATED_DATE_PRJ_STATUS,
                        COLUMN_TRANSACTION_DATE_PRJ_STATUS,
                        COLUMN_DISPLAY_FLAG_PRJ_STATUS,
                        COLUMN_REMARKS_PRJ_STATUS,
                        COLUMN_WORK_TASK_TYPE_ID_PRJ_STATUS,
                        COLUMN_MAIN_TASK_ID_PRJ_STATUS,
                        COLUMN_MAIN_TASK_NAME_PRJ_STATUS,
                        COLUMN_LINK_TO_BILL_PRJ_STATUS,
                        COLUMN_SUM_ENTERED_QTY_PRJ_STATUS,},
                COLUMN_SITE_ID_PRJ_STATUS + "=?" + " and " +
                        COLUMN_MAIN_TASK_ID_PRJ_STATUS + "=?" + " and " +
                        COLUMN_DISPLAY_FLAG_PRJ_STATUS + "=?" + " and " +
                        COLUMN_LINK_TO_BILL_PRJ_STATUS + "=?",
                new String[]{String.valueOf(selected_site_id),
                        String.valueOf(main_Task_id), display_flag, link_To_Bill},
                null, null, null, null);


        if (cursor.moveToFirst()) {
            do {


                status_model.setProject_Status_ID(Integer.parseInt(cursor.getString(0)));
                status_model.setProject_ID(Integer.parseInt(cursor.getString(1)));
                status_model.setSite_ID(Integer.parseInt(cursor.getString(2)));
                status_model.setPRJ_EST_WorkMaster_ID(Integer.parseInt(cursor.getString(3)));
                status_model.setPRJ_EST_WorkLocation_Name(cursor.getString(4));
                status_model.setPercentage_Completion(cursor.getString(5));
                status_model.setPRJ_EST_Work_TOT_QTY(cursor.getString(6));
                status_model.setPRJ_EST_Work_TOT_QTY_Units(cursor.getString(7));
                status_model.setPRJ_EST_Work_COM_QTY(cursor.getString(8));
                status_model.setPRJ_Work_EST_Start_Date(cursor.getString(9));
                status_model.setPRJ_Work_EST_End_Date(cursor.getString(10));

                status_model.setStart_Date(cursor.getString(11));
                status_model.setEnd_Date(cursor.getString(12));
                status_model.setSyn_Status(cursor.getString(13));
                status_model.setCreated_Date(cursor.getString(14));
                status_model.setTransaction_Date(cursor.getString(15));
                status_model.setDisplay_Flag(cursor.getString(16));
                status_model.setRemarks(cursor.getString(17));
                status_model.setWork_TaskType_ID(Integer.parseInt(cursor.getString(18)));
                status_model.setMain_Task_ID(Integer.parseInt(cursor.getString(19)));
                status_model.setMain_Task_Name(cursor.getString(20));
                status_model.setLink_ToBill(cursor.getString(21));
                status_model.setSum_Entered_Qty(cursor.getString(22));

            } while (cursor.moveToNext());
        }
        if (cursor != null && !cursor.isClosed()) {
            cursor.close();

        }
        System.out.println("counting records of link to billl--" + cursor.getCount());
        return status_model;
    }
//	find   site_id and work_master_id in project_status_table record in Database
    public Status_Model find_SiteId_WorkMaster_Id_ProjectStatus_Table(int site_id, int work_master_id) throws SQLException {
	    	SQLiteDatabase db = this.getWritableDatabase();
	    	 
	    	Status_Model status_model = new Status_Model();
	    	
	    Cursor cursor = db.query(true, TABLE_PROJECT_STATUS, new String[] {
	    		COLUMN_PROJECT_STATUS_ID,
                 COLUMN_PROJECT_ID_PRJ_STATUS,
                 COLUMN_SITE_ID_PRJ_STATUS,
                 COLUMN_PRJ_EST_WORKMASTER_ID_PRJ_STATUS,
                 COLUMN_PRJ_EST_WORK_LOCATION_NAME_PRJ_STATUS,
                 COLUMN_PERCENTAGE_COMPLETION_PRJ_STATUS,
                 COLUMN_PRJ_EST_WORK_TOT_QTY_PRJ_STATUS,
                 COLUMN_PRJ_EST_WORK_TOT_QTY_UNITS_PRJ_STATUS,
                 COLUMN_PRJ_EST_WORK_COMP_QTY_PRJ_STATUS,
                 COLUMN_PRJ_WORK_EST_START_DATE_PRJ_STATUS,	               
                 COLUMN_PRJ_WORK_EST_END_DATE_PRJ_STATUS,
                 COLUMN_START_DATE_PRJ_STATUS,
                 COLUMN_END_DATE_PRJ_STATUS,
                 COLUMN_SYN_STATUS_PRJ_STATUS,
                 COLUMN_CREATED_DATE_PRJ_STATUS,
                 COLUMN_TRANSACTION_DATE_PRJ_STATUS,	                 
                 COLUMN_DISPLAY_FLAG_PRJ_STATUS,
                 COLUMN_REMARKS_PRJ_STATUS,
                 COLUMN_WORK_TASK_TYPE_ID_PRJ_STATUS,
                 COLUMN_MAIN_TASK_ID_PRJ_STATUS,
                 COLUMN_MAIN_TASK_NAME_PRJ_STATUS,
                 COLUMN_LINK_TO_BILL_PRJ_STATUS,
                 COLUMN_SUM_ENTERED_QTY_PRJ_STATUS,}, 
                 COLUMN_SITE_ID_PRJ_STATUS + "=?" + " and "  +	 				                    		
                		 COLUMN_PRJ_EST_WORKMASTER_ID_PRJ_STATUS + "=?", 
	                    new String[] {String.valueOf(site_id), String.valueOf(work_master_id)},
	                    null, null, null , null);
	 
	 
	        if (cursor.moveToFirst()) {
	            do {
	            	
	            	
	            	status_model.setProject_Status_ID(Integer.parseInt(cursor.getString(0)));
	            	status_model.setProject_ID(Integer.parseInt(cursor.getString(1)));
	            	status_model.setSite_ID(Integer.parseInt(cursor.getString(2)));
	            	status_model.setPRJ_EST_WorkMaster_ID(Integer.parseInt(cursor.getString(3)));	            	
	           		status_model.setPRJ_EST_WorkLocation_Name(cursor.getString(4));
	           		status_model.setPercentage_Completion(cursor.getString(5));
	           		status_model.setPRJ_EST_Work_TOT_QTY(cursor.getString(6));
	           		status_model.setPRJ_EST_Work_TOT_QTY_Units(cursor.getString(7));
	           		status_model.setPRJ_EST_Work_COM_QTY(cursor.getString(8));
	           		status_model.setPRJ_Work_EST_Start_Date(cursor.getString(9));
	           		status_model.setPRJ_Work_EST_End_Date(cursor.getString(10));
	           		status_model.setStart_Date(cursor.getString(11));	           		
	           		status_model.setEnd_Date(cursor.getString(12));
	           		status_model.setSyn_Status(cursor.getString(13));
	           		status_model.setCreated_Date(cursor.getString(14));		           		
	           		status_model.setTransaction_Date(cursor.getString(15));		           		
	           		status_model.setDisplay_Flag(cursor.getString(16));
	           		status_model.setRemarks(cursor.getString(17));
	           		status_model.setWork_TaskType_ID(Integer.parseInt(cursor.getString(18)));
	           		status_model.setMain_Task_ID(Integer.parseInt(cursor.getString(19)));
	           		status_model.setMain_Task_Name(cursor.getString(20));
	           		status_model.setLink_ToBill(cursor.getString(21));
	           		status_model.setSum_Entered_Qty(cursor.getString(22));	  	       	        
	           
	            } while (cursor.moveToNext());
	        }
	        if (cursor != null && !cursor.isClosed()) {
	            cursor.close();
	           
	        }
	        System.out.println("counting records"+cursor.getCount());
	        return status_model;	 
	 
	    }
//  find   site_id and work_master_id in project_status_table record in Database
    public int CountRecords_Matched_SiteId_WorkMasterId_ProjectStatus_Table(int site_id, int work_master_id) throws SQLException {
    	SQLiteDatabase db = this.getWritableDatabase();
    	 
    	Status_Model status_model = new Status_Model();
    	
    Cursor cursor = db.query(true, TABLE_PROJECT_STATUS, new String[] {
    		COLUMN_PROJECT_STATUS_ID,
             COLUMN_PROJECT_ID_PRJ_STATUS,
             COLUMN_SITE_ID_PRJ_STATUS,
             COLUMN_PRJ_EST_WORKMASTER_ID_PRJ_STATUS,
             COLUMN_PRJ_EST_WORK_LOCATION_NAME_PRJ_STATUS,
             COLUMN_PERCENTAGE_COMPLETION_PRJ_STATUS,
             COLUMN_PRJ_EST_WORK_TOT_QTY_PRJ_STATUS,
             COLUMN_PRJ_EST_WORK_TOT_QTY_UNITS_PRJ_STATUS,
             COLUMN_PRJ_EST_WORK_COMP_QTY_PRJ_STATUS,
             COLUMN_PRJ_WORK_EST_START_DATE_PRJ_STATUS,	               
             COLUMN_PRJ_WORK_EST_END_DATE_PRJ_STATUS,
             COLUMN_START_DATE_PRJ_STATUS,
             COLUMN_END_DATE_PRJ_STATUS,
             COLUMN_SYN_STATUS_PRJ_STATUS,
             COLUMN_CREATED_DATE_PRJ_STATUS,
             COLUMN_TRANSACTION_DATE_PRJ_STATUS,	                 
             COLUMN_DISPLAY_FLAG_PRJ_STATUS,
             COLUMN_REMARKS_PRJ_STATUS,
             COLUMN_WORK_TASK_TYPE_ID_PRJ_STATUS,
             COLUMN_MAIN_TASK_ID_PRJ_STATUS,
             COLUMN_MAIN_TASK_NAME_PRJ_STATUS,
             COLUMN_LINK_TO_BILL_PRJ_STATUS,
             COLUMN_SUM_ENTERED_QTY_PRJ_STATUS,}, 
             COLUMN_SITE_ID_PRJ_STATUS + "=?" + " and "  +	 				                    		
            		 COLUMN_PRJ_EST_WORKMASTER_ID_PRJ_STATUS + "=?", 
                    new String[] {String.valueOf(site_id), String.valueOf(work_master_id)},
                    null, null, null , null);
 
 
        if (cursor.moveToFirst()) {
            do {
            	
            	
            	status_model.setProject_Status_ID(Integer.parseInt(cursor.getString(0)));
            	status_model.setProject_ID(Integer.parseInt(cursor.getString(1)));
            	status_model.setSite_ID(Integer.parseInt(cursor.getString(2)));
            	status_model.setPRJ_EST_WorkMaster_ID(Integer.parseInt(cursor.getString(3)));	            	
           		status_model.setPRJ_EST_WorkLocation_Name(cursor.getString(4));
           		status_model.setPercentage_Completion(cursor.getString(5));
           		status_model.setPRJ_EST_Work_TOT_QTY(cursor.getString(6));
           		status_model.setPRJ_EST_Work_TOT_QTY_Units(cursor.getString(7));
           		status_model.setPRJ_EST_Work_COM_QTY(cursor.getString(8));
           		status_model.setPRJ_Work_EST_Start_Date(cursor.getString(9));
           		status_model.setPRJ_Work_EST_End_Date(cursor.getString(10));
           		
           		status_model.setStart_Date(cursor.getString(11));	           		
           		status_model.setEnd_Date(cursor.getString(12));
           		status_model.setSyn_Status(cursor.getString(13));
           		status_model.setCreated_Date(cursor.getString(14));		           		
           		status_model.setTransaction_Date(cursor.getString(15));		           		
           		status_model.setDisplay_Flag(cursor.getString(16));
           		status_model.setRemarks(cursor.getString(17));
           		status_model.setWork_TaskType_ID(Integer.parseInt(cursor.getString(18)));
           		status_model.setMain_Task_ID(Integer.parseInt(cursor.getString(19)));
           		status_model.setMain_Task_Name(cursor.getString(20));
           		status_model.setLink_ToBill(cursor.getString(21));
           		status_model.setSum_Entered_Qty(cursor.getString(22));	  		       	        
           
            } while (cursor.moveToNext());
        }
        if (cursor != null && !cursor.isClosed()) {
            cursor.close();
            
        }
        System.out.println("counting records"+cursor.getCount());
        return cursor.getCount();	 
 
    }
//find work_master_id and syn_status_flag in project_status_table record in Database
	public ArrayList<Status_Model> find_WorkMaster_ID_SynStatus_ProjectStatus_Table(int work_master_id, String syn_status) throws SQLException {
			    	SQLiteDatabase db = this.getWritableDatabase();
			    	 
			        ArrayList<Status_Model> get_Tasks = new ArrayList<Status_Model>();
			    Cursor cursor = db.query(true, TABLE_PROJECT_STATUS, new String[] {
			    		 COLUMN_PROJECT_STATUS_ID,
		                 COLUMN_PROJECT_ID_PRJ_STATUS,
		                 COLUMN_SITE_ID_PRJ_STATUS,
		                 COLUMN_PRJ_EST_WORKMASTER_ID_PRJ_STATUS,
		                 COLUMN_PRJ_EST_WORK_LOCATION_NAME_PRJ_STATUS,
		                 COLUMN_PERCENTAGE_COMPLETION_PRJ_STATUS,
		                 COLUMN_PRJ_EST_WORK_TOT_QTY_PRJ_STATUS,
		                 COLUMN_PRJ_EST_WORK_TOT_QTY_UNITS_PRJ_STATUS,
		                 COLUMN_PRJ_EST_WORK_COMP_QTY_PRJ_STATUS,
		                 COLUMN_PRJ_WORK_EST_START_DATE_PRJ_STATUS,	               
		                 COLUMN_PRJ_WORK_EST_END_DATE_PRJ_STATUS,
		                 COLUMN_START_DATE_PRJ_STATUS,
		                 COLUMN_END_DATE_PRJ_STATUS,
		                 COLUMN_SYN_STATUS_PRJ_STATUS,
		                 COLUMN_CREATED_DATE_PRJ_STATUS,
		                 COLUMN_TRANSACTION_DATE_PRJ_STATUS,	                 
		                 COLUMN_DISPLAY_FLAG_PRJ_STATUS,
		                 COLUMN_REMARKS_PRJ_STATUS,
		                 COLUMN_WORK_TASK_TYPE_ID_PRJ_STATUS,
		                 COLUMN_MAIN_TASK_ID_PRJ_STATUS,
		                 COLUMN_MAIN_TASK_NAME_PRJ_STATUS,
		                 COLUMN_LINK_TO_BILL_PRJ_STATUS,
		                 COLUMN_SUM_ENTERED_QTY_PRJ_STATUS,}, 			                  
		                 COLUMN_PRJ_EST_WORKMASTER_ID_PRJ_STATUS + "=?"+ " and "  +
		                		 COLUMN_SYN_STATUS_PRJ_STATUS + "=?", 
			                    new String[] {String.valueOf(work_master_id),syn_status},
			                    null, null, null , null);
			  
			   
			        if (cursor.moveToFirst()) {
			            do {
			            	Status_Model status_model = new Status_Model();
			            	status_model.setProject_Status_ID(Integer.parseInt(cursor.getString(0)));
			            	status_model.setProject_ID(Integer.parseInt(cursor.getString(1)));
			            	status_model.setSite_ID(Integer.parseInt(cursor.getString(2)));
			            	status_model.setPRJ_EST_WorkMaster_ID(Integer.parseInt(cursor.getString(3)));	            	
			           		status_model.setPRJ_EST_WorkLocation_Name(cursor.getString(4));
			           		status_model.setPercentage_Completion(cursor.getString(5));
			           		status_model.setPRJ_EST_Work_TOT_QTY(cursor.getString(6));
			           		status_model.setPRJ_EST_Work_TOT_QTY_Units(cursor.getString(7));
			           		status_model.setPRJ_EST_Work_COM_QTY(cursor.getString(8));
			           		status_model.setPRJ_Work_EST_Start_Date(cursor.getString(9));
			           		status_model.setPRJ_Work_EST_End_Date(cursor.getString(10));
			           		
			           		status_model.setStart_Date(cursor.getString(11));	           		
			           		status_model.setEnd_Date(cursor.getString(12));
			           		status_model.setSyn_Status(cursor.getString(13));
			           		status_model.setCreated_Date(cursor.getString(14));		           		
			           		status_model.setTransaction_Date(cursor.getString(15));		           		
			           		status_model.setDisplay_Flag(cursor.getString(16));
			           		status_model.setRemarks(cursor.getString(17));
			           		status_model.setWork_TaskType_ID(Integer.parseInt(cursor.getString(18)));
			           		status_model.setMain_Task_ID(Integer.parseInt(cursor.getString(19)));
			           		status_model.setMain_Task_Name(cursor.getString(20));
			           		status_model.setLink_ToBill(cursor.getString(21));
			           		status_model.setSum_Entered_Qty(cursor.getString(22));	  	
			           		
			           		get_Tasks.add(status_model);
			            } while (cursor.moveToNext());
			        }
			        if (cursor != null && !cursor.isClosed()) {
			            cursor.close();
			           
			        }
			        System.out.println("db size of list"+get_Tasks.size());
			        return get_Tasks;
			 	 
			    }
// find SiteID and syn_Status_flag in PROJECT_STATUS  and adding to arraylist
	public ArrayList<Status_Model> find_SiteID_SynStatusFlag_ProjectStatusList(int site_id, String syn_status_flag) throws SQLException {
		    	SQLiteDatabase db = this.getWritableDatabase();
		    	 
		        ArrayList<Status_Model> get_Tasks_bySiteID_SynStatus = new ArrayList<Status_Model>();
		    Cursor cursor = db.query(true, TABLE_PROJECT_STATUS, new String[] {
		    		 COLUMN_PROJECT_STATUS_ID,
	                 COLUMN_PROJECT_ID_PRJ_STATUS,
	                 COLUMN_SITE_ID_PRJ_STATUS,
	                 COLUMN_PRJ_EST_WORKMASTER_ID_PRJ_STATUS,
	                 COLUMN_PRJ_EST_WORK_LOCATION_NAME_PRJ_STATUS,
	                 COLUMN_PERCENTAGE_COMPLETION_PRJ_STATUS,
	                 COLUMN_PRJ_EST_WORK_TOT_QTY_PRJ_STATUS,
	                 COLUMN_PRJ_EST_WORK_TOT_QTY_UNITS_PRJ_STATUS,
	                 COLUMN_PRJ_EST_WORK_COMP_QTY_PRJ_STATUS,
	                 COLUMN_PRJ_WORK_EST_START_DATE_PRJ_STATUS,	               
	                 COLUMN_PRJ_WORK_EST_END_DATE_PRJ_STATUS,
	                 COLUMN_START_DATE_PRJ_STATUS,
	                 COLUMN_END_DATE_PRJ_STATUS,
	                 COLUMN_SYN_STATUS_PRJ_STATUS,
	                 COLUMN_CREATED_DATE_PRJ_STATUS,
	                 COLUMN_TRANSACTION_DATE_PRJ_STATUS,	                 
	                 COLUMN_DISPLAY_FLAG_PRJ_STATUS,
	                 COLUMN_REMARKS_PRJ_STATUS,COLUMN_WORK_TASK_TYPE_ID_PRJ_STATUS,
	                 COLUMN_MAIN_TASK_ID_PRJ_STATUS,
	                 COLUMN_MAIN_TASK_NAME_PRJ_STATUS,
	                 COLUMN_LINK_TO_BILL_PRJ_STATUS,
	                 COLUMN_SUM_ENTERED_QTY_PRJ_STATUS,}, 
	                 COLUMN_SITE_ID_PRJ_STATUS + "=?"+ " and "  +
	                		 COLUMN_SYN_STATUS_PRJ_STATUS + "=?", 
		                    new String[] {String.valueOf(site_id),syn_status_flag},
		                    null, null, null , null);
		  
		   
		        if (cursor.moveToFirst()) {
		            do {
		            	Status_Model status_model = new Status_Model();
		            	status_model.setProject_Status_ID(Integer.parseInt(cursor.getString(0)));
		            	status_model.setProject_ID(Integer.parseInt(cursor.getString(1)));
		            	status_model.setSite_ID(Integer.parseInt(cursor.getString(2)));
		            	status_model.setPRJ_EST_WorkMaster_ID(Integer.parseInt(cursor.getString(3)));	            	
		           		status_model.setPRJ_EST_WorkLocation_Name(cursor.getString(4));
		           		status_model.setPercentage_Completion(cursor.getString(5));
		           		status_model.setPRJ_EST_Work_TOT_QTY(cursor.getString(6));
		           		status_model.setPRJ_EST_Work_TOT_QTY_Units(cursor.getString(7));
		           		status_model.setPRJ_EST_Work_COM_QTY(cursor.getString(8));
		           		status_model.setPRJ_Work_EST_Start_Date(cursor.getString(9));
		           		status_model.setPRJ_Work_EST_End_Date(cursor.getString(10));
		           		
		           		status_model.setStart_Date(cursor.getString(11));	           		
		           		status_model.setEnd_Date(cursor.getString(12));
		           		status_model.setSyn_Status(cursor.getString(13));
		           		status_model.setCreated_Date(cursor.getString(14));		           		
		           		status_model.setTransaction_Date(cursor.getString(15));		           		
		           		status_model.setDisplay_Flag(cursor.getString(16));
		           		status_model.setRemarks(cursor.getString(17));
		           		status_model.setWork_TaskType_ID(Integer.parseInt(cursor.getString(18)));
		           		status_model.setMain_Task_ID(Integer.parseInt(cursor.getString(19)));
		           		status_model.setMain_Task_Name(cursor.getString(20));
		           		status_model.setLink_ToBill(cursor.getString(21));
		           		status_model.setSum_Entered_Qty(cursor.getString(22));	  
		           		
		           		get_Tasks_bySiteID_SynStatus.add(status_model);
		            } while (cursor.moveToNext());
		        }
		        if (cursor != null && !cursor.isClosed()) {
		            cursor.close();
		          
		        }
		        System.out.println("db size of list"+get_Tasks_bySiteID_SynStatus.size());
		        return get_Tasks_bySiteID_SynStatus;
		 	 
		    }
//find last_transactiondate TABLE_Project_Status record in Database
	public Status_Model find_Last_TransactionDate_Project_Status_Table() {
		    	String query = "Select * FROM " + TABLE_PROJECT_STATUS;
		    	
		    	SQLiteDatabase db = this.getWritableDatabase();
		    	Cursor cursor1 = db.rawQuery(query,null);
		    	
		    	
		    	Cursor cursor = db.rawQuery(query+ " ORDER BY "+COLUMN_TRANSACTION_DATE_PRJ_STATUS + " DESC" +" LIMIT 1 " , new 

		    			String[] {}); 	
		    	
		    	System.out.println("count of max transaction date"+cursor.getCount()) ;
		    	Status_Model status_model = new Status_Model();
		    	
		    	if (cursor.moveToFirst()) {
		    		cursor.moveToFirst();

	            	status_model.setProject_Status_ID(Integer.parseInt(cursor.getString(0)));
	            	status_model.setProject_ID(Integer.parseInt(cursor.getString(1)));
	            	status_model.setSite_ID(Integer.parseInt(cursor.getString(2)));
	            	status_model.setPRJ_EST_WorkMaster_ID(Integer.parseInt(cursor.getString(3)));	            	
	           		status_model.setPRJ_EST_WorkLocation_Name(cursor.getString(4));
	           		status_model.setPercentage_Completion(cursor.getString(5));
	           		status_model.setPRJ_EST_Work_TOT_QTY(cursor.getString(6));
	           		status_model.setPRJ_EST_Work_TOT_QTY_Units(cursor.getString(7));
	           		status_model.setPRJ_EST_Work_COM_QTY(cursor.getString(8));
	           		status_model.setPRJ_Work_EST_Start_Date(cursor.getString(9));
	           		status_model.setPRJ_Work_EST_End_Date(cursor.getString(10));
	           		
	           		status_model.setStart_Date(cursor.getString(11));	           		
	           		status_model.setEnd_Date(cursor.getString(12));
	           		status_model.setSyn_Status(cursor.getString(13));
	           		status_model.setCreated_Date(cursor.getString(14));		           		
	           		status_model.setTransaction_Date(cursor.getString(15));		           		
	           		status_model.setDisplay_Flag(cursor.getString(16));
	           		status_model.setRemarks(cursor.getString(17));
	           		status_model.setWork_TaskType_ID(Integer.parseInt(cursor.getString(18)));
	           		status_model.setMain_Task_ID(Integer.parseInt(cursor.getString(19)));
	           		status_model.setMain_Task_Name(cursor.getString(20));
	           		status_model.setLink_ToBill(cursor.getString(21));
	           		status_model.setSum_Entered_Qty(cursor.getString(22));	  
 	       	        
		    		cursor.close();
		    	} else {
		    		
		    		status_model = null;    		
		    		
		    	}
		    	db.close();
		    	return status_model;
		    }
// Updating single PROJECT_STATUS row
	public int Update_Project_Status_Row(Status_Model status_model) {
		    SQLiteDatabase db = this.getWritableDatabase();
		    ContentValues values = new ContentValues();
		    values.put(COLUMN_PROJECT_STATUS_ID, status_model.getProject_Status_ID());
		    values.put(COLUMN_PROJECT_ID_PRJ_STATUS, status_model.getProject_ID());			       	      
	        values.put(COLUMN_SITE_ID_PRJ_STATUS, status_model.getSite_ID());  
	        values.put(COLUMN_PRJ_EST_WORKMASTER_ID_PRJ_STATUS, status_model.getPRJ_EST_WorkMaster_ID());		      
	        values.put(COLUMN_PRJ_EST_WORK_LOCATION_NAME_PRJ_STATUS, status_model.getPRJ_EST_WorkLocation_Name());  
	        values.put(COLUMN_PERCENTAGE_COMPLETION_PRJ_STATUS, status_model.getPercentage_Completion());		      
	        values.put(COLUMN_PRJ_EST_WORK_TOT_QTY_PRJ_STATUS, status_model.getPRJ_EST_Work_TOT_QTY());  
	        values.put(COLUMN_PRJ_EST_WORK_TOT_QTY_UNITS_PRJ_STATUS, status_model.getPRJ_EST_Work_TOT_QTY_Units());			      
	        values.put(COLUMN_PRJ_EST_WORK_COMP_QTY_PRJ_STATUS, status_model.getPRJ_EST_Work_COM_QTY());	
	        values.put(COLUMN_PRJ_WORK_EST_START_DATE_PRJ_STATUS, status_model.getPRJ_WorK_EST_Start_Date());	
	        values.put(COLUMN_PRJ_WORK_EST_END_DATE_PRJ_STATUS, status_model.getPRJ_Work_EST_End_Date());
	        values.put(COLUMN_START_DATE_PRJ_STATUS, status_model.getStart_Date());	
	        values.put(COLUMN_END_DATE_PRJ_STATUS, status_model.getEnd_Date());  
	        values.put(COLUMN_SYN_STATUS_PRJ_STATUS, status_model.getSyn_Status());  			      
	        values.put(COLUMN_CREATED_DATE_PRJ_STATUS, status_model.getCreated_Date());  
	        values.put(COLUMN_TRANSACTION_DATE_PRJ_STATUS, status_model.getTransaction_Date()); 			      
	        values.put(COLUMN_DISPLAY_FLAG_PRJ_STATUS, status_model.getDisplay_Flag());  
	        values.put(COLUMN_REMARKS_PRJ_STATUS, status_model.getRemarks());  
	        values.put(COLUMN_WORK_TASK_TYPE_ID_PRJ_STATUS, status_model.getWork_TaskType_ID()); 
	        values.put(COLUMN_MAIN_TASK_ID_PRJ_STATUS, status_model.getMain_Task_ID()); 
	        values.put(COLUMN_MAIN_TASK_NAME_PRJ_STATUS, status_model.getMain_Task_Name()); 
	        values.put(COLUMN_LINK_TO_BILL_PRJ_STATUS, status_model.getLink_ToBill()); 
	        values.put(COLUMN_SUM_ENTERED_QTY_PRJ_STATUS, status_model.getSum_Entered_Qty());
		    return db.update(TABLE_PROJECT_STATUS, values, COLUMN_PROJECT_STATUS_ID + " = ?", new String[] { String.valueOf(status_model.getProject_Status_ID()) });
		   
		    }
	public long add_Project_issues_Record(Status_Model status_model) {
				// TODO Auto-generated method stub
				 ContentValues values = new ContentValues();		 
			      
			        values.put(COLUMN_PROJECT_ID_PRJ_ISSUES, status_model.getProject_ID_Issues());			       	      
			        values.put(COLUMN_SITE_ID_PRJ_ISSUES, status_model.getSite_ID_ISSUES());  
			        values.put(COLUMN_PRJ_EST_WORKMASTER_ID_PRJ_ISSUES, status_model.getPRJ_EST_WorkMaster_ID_ISSUES());		      
			        values.put(COLUMN_PRJ_EST_WORK_LOCATION_NAME_PRJ_ISSUES, status_model.getPRJ_EST_WorkLocation_Name_ISSUES());  
			        values.put(COLUMN_ISSUES_TITLE_PRJ_ISSUES, status_model.getIssues_Title_ISSUES());  
			        values.put(COLUMN_ISSUES_DETAILS_PRJ_ISSUES, status_model.getIssues_Details_ISSUES()); 	
			        values.put(COLUMN_SYN_FLAG_PRJ_ISSUES, status_model.getSyn_Flag_ISSUES());  			       		      
			        values.put(COLUMN_DISPLAY_FLAG_PRJ_ISSUES, status_model.getDisplay_flag_ISSUES());
			        values.put(COLUMN_ISSUES_CRAETION_DATE_PRJ_ISSUES, status_model.getIssues_CreationDateTime_ISSUES());
			        values.put(COLUMN_ISSUES_PORTAL_ISSUES_ID, status_model.getProtal_ISSUES_id());
			        SQLiteDatabase db = this.getWritableDatabase();
				    return db.insert(TABLE_PROJECT_ISSUES, null, values);
//			        db.close();
	}
//find SiteID and work_master_id in PROJECT_ISSUES and arrange ORDERBY with PRJ_EST_WORKMASTER_ID_PRJ_ISSUES and adding to arraylist
    public ArrayList<Status_Model> find_SiteID_WorkMasterId_ProjectIssuesList(int site_id, int work_master_id) throws SQLException {
		SQLiteDatabase db = this.getWritableDatabase();
		ArrayList<Status_Model> get_issues_byTaskId = new ArrayList<Status_Model>();
		Cursor cursor = db.query(true, TABLE_PROJECT_ISSUES, new String[] {
			    		 COLUMN_PROJECT_ISSUES_ID,
		                 COLUMN_PROJECT_ID_PRJ_ISSUES,
		                 COLUMN_SITE_ID_PRJ_ISSUES,
		                 COLUMN_PRJ_EST_WORKMASTER_ID_PRJ_ISSUES,
		                 COLUMN_PRJ_EST_WORK_LOCATION_NAME_PRJ_ISSUES,		               
		                 COLUMN_ISSUES_TITLE_PRJ_ISSUES,
		                 COLUMN_ISSUES_DETAILS_PRJ_ISSUES,
		                 COLUMN_SYN_FLAG_PRJ_ISSUES,		                 
		                 COLUMN_ISSUES_CRAETION_DATE_PRJ_ISSUES,},
		                 COLUMN_SITE_ID_PRJ_ISSUES + "=?"+ " and "  +
		                 COLUMN_PRJ_EST_WORKMASTER_ID_PRJ_ISSUES + "=?", 
			                    new String[] {String.valueOf(site_id),String.valueOf(work_master_id)},
			                    null, null, COLUMN_PRJ_EST_WORKMASTER_ID_PRJ_ISSUES , null);
			  
			   
			        if (cursor.moveToFirst()) {
			            do {
			            	Status_Model status_model = new Status_Model();
			            	status_model.setProject_Issues_ID(Integer.parseInt(cursor.getString(0)));
			            	status_model.setProject_ID_Issues(Integer.parseInt(cursor.getString(1)));
			            	status_model.setSite_ID_ISSUES(Integer.parseInt(cursor.getString(2)));
			            	status_model.setPRJ_EST_WorkMaster_ID_ISSUES(Integer.parseInt(cursor.getString(3)));	            	
			           		status_model.setPRJ_EST_WorkLocation_Name_ISSUES(cursor.getString(4));
			           		status_model.setIssues_Title_ISSUES(cursor.getString(5));
			           		status_model.setIssues_Details_ISSUES(cursor.getString(6));
			           		status_model.setSyn_Flag_ISSUES(cursor.getString(7));
			           		status_model.setIssues_CreationDateTime_ISSUES(cursor.getString(8));
			           		
			           		
		 	       	    get_issues_byTaskId.add(status_model);
			            } while (cursor.moveToNext());
			        }
			        if (cursor != null && !cursor.isClosed()) {
			            cursor.close();
			           
			        }
			        System.out.println("db size of list"+get_issues_byTaskId.size());
			        return get_issues_byTaskId;
			 	 
			    }
	public ArrayList<Status_Model> find_ProjectIssuesImgsList(int issueeId) throws SQLException {
		SQLiteDatabase db = this.getWritableDatabase();
		ArrayList<Status_Model> get_images_byIssueId = new ArrayList<Status_Model>();
		String q="SELECT * FROM PROJECT_ISSUES_IMAGES WHERE PROJECT_ISSUES_ID="+ issueeId;
//		String q="SELECT * FROM PROJECT_ISSUES_IMAGES";
		Cursor cursor = db.rawQuery(q,null);
		int count=cursor.getCount();
		Log.d("count","count" +count);
		if (cursor.moveToFirst()) {
			do {

				Status_Model status_model = new Status_Model();
				status_model.setPROJECT_ISSUES_IMAGES_ID(Integer.parseInt(cursor.getString(0)));
				status_model.setPATH_PRJ_ISSUES_IMAGES(cursor.getString(5));
				status_model.setSYN_FLAG_PRJ_ISSUES_IMAGES(cursor.getString(6));
				status_model.setIMAGES_CRAETION_DATE_PRJ_ISSUES_IMAGES(cursor.getString(7));
				get_images_byIssueId.add(status_model);
			} while (cursor.moveToNext());
		}
		if (cursor != null && !cursor.isClosed()) {
			cursor.close();
		}
		return get_images_byIssueId;

	}
//find SiteID and Syn_Flag in PROJECT_ISSUES  adding to arraylist
    public ArrayList<Status_Model> find_SiteID_SynFlag_ProjectIssuesList(int site_id, String syn_flag) throws SQLException {
			    	SQLiteDatabase db = this.getWritableDatabase();
			    	 
			        ArrayList<Status_Model> get_issues_notSyned = new ArrayList<Status_Model>();
			    Cursor cursor = db.query(true, TABLE_PROJECT_ISSUES, new String[] {
			    		 COLUMN_PROJECT_ISSUES_ID,
		                 COLUMN_PROJECT_ID_PRJ_ISSUES,
		                 COLUMN_SITE_ID_PRJ_ISSUES,
		                 COLUMN_PRJ_EST_WORKMASTER_ID_PRJ_ISSUES,
		                 COLUMN_PRJ_EST_WORK_LOCATION_NAME_PRJ_ISSUES,		               
		                 COLUMN_ISSUES_TITLE_PRJ_ISSUES,
		                 COLUMN_ISSUES_DETAILS_PRJ_ISSUES,
		                 COLUMN_SYN_FLAG_PRJ_ISSUES,		                 
		                 COLUMN_ISSUES_CRAETION_DATE_PRJ_ISSUES,}, 
			                  
		                 COLUMN_SITE_ID_PRJ_ISSUES + "=?"+ " and "  +
		                 COLUMN_SYN_FLAG_PRJ_ISSUES + "=?", 
			                    new String[] {String.valueOf(site_id),syn_flag},
			                    null, null, COLUMN_PRJ_EST_WORKMASTER_ID_PRJ_ISSUES , null);
			  
			   
			        if (cursor.moveToFirst()) {
			            do {
			            	Status_Model status_model = new Status_Model();
			            	status_model.setProject_Issues_ID(Integer.parseInt(cursor.getString(0)));
			            	status_model.setProject_ID_Issues(Integer.parseInt(cursor.getString(1)));
			            	status_model.setSite_ID_ISSUES(Integer.parseInt(cursor.getString(2)));
			            	status_model.setPRJ_EST_WorkMaster_ID_ISSUES(Integer.parseInt(cursor.getString(3)));	            	
			           		status_model.setPRJ_EST_WorkLocation_Name_ISSUES(cursor.getString(4));
			           		status_model.setIssues_Title_ISSUES(cursor.getString(5));
			           		status_model.setIssues_Details_ISSUES(cursor.getString(6));
			           		status_model.setSyn_Flag_ISSUES(cursor.getString(7));
			           		status_model.setIssues_CreationDateTime_ISSUES(cursor.getString(8));
			           		get_issues_notSyned.add(status_model);
			            } while (cursor.moveToNext());
			        }
			        if (cursor != null && !cursor.isClosed()) {
			            cursor.close();
			            
			        }
			        System.out.println("db size of list"+get_issues_notSyned.size());
			        return get_issues_notSyned;
			 	 
			    }
    public String find_Portal_Issues_Id(int issueeId) throws SQLException {
		SQLiteDatabase db = this.getWritableDatabase();
		String q = "SELECT * FROM PROJECT_ISSUES WHERE ISSUES_PORTAL_ISSUES_ID=" + issueeId;
		Cursor cursor = db.rawQuery(q, null);
		String returnvalue=null;
		int count = cursor.getCount();
		if (count > 0)
		{
			if (cursor.moveToFirst()) {
				do
					returnvalue=cursor.getString(0);
				while (cursor.moveToNext());
			}
			cursor.close();
			System.out.println("returnvalue" + returnvalue);
			return returnvalue;
		}
		else
			return returnvalue;

	}
//find ProjectIssues_Id and Syn_Flag in PROJECT_ISSUES  adding to arraylist
    public ArrayList<Status_Model> find_IssuesID_SynFlag_ProjectIssuesList(int issues_id, String syn_flag) throws SQLException {
			    	SQLiteDatabase db = this.getWritableDatabase();
			    	 
			        ArrayList<Status_Model> get_issues_notSyned = new ArrayList<Status_Model>();
			    Cursor cursor = db.query(true, TABLE_PROJECT_ISSUES, new String[] {
			    		 COLUMN_PROJECT_ISSUES_ID,
		                 COLUMN_PROJECT_ID_PRJ_ISSUES,
		                 COLUMN_SITE_ID_PRJ_ISSUES,
		                 COLUMN_PRJ_EST_WORKMASTER_ID_PRJ_ISSUES,
		                 COLUMN_PRJ_EST_WORK_LOCATION_NAME_PRJ_ISSUES,		               
		                 COLUMN_ISSUES_TITLE_PRJ_ISSUES,
		                 COLUMN_ISSUES_DETAILS_PRJ_ISSUES,
		                 COLUMN_SYN_FLAG_PRJ_ISSUES,		                 
		                 COLUMN_ISSUES_CRAETION_DATE_PRJ_ISSUES,
						 COLUMN_ISSUES_PORTAL_ISSUES_ID,},

		                 COLUMN_PROJECT_ISSUES_ID + "=?"+ " and "  +
		                 COLUMN_SYN_FLAG_PRJ_ISSUES + "=?", 
			                    new String[] {String.valueOf(issues_id),syn_flag},
			                    null, null, COLUMN_PRJ_EST_WORKMASTER_ID_PRJ_ISSUES , null);
			  
			   
			        if (cursor.moveToFirst()) {
			            do {
			            	Status_Model status_model = new Status_Model();
			            	status_model.setProject_Issues_ID(Integer.parseInt(cursor.getString(0)));
			            	status_model.setProject_ID_Issues(Integer.parseInt(cursor.getString(1)));
			            	status_model.setSite_ID_ISSUES(Integer.parseInt(cursor.getString(2)));
			            	status_model.setPRJ_EST_WorkMaster_ID_ISSUES(Integer.parseInt(cursor.getString(3)));	            	
			           		status_model.setPRJ_EST_WorkLocation_Name_ISSUES(cursor.getString(4));
			           		status_model.setIssues_Title_ISSUES(cursor.getString(5));
			           		status_model.setIssues_Details_ISSUES(cursor.getString(6));
			           		status_model.setSyn_Flag_ISSUES(cursor.getString(7));
			           		status_model.setIssues_CreationDateTime_ISSUES(cursor.getString(8));
			           		status_model.setProtal_ISSUES_id(Integer.parseInt(cursor.getString(9)));

			           		
			           		get_issues_notSyned.add(status_model);
			            } while (cursor.moveToNext());
			        }
			        if (cursor != null && !cursor.isClosed()) {
			            cursor.close();
			           
			        }
			        System.out.println("db size of list"+get_issues_notSyned.size());
			        return get_issues_notSyned;
			 	 
			    }
// Updating single PROJECT_ISSUES row
    public int Update_ProjectIssuesRow(Status_Model status_model) {
		    SQLiteDatabase db = this.getWritableDatabase();

		    ContentValues values = new ContentValues();
		    values.put(COLUMN_PROJECT_ISSUES_ID, status_model.getProject_Issues_ID());
		    values.put(COLUMN_PROJECT_ID_PRJ_ISSUES, status_model.getProject_ID_Issues());			       	      
	        values.put(COLUMN_SITE_ID_PRJ_ISSUES, status_model.getSite_ID_ISSUES());  
	        values.put(COLUMN_PRJ_EST_WORKMASTER_ID_PRJ_ISSUES, status_model.getPRJ_EST_WorkMaster_ID_ISSUES());		      
	        values.put(COLUMN_PRJ_EST_WORK_LOCATION_NAME_PRJ_ISSUES, status_model.getPRJ_EST_WorkLocation_Name_ISSUES());  
	        values.put(COLUMN_ISSUES_TITLE_PRJ_ISSUES, status_model.getIssues_Title_ISSUES());  
	        values.put(COLUMN_ISSUES_DETAILS_PRJ_ISSUES, status_model.getIssues_Details_ISSUES()); 	
	        values.put(COLUMN_SYN_FLAG_PRJ_ISSUES, status_model.getSyn_Flag_ISSUES());  			       		      
	        values.put(COLUMN_ISSUES_CRAETION_DATE_PRJ_ISSUES, status_model.getIssues_CreationDateTime_ISSUES()); 
	        values.put(COLUMN_ISSUES_PORTAL_ISSUES_ID, status_model.getProtal_ISSUES_id());
		    // updating row
		    return db.update(TABLE_PROJECT_ISSUES, values, COLUMN_PROJECT_ISSUES_ID + " = ?",
		    new String[] { String.valueOf(status_model.getProject_Issues_ID()) });	
		   
		    }
//CRUD METHODS FOR PROJECT_ISSUES_TABLE
//inserting records
	public void add_Project_Images_Record(Status_Model status_model) {
				// TODO Auto-generated method stub
				 ContentValues values = new ContentValues();
			        values.put(COLUMN_PROJECT_ID_PRJ_IMAGES, status_model.getProject_ID_IMAGES());			       	      
			        values.put(COLUMN_SITE_ID_PRJ_IMAGES, status_model.getSite_ID_IMAGES());  
			        values.put(COLUMN_PRJ_EST_WORKMASTER_ID_PRJ_IMAGES, status_model.getPRJ_EST_WorkMaster_ID_IMAGES());		      
			        values.put(COLUMN_PRJ_EST_WORK_LOCATION_NAME_PRJ_IMAGES, status_model.getPRJ_EST_WorkLocation_Name_IMAGES());  
			        values.put(COLUMN_PATH_PRJ_IMAGES, status_model.getPath_IMAGES());  			        	
			        values.put(COLUMN_SYN_FLAG_PRJ_IMAGES, status_model.getSyn_Flag_IMAGES());  			       		      
			        values.put(COLUMN_IMAGES_CRAETION_DATE_PRJ_IMAGES, status_model.getImages_CreationDateTime_IMAGES()); 		    
			        SQLiteDatabase db = this.getWritableDatabase();
			        db.insert(TABLE_PROJECT_IMAGES, null, values);
			        db.close();
			}
	public long add_Project_Issues_Images_Record(Status_Model status_model) {
		// TODO Auto-generated method stub
		ContentValues values = new ContentValues();
		values.put(COLUMN_PROJECT_ISSUES_ID, status_model.getIssues_id());
		values.put(COLUMN_PROJECT_ID_PRJ_ISSUES_IMAGES, status_model.getPROJECTID_ISSUES_IMAGES_ID());
		values.put(COLUMN_SITE_ID_PRJ_ISSUES_IMAGES, status_model.getSITEID_ISSUES_IMAGES());
		values.put(COLUMN_PRJ_EST_WORKMASTER_ID_PRJ_ISSUES_IMAGES, status_model.getTASKID_ISSUES_IMAGES());
		values.put(COLUMN_PATH_PRJ_ISSUES_IMAGES, status_model.getPATH_PRJ_ISSUES_IMAGES());
		values.put(COLUMN_SYN_FLAG_PRJ_ISSUES_IMAGES, status_model.getSYN_FLAG_PRJ_ISSUES_IMAGES());
		values.put(COLUMN_DISPLAY_FLAG_PRJ_ISSUES_IMAGES, status_model.getDISPLAY_FLAG_PRJ_ISSUES_IMAGES());
		values.put(COLUMN_IMAGES_CRAETION_DATE_PRJ_ISSUES_IMAGES, status_model.getIMAGES_CRAETION_DATE_PRJ_ISSUES_IMAGES());
		SQLiteDatabase db = this.getWritableDatabase();
		return db.insert(TABLE_PROJECT_ISSUES_IMAGES, null, values);
//		db.close();
	}
	public List<Status_Model> getAll_ImagesList() {
		    List<Status_Model> images_list = new ArrayList<Status_Model>();
		    String selectQuery = "SELECT  * FROM " + TABLE_PROJECT_IMAGES;
		    SQLiteDatabase db = this.getWritableDatabase();
		    Cursor cursor = db.rawQuery(selectQuery, null);
		    if (cursor.moveToFirst()) {
		     do {
		    	 Status_Model status_model = new Status_Model();
	            	status_model.setProject_Images_ID(Integer.parseInt(cursor.getString(0)));
	            	status_model.setProject_ID_IMAGES(Integer.parseInt(cursor.getString(1)));
	            	status_model.setSite_ID_IMAGES(Integer.parseInt(cursor.getString(2)));
	            	status_model.setPRJ_EST_WorkMaster_ID_IMAGES(Integer.parseInt(cursor.getString(3)));	            	
	           		status_model.setPRJ_EST_WorkLocation_Name_IMAGES(cursor.getString(4));
	           		status_model.setPath_IMAGES(cursor.getString(5));
	           		status_model.setSyn_Flag_IMAGES(cursor.getString(6));
	           		status_model.setImages_CreationDateTime_IMAGES(cursor.getString(7));	
		    	
		         // Adding UserSites to list
	           		images_list.add(status_model);
		     } while (cursor.moveToNext());
		    }
		    // close inserting data from database
		    db.close();
		    //return UserSites list
		    return images_list;
		    }
	public String find_PortalId(int issueid) throws SQLException {
		SQLiteDatabase db = this.getWritableDatabase();
		String portalid=null;
		String q = "SELECT ISSUES_PORTAL_ISSUES_ID FROM PROJECT_ISSUES WHERE PROJECT_ISSUES_ID=" + issueid;
		Cursor cursor = db.rawQuery(q, null);
		int count =cursor.getCount();
		if(count>0)
		{
			if (cursor.moveToFirst()) {
				do {
					portalid=cursor.getString(0);

				} while (cursor.moveToNext());
			}
			if (cursor != null && !cursor.isClosed()) {
				cursor.close();

			}
		}
		return portalid;

	}
//find SiteID and work_master_id in PROJECT_IMAGES and arrange ORDERBY with PRJ_EST_WORKMASTER_ID_PRJ_ISSUES and adding to arraylist
	public ArrayList<Status_Model> find_SiteID_WorkMasterId_ProjectImagesList(int site_id, int work_master_id) throws SQLException {
			    	SQLiteDatabase db = this.getWritableDatabase();
			    	 
			        ArrayList<Status_Model> get_images_byTaskId = new ArrayList<Status_Model>();
			    Cursor cursor = db.query(true, TABLE_PROJECT_IMAGES, new String[] {
			    		 COLUMN_PROJECT_IMAGES_ID,
		                 COLUMN_PROJECT_ID_PRJ_IMAGES,
		                 COLUMN_SITE_ID_PRJ_IMAGES,
		                 COLUMN_PRJ_EST_WORKMASTER_ID_PRJ_IMAGES,
		                 COLUMN_PRJ_EST_WORK_LOCATION_NAME_PRJ_IMAGES,		               
		                 COLUMN_PATH_PRJ_IMAGES,		                
		                 COLUMN_SYN_FLAG_PRJ_IMAGES,		                 
		                 COLUMN_IMAGES_CRAETION_DATE_PRJ_IMAGES,}, 
			                  
		                 COLUMN_SITE_ID_PRJ_IMAGES + "=?"+ " and "  +
		                 COLUMN_PRJ_EST_WORKMASTER_ID_PRJ_IMAGES + "=?", 
			                    new String[] {String.valueOf(site_id),String.valueOf(work_master_id)},
			                    null, null, COLUMN_PRJ_EST_WORKMASTER_ID_PRJ_IMAGES , null);
			  
			   
			        if (cursor.moveToFirst()) {
			            do {
			            	Status_Model status_model = new Status_Model();
			            	status_model.setProject_Images_ID(Integer.parseInt(cursor.getString(0)));
			            	status_model.setProject_ID_IMAGES(Integer.parseInt(cursor.getString(1)));
			            	status_model.setSite_ID_IMAGES(Integer.parseInt(cursor.getString(2)));
			            	status_model.setPRJ_EST_WorkMaster_ID_IMAGES(Integer.parseInt(cursor.getString(3)));	            	
			           		status_model.setPRJ_EST_WorkLocation_Name_IMAGES(cursor.getString(4));
			           		status_model.setPath_IMAGES(cursor.getString(5));
			           		status_model.setSyn_Flag_IMAGES(cursor.getString(6));
			           		status_model.setImages_CreationDateTime_IMAGES(cursor.getString(7));		           		
			           		
			           		
			           		get_images_byTaskId.add(status_model);
			            } while (cursor.moveToNext());
			        }
			        if (cursor != null && !cursor.isClosed()) {
			            cursor.close();
			            
			        }
			       
			        return get_images_byTaskId;
			 	 
			    }
// Deleting single row where path PROJECT_IMAGES
	public void Delete_ByPath_PROJECT_IMAGES(String path_of_image) {
		   SQLiteDatabase db = this.getWritableDatabase();
		   db.delete(TABLE_PROJECT_IMAGES, COLUMN_PATH_PRJ_IMAGES + " = ?",
		   new String[] {path_of_image });
		   db.close();
		   }
//find SiteID and Syn_Flag in PROJECT_ISSUES  adding to arraylist
	public ArrayList<Status_Model> find_SiteID_SynFlag_ProjectImages(int site_id, String syn_flag) throws SQLException {
			    	SQLiteDatabase db = this.getWritableDatabase();
			    	 
			        ArrayList<Status_Model> get_images_notSyned = new ArrayList<Status_Model>();
			    Cursor cursor = db.query(true, TABLE_PROJECT_IMAGES, new String[] {
			    		 COLUMN_PROJECT_IMAGES_ID,
		                 COLUMN_PROJECT_ID_PRJ_IMAGES,
		                 COLUMN_SITE_ID_PRJ_IMAGES,
		                 COLUMN_PRJ_EST_WORKMASTER_ID_PRJ_IMAGES,
		                 COLUMN_PRJ_EST_WORK_LOCATION_NAME_PRJ_IMAGES,		               
		                 COLUMN_PATH_PRJ_IMAGES,		                
		                 COLUMN_SYN_FLAG_PRJ_IMAGES,		                 
		                 COLUMN_IMAGES_CRAETION_DATE_PRJ_IMAGES,}, 
			                  
		                 COLUMN_SITE_ID_PRJ_IMAGES + "=?"+ " and "  +
		                 COLUMN_SYN_FLAG_PRJ_IMAGES + "=?", 
			                    new String[] {String.valueOf(site_id),syn_flag},
			                    null, null, null , null);
			  
			   
			        if (cursor.moveToFirst()) {
			            do {
			            	Status_Model status_model = new Status_Model();
			            	status_model.setProject_Images_ID(Integer.parseInt(cursor.getString(0)));
			            	status_model.setProject_ID_IMAGES(Integer.parseInt(cursor.getString(1)));
			            	status_model.setSite_ID_IMAGES(Integer.parseInt(cursor.getString(2)));
			            	status_model.setPRJ_EST_WorkMaster_ID_IMAGES(Integer.parseInt(cursor.getString(3)));	            	
			           		status_model.setPRJ_EST_WorkLocation_Name_IMAGES(cursor.getString(4));
			           		status_model.setPath_IMAGES(cursor.getString(5));
			           		status_model.setSyn_Flag_IMAGES(cursor.getString(6));
			           		status_model.setImages_CreationDateTime_IMAGES(cursor.getString(7));		   
			           		
			           		
			           		get_images_notSyned.add(status_model);
			            } while (cursor.moveToNext());
			        }
			        if (cursor != null && !cursor.isClosed()) {
			            cursor.close();
			            
			        }
			        System.out.println("db size of list"+get_images_notSyned.size());
			        return get_images_notSyned;
			 	 
			    }
	public ArrayList<Status_Model> find_IssueID_SynFlag_ProjectImages(int siteid, String syn_flag) throws SQLException {
			    	SQLiteDatabase db = this.getWritableDatabase();
			        ArrayList<Status_Model> get_issue_images_notSyned = new ArrayList<Status_Model>();
			        Cursor cursor = db.query(true, TABLE_PROJECT_ISSUES_IMAGES, new String[] {
						 COLUMN_PROJECT_ISSUES_IMAGES_ID,
						 COLUMN_PROJECT_ISSUESS_ID,
						 COLUMN_PATH_PRJ_ISSUES_IMAGES,
		                 COLUMN_SYN_FLAG_PRJ_ISSUES_IMAGES,
		                 COLUMN_IMAGES_CRAETION_DATE_PRJ_ISSUES_IMAGES,},
							COLUMN_SITE_ID_PRJ_ISSUES_IMAGES + "=?"+ " and "  +
		                 COLUMN_SYN_FLAG_PRJ_ISSUES_IMAGES + "=?",
			                    new String[] {String.valueOf(siteid),syn_flag},
			                    null, null, null , null);


			        if (cursor.moveToFirst()) {
			            do {
			            	Status_Model status_model = new Status_Model();
			            	status_model.setPROJECT_ISSUES_IMAGES_ID(Integer.parseInt(cursor.getString(0)));
			            	status_model.setIssues_id(cursor.getString(1));
			           		status_model.setPATH_PRJ_ISSUES_IMAGES(cursor.getString(2));
			           		status_model.setSYN_FLAG_PRJ_ISSUES_IMAGES(cursor.getString(3));
			           		status_model.setIMAGES_CRAETION_DATE_PRJ_ISSUES_IMAGES(cursor.getString(4));
							get_issue_images_notSyned.add(status_model);
			            } while (cursor.moveToNext());
			        }
			        if (cursor != null && !cursor.isClosed()) {
			            cursor.close();

			        }
			        System.out.println("db size of list"+get_issue_images_notSyned.size());
			        return get_issue_images_notSyned;

			    }
//find primary_key_id and Syn_Flag in PROJECT_Images  adding to arraylist
	public ArrayList<Status_Model> find_PrimaryKeyID_SynFlag_ProjectImages(int primary_key_id, String syn_flag) throws SQLException {
			    	SQLiteDatabase db = this.getWritableDatabase();
			    	 
			        ArrayList<Status_Model> get_images_notSyned = new ArrayList<Status_Model>();
			    Cursor cursor = db.query(true, TABLE_PROJECT_IMAGES, new String[] {
			    		 COLUMN_PROJECT_IMAGES_ID,
		                 COLUMN_PROJECT_ID_PRJ_IMAGES,
		                 COLUMN_SITE_ID_PRJ_IMAGES,
		                 COLUMN_PRJ_EST_WORKMASTER_ID_PRJ_IMAGES,
		                 COLUMN_PRJ_EST_WORK_LOCATION_NAME_PRJ_IMAGES,		               
		                 COLUMN_PATH_PRJ_IMAGES,		                
		                 COLUMN_SYN_FLAG_PRJ_IMAGES,		                 
		                 COLUMN_IMAGES_CRAETION_DATE_PRJ_IMAGES,}, 
			                  
		                 COLUMN_PROJECT_IMAGES_ID + "=?"+ " and "  +
		                 COLUMN_SYN_FLAG_PRJ_IMAGES + "=?", 
			                    new String[] {String.valueOf(primary_key_id),syn_flag},
			                    null, null, null , null);
			  
			   
			        if (cursor.moveToFirst()) {
			            do {
			            	Status_Model status_model = new Status_Model();
			            	status_model.setProject_Images_ID(Integer.parseInt(cursor.getString(0)));
			            	status_model.setProject_ID_IMAGES(Integer.parseInt(cursor.getString(1)));
			            	status_model.setSite_ID_IMAGES(Integer.parseInt(cursor.getString(2)));
			            	status_model.setPRJ_EST_WorkMaster_ID_IMAGES(Integer.parseInt(cursor.getString(3)));	            	
			           		status_model.setPRJ_EST_WorkLocation_Name_IMAGES(cursor.getString(4));
			           		status_model.setPath_IMAGES(cursor.getString(5));
			           		status_model.setSyn_Flag_IMAGES(cursor.getString(6));
			           		status_model.setImages_CreationDateTime_IMAGES(cursor.getString(7));		   
			           		
			           		
			           		get_images_notSyned.add(status_model);
			            } while (cursor.moveToNext());
			        }
			        if (cursor != null && !cursor.isClosed()) {
			            cursor.close();
			            
			        }
			        System.out.println("db size of list"+get_images_notSyned.size());
			        return get_images_notSyned;
			 	 
			    }
	public ArrayList<Status_Model> find_PrimaryKeyID_SynFlag_ProjectIssueImages(int primary_key_id, String syn_flag) throws SQLException {
		SQLiteDatabase db = this.getWritableDatabase();
		ArrayList<Status_Model> get_images_notSyned = new ArrayList<Status_Model>();
		Cursor cursor = db.query(true, TABLE_PROJECT_ISSUES_IMAGES, new String[] {
			COLUMN_PROJECT_ISSUES_IMAGES_ID,
			COLUMN_PROJECT_ISSUESS_ID,
		    COLUMN_PATH_PRJ_ISSUES_IMAGES,
		    COLUMN_SYN_FLAG_PRJ_ISSUES_IMAGES,
		    COLUMN_IMAGES_CRAETION_DATE_PRJ_ISSUES_IMAGES,},
				COLUMN_PROJECT_ISSUES_IMAGES_ID + "=?"+ " and "  +
						COLUMN_SYN_FLAG_PRJ_ISSUES_IMAGES + "=?",
			                    new String[] {String.valueOf(primary_key_id),syn_flag},
			                    null, null, null , null);
		if (cursor.moveToFirst()) {
			do {
				Status_Model status_model = new Status_Model();
				status_model.setPROJECT_ISSUES_IMAGES_ID(Integer.parseInt(cursor.getString(0)));
				status_model.setPATH_PRJ_ISSUES_IMAGES(cursor.getString(2));
				status_model.setSYN_FLAG_PRJ_ISSUES_IMAGES(cursor.getString(3));
				status_model.setIMAGES_CRAETION_DATE_PRJ_ISSUES_IMAGES(cursor.getString(4));
				get_images_notSyned.add(status_model);
			} while (cursor.moveToNext());
		}
		if (cursor != null && !cursor.isClosed()) {
			cursor.close();

		}
		System.out.println("db size of list"+get_images_notSyned.size());
		return get_images_notSyned;

	}
// Updating single PROJECT_Images row
    public int Update_ProjectImagesRow(Status_Model status_model) {
		    SQLiteDatabase db = this.getWritableDatabase();

		    ContentValues values = new ContentValues();
		    values.put(COLUMN_PROJECT_IMAGES_ID, status_model.getProject_Images_ID());
		    values.put(COLUMN_PROJECT_ID_PRJ_IMAGES, status_model.getProject_ID_IMAGES());			       	      
	        values.put(COLUMN_SITE_ID_PRJ_IMAGES, status_model.getSite_ID_IMAGES());  
	        values.put(COLUMN_PRJ_EST_WORKMASTER_ID_PRJ_IMAGES, status_model.getPRJ_EST_WorkMaster_ID_IMAGES());		      
	        values.put(COLUMN_PRJ_EST_WORK_LOCATION_NAME_PRJ_IMAGES, status_model.getPRJ_EST_WorkLocation_Name_IMAGES());  
	        values.put(COLUMN_PATH_PRJ_IMAGES, status_model.getPath_IMAGES());  			        	
	        values.put(COLUMN_SYN_FLAG_PRJ_IMAGES, status_model.getSyn_Flag_IMAGES());  			       		      
	        values.put(COLUMN_IMAGES_CRAETION_DATE_PRJ_IMAGES, status_model.getImages_CreationDateTime_IMAGES()); 		    
		    // updating row
		    return db.update(TABLE_PROJECT_IMAGES, values, COLUMN_PROJECT_IMAGES_ID + " = ?",
		    new String[] { String.valueOf(status_model.getProject_Images_ID()) });	
		   
		    }
    public int Update_ProjectIsseusImagesRow(Status_Model status_model) {
		    SQLiteDatabase db = this.getWritableDatabase();
		    ContentValues values = new ContentValues();
		    values.put(COLUMN_SYN_FLAG_PRJ_ISSUES_IMAGES, status_model.getSYN_FLAG_PRJ_ISSUES_IMAGES());
		    return db.update(TABLE_PROJECT_ISSUES_IMAGES, values, COLUMN_PROJECT_ISSUES_IMAGES_ID + " = ?",
		    new String[] { String.valueOf(status_model.getPROJECT_ISSUES_IMAGES_ID()) });

		    }
//CRUD METHODS FOR STATUS_REPORT
//inserting records in STATUS_REPORT
	public void add_StatusReport_Record(StatusReport_Parent_Model model) {
	 			// TODO Auto-generated method stub
	 			 ContentValues values = new ContentValues();
	 			 
	 			   values.put(COLUMN_SITE_ID_STATUS_REPORT, model.getTitle_SiteId());
	 		       values.put(COLUMN_SITE_NAME_STATUS_REPORT, model.getTitle_SiteName());
	 		       values.put(COLUMN_TASK_ID_STATUS_REPORT, model.getTaskId());
	 		       values.put(COLUMN_TASK_NAME_STATUS_REPORT, model.getTask_Name());	
	 		       values.put(COLUMN_TOTAL_QTY_STATUS_REPORT, model.getTotal_Qty());	
	 		       values.put(COLUMN_COMPLETED_QTY_STATUS_REPORT, model.getCompleted_Qty());
	 		       values.put(COLUMN_PERCENTAGE_WORK_COMP_STATUS_REPORT, model.getPercentage_WorkCompleted_Qty());
	 		       values.put(COLUMN_BALANCE_QTY_STATUS_REPORT, model.getBalance_Qty());
	 		      values.put(COLUMN_BILLABLE_AMT_STATUS_REPORT, model.getBillable_Amt());
	 		       values.put(COLUMN_UNITS_STATUS_REPORT, model.getUnits());
	 		      
	 		        SQLiteDatabase db = this.getWritableDatabase();
	 		        
	 		        db.insert(TABLE_STATUS_REPORT, null, values);
	 		      
	 		        db.close();
	 		}
//counting no of rows in STATUS_REPORT
	public int getStatusReportTable_Row_Count() {
	 		        String countQuery = "SELECT  * FROM " + TABLE_STATUS_REPORT;  
	 		      
	 		        SQLiteDatabase db = this.getReadableDatabase();  
	 		        Cursor cursor = db.rawQuery(countQuery, null);  
	 		     
	 		        System.out.println("check count"+cursor.getCount());

	 		        cursor.close();  
	 		      
	 		        // return count  
	 		        return cursor.getCount();  
	 		    }  
	public List<StatusReport_Parent_Model> getGroupNames() {

	 		    List<StatusReport_Parent_Model> groups_list = new ArrayList<StatusReport_Parent_Model>();

	 		    SQLiteDatabase db = this.getReadableDatabase();

	 		    String[] projection = {COLUMN_SITE_ID_STATUS_REPORT};

	 		    //select distinct values for group name from group table

	 		    Cursor cursor = db.query(true,TABLE_STATUS_REPORT, projection, null, null, COLUMN_SITE_ID_STATUS_REPORT, null, null,null);

	 		    if (cursor.moveToFirst()) {

	 		        do {
	 		        	StatusReport_Parent_Model model = new StatusReport_Parent_Model();
	 	            	model.setStatusReport_Id(Integer.parseInt(cursor.getString(0)));
	 	            	model.setTitle_SiteId(Integer.parseInt(cursor.getString(1)));
	 	            	model.setTitle_SiteName(cursor.getString(2));
	 	            	model.setTaskId(Integer.parseInt(cursor.getString(3)));
	 	            	model.setTask_Name(cursor.getString(4));
	 	            	model.setTotal_Qty(cursor.getString(5));
	 	            	model.setCompleted_Qty(cursor.getString(6));
	 	            	model.setPercentage_WorkCompleted_Qty(cursor.getString(7));
	 	            	model.setBalance_Qty(cursor.getString(8));
	 	            	model.setBillable_Amt(cursor.getString(9));	 	            	
	 	            	model.setUnits(cursor.getString(10));
	 	            	
	 	            	
	 	                // Adding status_report_list to list
	 	            	groups_list.add(model);

	 		        }while (cursor.moveToNext());

	 		    }
	 		   cursor.close();
	 		
	 		    return groups_list;

	 		}
// Get all unique of site_Ids(or distinct)value in  TABLE_STATUS_REPORT items and adding to arrylist
	public List<StatusReport_Parent_Model> getDistinct_StatusReport_List() {
	 	    	List<StatusReport_Parent_Model> status_report_list = new ArrayList<StatusReport_Parent_Model>();

	 	        SQLiteDatabase db = this.getWritableDatabase();
//	 	        Cursor cursor = db.rawQuery(selectQuery, null);
	 	       Cursor cursor = db.query(true, TABLE_STATUS_REPORT, new String[]
	 	    		   { COLUMN_STATUS_REPORT_ID,
	 	 		         COLUMN_SITE_ID_STATUS_REPORT,
	 	 		         COLUMN_SITE_NAME_STATUS_REPORT,
	 	 		         COLUMN_TASK_ID_STATUS_REPORT,
	 	 		         COLUMN_TASK_NAME_STATUS_REPORT,
	 	 		         COLUMN_TOTAL_QTY_STATUS_REPORT,
	 	 		         COLUMN_COMPLETED_QTY_STATUS_REPORT,
	 	 		       COLUMN_PERCENTAGE_WORK_COMP_STATUS_REPORT,
	 	 		         COLUMN_BALANCE_QTY_STATUS_REPORT,
	 	 		       COLUMN_BILLABLE_AMT_STATUS_REPORT,
	 	 		         COLUMN_UNITS_STATUS_REPORT }, 
	 	    		   null, null, COLUMN_SITE_ID_STATUS_REPORT, null, null, null);
	 	        // looping through all rows and adding to list
	 	        if (cursor.moveToFirst()) {
	 	            do {
	 	            	StatusReport_Parent_Model model = new StatusReport_Parent_Model();
	 	            	model.setStatusReport_Id(Integer.parseInt(cursor.getString(0)));
	 	            	model.setTitle_SiteId(Integer.parseInt(cursor.getString(1)));
	 	            	model.setTitle_SiteName(cursor.getString(2));
	 	            	model.setTaskId(Integer.parseInt(cursor.getString(3)));
	 	            	model.setTask_Name(cursor.getString(4));
	 	            	model.setTotal_Qty(cursor.getString(5));
	 	            	model.setCompleted_Qty(cursor.getString(6));
	 	            	model.setPercentage_WorkCompleted_Qty(cursor.getString(7));
	 	            	model.setBalance_Qty(cursor.getString(8));
	 	            	model.setBillable_Amt(cursor.getString(9));	 	            	
	 	            	model.setUnits(cursor.getString(10));
	 	            	
	 	            	
	 	                // Adding status_report_list to list
	 	            	status_report_list.add(model);
	 	            } while (cursor.moveToNext());
	 	        }
	 	       cursor.close();
	 	     
	 	       
	 	        // return status_report list
	 	        return status_report_list;
	 	    }
//counting no of matched rows in StatusReportTable
	public int countRows_MatchedOf_SiteID_TaskID_StatusReportTable(int title_site_id, int task_id) throws SQLException {
	 		      
	 		        SQLiteDatabase db = this.getReadableDatabase();  
	 		       Cursor cursor = db.query(true, TABLE_STATUS_REPORT, new String[] {
	 		    		 COLUMN_STATUS_REPORT_ID,
	 	 		         COLUMN_SITE_ID_STATUS_REPORT,
	 	 		         COLUMN_SITE_NAME_STATUS_REPORT,
	 	 		         COLUMN_TASK_ID_STATUS_REPORT,
	 	 		         COLUMN_TASK_NAME_STATUS_REPORT,
	 	 		         COLUMN_TOTAL_QTY_STATUS_REPORT,
	 	 		       COLUMN_COMPLETED_QTY_STATUS_REPORT,
	 	 		       COLUMN_PERCENTAGE_WORK_COMP_STATUS_REPORT,
	 	 		         COLUMN_BALANCE_QTY_STATUS_REPORT,
	 	 		       COLUMN_BILLABLE_AMT_STATUS_REPORT,
	 	 		         COLUMN_UNITS_STATUS_REPORT,}, 		                                     		
	 	 		         COLUMN_SITE_ID_STATUS_REPORT + "=?"+ " and "  +
	 	 		         COLUMN_TASK_ID_STATUS_REPORT + "=?", 
		                    new String[] {String.valueOf(title_site_id),String.valueOf(task_id)},
		                    null, null, null , null);
	 		     
	 		        System.out.println("check count"+cursor.getCount());

	 		        cursor.close();  
	 		      
	 		        // return count  
	 		        return cursor.getCount();  
	 		    }
//find matched rows in StatusReportTable table
	public StatusReport_Parent_Model find_SiteID_TaskID_StatusReportTable(int title_site_id, int task_id) throws SQLException {
		 		      
		 		        SQLiteDatabase db = this.getReadableDatabase();  
		 		       StatusReport_Parent_Model model=new StatusReport_Parent_Model();
		 		       Cursor cursor = db.query(true, TABLE_STATUS_REPORT, new String[] {
		 		    		 COLUMN_STATUS_REPORT_ID,
		 	 		         COLUMN_SITE_ID_STATUS_REPORT,
		 	 		         COLUMN_SITE_NAME_STATUS_REPORT,
		 	 		         COLUMN_TASK_ID_STATUS_REPORT,
		 	 		         COLUMN_TASK_NAME_STATUS_REPORT,
		 	 		         COLUMN_TOTAL_QTY_STATUS_REPORT,
		 	 		       COLUMN_COMPLETED_QTY_STATUS_REPORT,
		 	 		       COLUMN_PERCENTAGE_WORK_COMP_STATUS_REPORT,
		 	 		         COLUMN_BALANCE_QTY_STATUS_REPORT,
		 	 		       COLUMN_BILLABLE_AMT_STATUS_REPORT,
		 	 		         COLUMN_UNITS_STATUS_REPORT,}, 		                                     		
		 	 		         COLUMN_SITE_ID_STATUS_REPORT + "=?"+ " and "  +
		 	 		         COLUMN_TASK_ID_STATUS_REPORT + "=?", 
			                    new String[] {String.valueOf(title_site_id),String.valueOf(task_id)},
			                    null, null, null , null);
		 		     
		 		      if (cursor.moveToFirst()) {
		   		            do {
		   		            	
		   		            	model.setStatusReport_Id(Integer.parseInt(cursor.getString(0)));
			 	            	model.setTitle_SiteId(Integer.parseInt(cursor.getString(1)));
			 	            	model.setTitle_SiteName(cursor.getString(2));
			 	            	model.setTaskId(Integer.parseInt(cursor.getString(3)));
			 	            	model.setTask_Name(cursor.getString(4));
			 	            	model.setTotal_Qty(cursor.getString(5));
			 	            	model.setCompleted_Qty(cursor.getString(6));
			 	            	model.setPercentage_WorkCompleted_Qty(cursor.getString(7));			 	            	
			 	            	model.setBalance_Qty(cursor.getString(8));
			 	            	model.setBillable_Amt(cursor.getString(9));
			 	            	model.setUnits(cursor.getString(10));
		   		            } while (cursor.moveToNext());
		   		        }
		   		        if (cursor != null && !cursor.isClosed()) {
		   		            cursor.close();
		   		        
		   		        }
		   		        System.out.println("counting records"+cursor.getCount());
		   		        return model;	 
		 		    }
// find SiteID STATUS_REPORT  and adding to arraylist
	public ArrayList<StatusReport_Parent_Model> find_SiteID_StatusReportList(int site_id) throws SQLException {
				    	SQLiteDatabase db = this.getWritableDatabase();
				    	 
				        ArrayList<StatusReport_Parent_Model> get_Tasks_bySiteID = new ArrayList<StatusReport_Parent_Model>();
				    Cursor cursor = db.query(true, TABLE_STATUS_REPORT, new String[] {
				    		 COLUMN_STATUS_REPORT_ID,
		 	 		         COLUMN_SITE_ID_STATUS_REPORT,
		 	 		         COLUMN_SITE_NAME_STATUS_REPORT,
		 	 		         COLUMN_TASK_ID_STATUS_REPORT,
		 	 		         COLUMN_TASK_NAME_STATUS_REPORT,
		 	 		         COLUMN_TOTAL_QTY_STATUS_REPORT,
		 	 		       COLUMN_COMPLETED_QTY_STATUS_REPORT,
		 	 		       COLUMN_PERCENTAGE_WORK_COMP_STATUS_REPORT,
		 	 		         COLUMN_BALANCE_QTY_STATUS_REPORT,
		 	 		       COLUMN_BILLABLE_AMT_STATUS_REPORT,
		 	 		         COLUMN_UNITS_STATUS_REPORT,}, 
				                  
		 	 		       COLUMN_SITE_ID_STATUS_REPORT + "=?", 
				                    new String[] {String.valueOf(site_id)},
				                    null, null, null , null);
				  
				   
				        if (cursor.moveToFirst()) {
				            do {
				            	 StatusReport_Parent_Model model=new StatusReport_Parent_Model();
				            	 model.setStatusReport_Id(Integer.parseInt(cursor.getString(0)));
				 	            	model.setTitle_SiteId(Integer.parseInt(cursor.getString(1)));
				 	            	model.setTitle_SiteName(cursor.getString(2));
				 	            	model.setTaskId(Integer.parseInt(cursor.getString(3)));
				 	            	model.setTask_Name(cursor.getString(4));
				 	            	model.setTotal_Qty(cursor.getString(5));
				 	            	model.setCompleted_Qty(cursor.getString(6));
				 	            	model.setPercentage_WorkCompleted_Qty(cursor.getString(7));
				 	            	model.setBalance_Qty(cursor.getString(8));
				 	            	model.setBillable_Amt(cursor.getString(9));	 	            	
				 	            	model.setUnits(cursor.getString(10));
				           		
				 	            	get_Tasks_bySiteID.add(model);
				            } while (cursor.moveToNext());
				        }
				        if (cursor != null && !cursor.isClosed()) {
				            cursor.close();
				           
				        }
				        System.out.println("get task_list by site_id in db size of list"+get_Tasks_bySiteID.size());
				        return get_Tasks_bySiteID;
				 	 
				    }
// Updating TABLE_STATUS_REPORT row
	public int Update_StatusReport_Row(StatusReport_Parent_Model model) {
				    SQLiteDatabase db = this.getWritableDatabase();

				    ContentValues values = new ContentValues();
				       values.put(COLUMN_STATUS_REPORT_ID, model.getStatusReport_Id());
				       values.put(COLUMN_SITE_ID_STATUS_REPORT, model.getTitle_SiteId());
		 		       values.put(COLUMN_SITE_NAME_STATUS_REPORT, model.getTitle_SiteName());
		 		       values.put(COLUMN_TASK_ID_STATUS_REPORT, model.getTaskId());
		 		       values.put(COLUMN_TASK_NAME_STATUS_REPORT, model.getTask_Name());	
		 		       values.put(COLUMN_TOTAL_QTY_STATUS_REPORT, model.getTotal_Qty());	
		 		      values.put(COLUMN_COMPLETED_QTY_STATUS_REPORT, model.getCompleted_Qty());
		 		       values.put(COLUMN_PERCENTAGE_WORK_COMP_STATUS_REPORT, model.getPercentage_WorkCompleted_Qty());
		 		       values.put(COLUMN_BALANCE_QTY_STATUS_REPORT, model.getBalance_Qty());
		 		      values.put(COLUMN_BILLABLE_AMT_STATUS_REPORT, model.getBillable_Amt());
		 		       values.put(COLUMN_UNITS_STATUS_REPORT, model.getUnits());
				       
				    System.out.println("COLUMN_STATUS_REPORT_ID id is"+model.getStatusReport_Id());
				    // updating row
				    return db.update(TABLE_STATUS_REPORT, values, COLUMN_STATUS_REPORT_ID+ " = ?",
				    new String[] { String.valueOf(model.getStatusReport_Id()) });	
				   
				    }
//CRUD METHODS FOR LAST_SYN_REPORT
//inserting records in LAST_SYN_REPORT
	public void add_LastSynReports_Record(Last_Sync_Report_Model model) {
			 			// TODO Auto-generated method stub
			 			 ContentValues values = new ContentValues();		 			 
			 			 
			 		       values.put(COLUMN_MODULE_ID_LAST_SYN_REPORT, model.getModule_ID_LastSynReport());
			 		      			 		      
			 		       values.put(COLUMN_NUMBER_OFDAYS_LAST_SYN_REPORT, model.getNumber_Of_Days_LastSynReport());
			 		      
			 		        SQLiteDatabase db = this.getWritableDatabase();
			 		        
			 		        db.insert(TABLE_LAST_SYN_REPORT, null, values);
			 		      
			 		        db.close();
			 		}
//counting no of rows in DASHBOARD_TABLE
	public int getLastSynReportTable_Row_Count() {
			 		        String countQuery = "SELECT  * FROM " + TABLE_LAST_SYN_REPORT;  
			 		      
			 		        SQLiteDatabase db = this.getReadableDatabase();  
			 		        Cursor cursor = db.rawQuery(countQuery, null); 			 		     
			 		        System.out.println("check count"+cursor.getCount());
			 		        cursor.close();			 		      
			 		        // return count  
			 		        return cursor.getCount();  
			 		    }  
//find records which r matched with  login_id
	public Last_Sync_Report_Model get_FirstRow_LastSynReport(int first_row_id) throws SQLException {
			 				    	SQLiteDatabase db = this.getWritableDatabase();
			 				    	 
			 				    	Last_Sync_Report_Model model = new Last_Sync_Report_Model();
			 				    	
			 				    Cursor cursor = db.query(true, TABLE_LAST_SYN_REPORT, new String[] {
			 				                    COLUMN_LAST_SYN_REPORT_ID,
			 				                    COLUMN_MODULE_ID_LAST_SYN_REPORT,
			 				                  
			 				                    COLUMN_NUMBER_OFDAYS_LAST_SYN_REPORT,}, 		                                     		
			 				                   COLUMN_LAST_SYN_REPORT_ID + "=?", 
			 				                    new String[] {String.valueOf(first_row_id)},
			 				                    null, null, null , null);
			 				 
			 				 
			 				        if (cursor.moveToFirst()) {
			 				            do {
			 				            	
			 				            	model.setLastSynReport_ID_LastSynReport(Integer.parseInt(cursor.getString(0)));
			 				            	model.setModule_ID_LastSynReport(Integer.parseInt(cursor.getString(1)));			 				            	
			 				            	model.setNumber_Of_Days_LastSynReport(Integer.parseInt(cursor.getString(2)));
			 				            	
			 				            } while (cursor.moveToNext());
			 				        }
			 				        if (cursor != null && !cursor.isClosed()) {
			 				            cursor.close();
			 				          
			 				        }
			 				        System.out.println("counting records"+cursor.getCount());
			 				        return model;	 
			 				 
			 				    }
// Updating single Update_Login_Row
	public int Update_LastSynReport_Row(Last_Sync_Report_Model model) {
			 		SQLiteDatabase db = this.getWritableDatabase();

			 		ContentValues values = new ContentValues();
			 		values.put(COLUMN_LAST_SYN_REPORT_ID, model.getLastSynReport_ID_LastSynReport());
			 		values.put(COLUMN_MODULE_ID_LAST_SYN_REPORT, model.getModule_ID_LastSynReport());
		 		    values.put(COLUMN_NUMBER_OFDAYS_LAST_SYN_REPORT, model.getNumber_Of_Days_LastSynReport());
			 		// updating row
			 		return db.update(TABLE_LAST_SYN_REPORT, values, COLUMN_LAST_SYN_REPORT_ID + " = ?",
			 		new String[] { String.valueOf(model.getLastSynReport_ID_LastSynReport()) });	

			 		}
//CRUD METHODS FOR KNOWLEDGE Center
//inserting records in KNOWLEDGE
	public void add_KnowledgeCenter_Record(KnowledgeCenter_Model model) {
			 			// TODO Auto-generated method stub
			 			 ContentValues values = new ContentValues();
			 			 
			 			   values.put(COLUMN_FILE_UPLOADMASTER_ID_KC, model.getFile_UploadMaster_Id());
			 		       values.put(COLUMN_FILE_TITLE_KC, model.getFile_Title());
			 		       values.put(COLUMN_FILE_TYPE_ID_KC, model.getFileType_Id());
			 		       values.put(COLUMN_KEYWORDS_KC, model.getKeywords());	
			 		       values.put(COLUMN_PURPOSE_ID_KC, model.getPurpose_Id());	
			 		       values.put(COLUMN_MOBILE_PATH_KC, model.getMobilePath());
			 		       values.put(COLUMN_SITE_ID_KC, model.getSite_Id());
			 		       values.put(COLUMN_DESCRIPTION_KC, model.getDescription());
			 		       values.put(COLUMN_PORTAL_PATH_KC, model.getPortalPath());
			 		       values.put(COLUMN_CREATED_DATE_KC, model.getCreated_Date());
			 		       values.put(COLUMN_UPDATED_DATE_KC, model.getUpdated_Date());
			 		       values.put(COLUMN_DOWNLOAD_FLAG_KC, model.getDownload_Flag());
			 		      
			 		        SQLiteDatabase db = this.getWritableDatabase();
			 		        
			 		        db.insert(TABLE_KNOWLEDGE_CENTER, null, values);
			 		      
			 		        db.close();
			 		}
//counting no of rows in TABLE_KNOWLEDGE_CENTER
	public int getKnowledgeCenterTable_Row_Count() {
			 		        String countQuery = "SELECT  * FROM " + TABLE_KNOWLEDGE_CENTER;  
			 		      
			 		        SQLiteDatabase db = this.getReadableDatabase();  
			 		        Cursor cursor = db.rawQuery(countQuery, null);  
			 		     
			 		        System.out.println("check count"+cursor.getCount());

			 		        cursor.close();  
			 		      
			 		        // return count  
			 		        return cursor.getCount();  
			 		    }
//Getting All KnowledgeCenter_list and adding to arrylist
	public List<KnowledgeCenter_Model> getAll_KnowledgeCenterList() {
			 		List<KnowledgeCenter_Model> list = new ArrayList<KnowledgeCenter_Model>();
			 		//Select All Query
			 		String selectQuery = "SELECT  * FROM " + TABLE_KNOWLEDGE_CENTER;

			 		SQLiteDatabase db = this.getWritableDatabase();
			 		Cursor cursor = db.rawQuery(selectQuery, null);

			 		//looping through all rows and adding to list
			 		if (cursor.moveToFirst()) {
			 		 do {
			 			KnowledgeCenter_Model model = new KnowledgeCenter_Model();
			 			model.setKnowledgeCenter_Id(Integer.parseInt(cursor.getString(0)));
	 	            	model.setFile_UploadMaster_Id(Integer.parseInt(cursor.getString(1)));
	 	            	model.setFile_Title(cursor.getString(2));
	 	            	model.setFileType_Id(Integer.parseInt(cursor.getString(3)));
	 	            	model.setKeywords(cursor.getString(4));
	 	            	model.setPurpose_Id(Integer.parseInt(cursor.getString(5)));
	 	            	model.setMobilePath(cursor.getString(6));
	 	            	model.setSite_Id(Integer.parseInt(cursor.getString(7)));			 	            	
	 	            	model.setDescription(cursor.getString(8));
	 	            	model.setPortalPath(cursor.getString(9));
	 	            	model.setCreated_Date(cursor.getString(10));
	 	            	model.setUpdated_Date(cursor.getString(11));
	 	            	model.setDownload_Flag(cursor.getString(12));
			 			
			 		     // Adding KnowledgeCenter to list
			 		 	list.add(model);
			 		 } while (cursor.moveToNext());
			 		}
			 		// close inserting data from database
			 		db.close();
			 		//return KnowledgeCenter list
			 		return list;
			 		}
//	counting no of matched rows in TABLE_KNOWLEDGE_CENTER
	public int countRows_MatchedOf_FileUploadMasterId_KnowledgeCenterTable(int file_upload_master_id) throws SQLException {
			 		      
			 		        SQLiteDatabase db = this.getReadableDatabase();  
			 		       Cursor cursor = db.query(true, TABLE_KNOWLEDGE_CENTER, new String[] {
			 		    		 COLUMN_KNOWLEDGE_CENTER_ID,
			 	 		         COLUMN_FILE_UPLOADMASTER_ID_KC,
			 	 		         COLUMN_FILE_TITLE_KC,
			 	 		         COLUMN_FILE_TYPE_ID_KC,
			 	 		         COLUMN_KEYWORDS_KC,
			 	 		         COLUMN_PURPOSE_ID_KC,
			 	 		       COLUMN_MOBILE_PATH_KC,
			 	 		       COLUMN_SITE_ID_KC,
			 	 		         COLUMN_DESCRIPTION_KC,
			 	 		       COLUMN_PORTAL_PATH_KC,
			 	 		       COLUMN_CREATED_DATE_KC,
			 	 		     COLUMN_UPDATED_DATE_KC,
			 	 		         COLUMN_DOWNLOAD_FLAG_KC,}, 		                                     		
			 	 		        
			 	 		       COLUMN_FILE_UPLOADMASTER_ID_KC + "=?", 
				                    new String[] {String.valueOf(file_upload_master_id)},
				                    null, null, null , null);
			 		     
			 		        System.out.println("check count"+cursor.getCount());

			 		        cursor.close();  
			 		      
			 		        // return count  
			 		        return cursor.getCount();  
			 		    }
	public KnowledgeCenter_Model find_FileUploadMasterId_KnowledgeCenterTable(int file_upload_master_id) throws SQLException {
			 		      
			 		        SQLiteDatabase db = this.getReadableDatabase();  
			 		       KnowledgeCenter_Model model=new KnowledgeCenter_Model();
			 		      
			 		    		  Cursor cursor = db.query(true, TABLE_KNOWLEDGE_CENTER, new String[] {
						 		    		 COLUMN_KNOWLEDGE_CENTER_ID,
						 	 		         COLUMN_FILE_UPLOADMASTER_ID_KC,
						 	 		         COLUMN_FILE_TITLE_KC,
						 	 		         COLUMN_FILE_TYPE_ID_KC,
						 	 		         COLUMN_KEYWORDS_KC,
						 	 		         COLUMN_PURPOSE_ID_KC,
						 	 		       COLUMN_MOBILE_PATH_KC,
						 	 		       COLUMN_SITE_ID_KC,
						 	 		         COLUMN_DESCRIPTION_KC,
						 	 		         COLUMN_PORTAL_PATH_KC,
						 	 		       COLUMN_CREATED_DATE_KC,
						 	 		     COLUMN_UPDATED_DATE_KC,
						 	 		         COLUMN_DOWNLOAD_FLAG_KC,}, 			                                     		
						 	 		       COLUMN_FILE_UPLOADMASTER_ID_KC + "=?", 
						                    new String[] {String.valueOf(file_upload_master_id)},
						                    null, null, null , null);
			 		     
			 		      if (cursor.moveToFirst()) {
			   		            do {
			   		            	
			   		            	model.setKnowledgeCenter_Id(Integer.parseInt(cursor.getString(0)));
				 	            	model.setFile_UploadMaster_Id(Integer.parseInt(cursor.getString(1)));
				 	            	model.setFile_Title(cursor.getString(2));
				 	            	model.setFileType_Id(Integer.parseInt(cursor.getString(3)));
				 	            	model.setKeywords(cursor.getString(4));
				 	            	model.setPurpose_Id(Integer.parseInt(cursor.getString(5)));
				 	            	model.setMobilePath(cursor.getString(6));
				 	            	model.setSite_Id(Integer.parseInt(cursor.getString(7)));			 	            	
				 	            	model.setDescription(cursor.getString(8));
				 	            	model.setPortalPath(cursor.getString(9));
				 	            	model.setCreated_Date(cursor.getString(10));
				 	            	model.setUpdated_Date(cursor.getString(11));
				 	            	model.setDownload_Flag(cursor.getString(12));
			   		            } while (cursor.moveToNext());
			   		        }
			   		        if (cursor != null && !cursor.isClosed()) {
			   		            cursor.close();			   		        
			   		        }			   		       
			   		        return model;	 
			 		    } 
    public KnowledgeCenter_Model find_LatestUpdatedDateRow_KnowledgeCenter_Table() {
				    	String query = "Select * FROM " + TABLE_KNOWLEDGE_CENTER;
				    	
				    	SQLiteDatabase db = this.getWritableDatabase();
				    	Cursor cursor1 = db.rawQuery(query,null);
				    	
				    	
				    	Cursor cursor = db.rawQuery(query+ " ORDER BY "+COLUMN_UPDATED_DATE_KC + " DESC" +" LIMIT 1 " , new 

				    			String[] {}); 	
				    	
				    	System.out.println("count of max transaction date"+cursor.getCount())  ;
				    	KnowledgeCenter_Model model = new KnowledgeCenter_Model();
				    	
				    	if (cursor.moveToFirst()) {
				    		cursor.moveToFirst();
				    		model.setKnowledgeCenter_Id(Integer.parseInt(cursor.getString(0)));
		 	            	model.setFile_UploadMaster_Id(Integer.parseInt(cursor.getString(1)));
		 	            	model.setFile_Title(cursor.getString(2));
		 	            	model.setFileType_Id(Integer.parseInt(cursor.getString(3)));
		 	            	model.setKeywords(cursor.getString(4));
		 	            	model.setPurpose_Id(Integer.parseInt(cursor.getString(5)));
		 	            	model.setMobilePath(cursor.getString(6));
		 	            	model.setSite_Id(Integer.parseInt(cursor.getString(7)));			 	            	
		 	            	model.setDescription(cursor.getString(8));
		 	            	model.setPortalPath(cursor.getString(9));
		 	            	model.setCreated_Date(cursor.getString(10));
		 	            	model.setUpdated_Date(cursor.getString(11));
		 	            	model.setDownload_Flag(cursor.getString(12));
				    		cursor.close();
				    	} else {
				    		
				    		model = null;    		
				    		
				    	}
				    	db.close();
				    	return model;
				    }
    public ArrayList<KnowledgeCenter_Model> find_SiteID_KnowledgeCenterList(int site_id) throws SQLException {
					    	SQLiteDatabase db = this.getWritableDatabase();
					    	 
					        ArrayList<KnowledgeCenter_Model> get_Documents_bySiteID = new ArrayList<KnowledgeCenter_Model>();
					        Cursor cursor = db.query(true, TABLE_KNOWLEDGE_CENTER, new String[] {
				 		    		 COLUMN_KNOWLEDGE_CENTER_ID,
				 	 		         COLUMN_FILE_UPLOADMASTER_ID_KC,
				 	 		         COLUMN_FILE_TITLE_KC,
				 	 		         COLUMN_FILE_TYPE_ID_KC,
				 	 		         COLUMN_KEYWORDS_KC,
				 	 		         COLUMN_PURPOSE_ID_KC,
				 	 		         COLUMN_MOBILE_PATH_KC,
				 	 		         COLUMN_SITE_ID_KC,
				 	 		         COLUMN_DESCRIPTION_KC,
				 	 		         COLUMN_PORTAL_PATH_KC,
				 	 		         COLUMN_CREATED_DATE_KC,
				 	 		         COLUMN_UPDATED_DATE_KC,
				 	 		         COLUMN_DOWNLOAD_FLAG_KC,}, 			                                     		
				 	 		         COLUMN_SITE_ID_KC + "=?", 
				                    new String[] {String.valueOf(site_id)},
				                    null, null, null , null);
					  
					   
					        if (cursor.moveToFirst()) {
					            do {
					            	KnowledgeCenter_Model model=new KnowledgeCenter_Model();
					            	 	model.setKnowledgeCenter_Id(Integer.parseInt(cursor.getString(0)));
					 	            	model.setFile_UploadMaster_Id(Integer.parseInt(cursor.getString(1)));
					 	            	model.setFile_Title(cursor.getString(2));
					 	            	model.setFileType_Id(Integer.parseInt(cursor.getString(3)));
					 	            	model.setKeywords(cursor.getString(4));
					 	            	model.setPurpose_Id(Integer.parseInt(cursor.getString(5)));
					 	            	model.setMobilePath(cursor.getString(6));
					 	            	model.setSite_Id(Integer.parseInt(cursor.getString(7)));			 	            	
					 	            	model.setDescription(cursor.getString(8));
					 	            	model.setPortalPath(cursor.getString(9));
					 	            	model.setCreated_Date(cursor.getString(10));
					 	            	model.setUpdated_Date(cursor.getString(11));
					 	            	model.setDownload_Flag(cursor.getString(12));
					           		
					 	            	get_Documents_bySiteID.add(model);
					            } while (cursor.moveToNext());
					        }
					        if (cursor != null && !cursor.isClosed()) {
					            cursor.close();
					           
					        }
					        System.out.println("get knowledgeCenter by site_id in db size of list"+get_Documents_bySiteID.size());
					        return get_Documents_bySiteID;
					 	 
					    }
 // Updating KnowledgeCenter row
    public int Update_KnowledgeCenter_Row(KnowledgeCenter_Model model) {
					    SQLiteDatabase db = this.getWritableDatabase();

					    ContentValues values = new ContentValues();
					       values.put(COLUMN_KNOWLEDGE_CENTER_ID, model.getKnowledgeCenter_Id());
					       values.put(COLUMN_FILE_UPLOADMASTER_ID_KC, model.getFile_UploadMaster_Id());
			 		       values.put(COLUMN_FILE_TITLE_KC, model.getFile_Title());
			 		       values.put(COLUMN_FILE_TYPE_ID_KC, model.getFileType_Id());
			 		       values.put(COLUMN_KEYWORDS_KC, model.getKeywords());	
			 		       values.put(COLUMN_PURPOSE_ID_KC, model.getPurpose_Id());	
			 		       values.put(COLUMN_MOBILE_PATH_KC, model.getMobilePath());
			 		       values.put(COLUMN_SITE_ID_KC, model.getSite_Id());
			 		       values.put(COLUMN_DESCRIPTION_KC, model.getDescription());
			 		       values.put(COLUMN_PORTAL_PATH_KC, model.getPortalPath());
			 		       values.put(COLUMN_CREATED_DATE_KC, model.getCreated_Date());
			 		       values.put(COLUMN_UPDATED_DATE_KC, model.getUpdated_Date());
			 		       values.put(COLUMN_DOWNLOAD_FLAG_KC, model.getDownload_Flag());	
					   
					    // updating row
					    return db.update(TABLE_KNOWLEDGE_CENTER, values, COLUMN_KNOWLEDGE_CENTER_ID+ " = ?",
					    new String[] { String.valueOf(model.getKnowledgeCenter_Id()) });	
					   
					    } 
}